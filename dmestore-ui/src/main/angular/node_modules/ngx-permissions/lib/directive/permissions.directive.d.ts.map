{"version":3,"file":"permissions.directive.d.ts","sources":["permissions.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\nimport { NgxPermissionsService } from '../service/permissions.service';\nimport { NgxRolesService } from '../service/roles.service';\nexport declare class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges {\n    private permissionsService;\n    private configurationService;\n    private rolesService;\n    private viewContainer;\n    private changeDetector;\n    private templateRef;\n    ngxPermissionsOnly: string | string[];\n    ngxPermissionsOnlyThen: TemplateRef<any>;\n    ngxPermissionsOnlyElse: TemplateRef<any>;\n    ngxPermissionsExcept: string | string[];\n    ngxPermissionsExceptElse: TemplateRef<any>;\n    ngxPermissionsExceptThen: TemplateRef<any>;\n    ngxPermissionsThen: TemplateRef<any>;\n    ngxPermissionsElse: TemplateRef<any>;\n    ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\n    ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\n    ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\n    ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\n    ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\n    ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\n    permissionsAuthorized: EventEmitter<any>;\n    permissionsUnauthorized: EventEmitter<any>;\n    private initPermissionSubscription;\n    private firstMergeUnusedRun;\n    private currentAuthorizedState;\n    constructor(permissionsService: NgxPermissionsService, configurationService: NgxPermissionsConfigurationService, rolesService: NgxRolesService, viewContainer: ViewContainerRef, changeDetector: ChangeDetectorRef, templateRef: TemplateRef<any>);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private validateExceptOnlyPermissions;\n    private validateExceptAndOnlyPermissions;\n    private validateOnlyPermissions;\n    private handleUnauthorisedPermission;\n    private handleAuthorisedPermission;\n    private applyStrategyAccordingToStrategyType;\n    private showTemplateBlockInView;\n    private getAuthorisedTemplates;\n    private elseBlockDefined;\n    private thenBlockDefined;\n    private getAuthorizedStrategyInput;\n    private getUnAuthorizedStrategyInput;\n    private applyStrategy;\n}\n"]}