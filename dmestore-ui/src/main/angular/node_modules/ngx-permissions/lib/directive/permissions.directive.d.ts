import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';
import { NgxPermissionsService } from '../service/permissions.service';
import { NgxRolesService } from '../service/roles.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges {
    private permissionsService;
    private configurationService;
    private rolesService;
    private viewContainer;
    private changeDetector;
    private templateRef;
    ngxPermissionsOnly: string | string[];
    ngxPermissionsOnlyThen: TemplateRef<any>;
    ngxPermissionsOnlyElse: TemplateRef<any>;
    ngxPermissionsExcept: string | string[];
    ngxPermissionsExceptElse: TemplateRef<any>;
    ngxPermissionsExceptThen: TemplateRef<any>;
    ngxPermissionsThen: TemplateRef<any>;
    ngxPermissionsElse: TemplateRef<any>;
    ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;
    ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;
    ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;
    ngxPermissionsAuthorisedStrategy: string | StrategyFunction;
    permissionsAuthorized: EventEmitter<any>;
    permissionsUnauthorized: EventEmitter<any>;
    private initPermissionSubscription;
    private firstMergeUnusedRun;
    private currentAuthorizedState;
    constructor(permissionsService: NgxPermissionsService, configurationService: NgxPermissionsConfigurationService, rolesService: NgxRolesService, viewContainer: ViewContainerRef, changeDetector: ChangeDetectorRef, templateRef: TemplateRef<any>);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private validateExceptOnlyPermissions;
    private validateExceptAndOnlyPermissions;
    private validateOnlyPermissions;
    private handleUnauthorisedPermission;
    private handleAuthorisedPermission;
    private applyStrategyAccordingToStrategyType;
    private showTemplateBlockInView;
    private getAuthorisedTemplates;
    private elseBlockDefined;
    private thenBlockDefined;
    private getAuthorizedStrategyInput;
    private getUnAuthorizedStrategyInput;
    private applyStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPermissionsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxPermissionsDirective, "[ngxPermissionsOnly],[ngxPermissionsExcept]", never, { "ngxPermissionsOnly": "ngxPermissionsOnly"; "ngxPermissionsOnlyThen": "ngxPermissionsOnlyThen"; "ngxPermissionsOnlyElse": "ngxPermissionsOnlyElse"; "ngxPermissionsExcept": "ngxPermissionsExcept"; "ngxPermissionsExceptElse": "ngxPermissionsExceptElse"; "ngxPermissionsExceptThen": "ngxPermissionsExceptThen"; "ngxPermissionsThen": "ngxPermissionsThen"; "ngxPermissionsElse": "ngxPermissionsElse"; "ngxPermissionsOnlyAuthorisedStrategy": "ngxPermissionsOnlyAuthorisedStrategy"; "ngxPermissionsOnlyUnauthorisedStrategy": "ngxPermissionsOnlyUnauthorisedStrategy"; "ngxPermissionsExceptUnauthorisedStrategy": "ngxPermissionsExceptUnauthorisedStrategy"; "ngxPermissionsExceptAuthorisedStrategy": "ngxPermissionsExceptAuthorisedStrategy"; "ngxPermissionsUnauthorisedStrategy": "ngxPermissionsUnauthorisedStrategy"; "ngxPermissionsAuthorisedStrategy": "ngxPermissionsAuthorisedStrategy"; }, { "permissionsAuthorized": "permissionsAuthorized"; "permissionsUnauthorized": "permissionsUnauthorized"; }, never>;
}

//# sourceMappingURL=permissions.directive.d.ts.map