{"version":3,"file":"permissions-guard.service.d.ts","sources":["permissions-guard.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RedirectTo, RedirectToFn } from '../model/permissions-router-data.model';\nimport { NgxPermissionsService } from '../service/permissions.service';\nimport { NgxRolesService } from '../service/roles.service';\nexport interface NgxPermissionsData {\n    only?: string | string[];\n    except?: string | string[];\n    redirectTo?: RedirectTo | RedirectToFn;\n}\nexport declare class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\n    private permissionsService;\n    private rolesService;\n    private router;\n    constructor(permissionsService: NgxPermissionsService, rolesService: NgxRolesService, router: Router);\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean;\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean;\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean>;\n    private hasPermissions;\n    private transformPermission;\n    private isParameterAvailable;\n    private passingExceptPermissionsValidation;\n    private redirectToAnotherRoute;\n    private isRedirectionWithParameters;\n    private transformNavigationCommands;\n    private transformNavigationExtras;\n    private onlyRedirectCheck;\n    private handleRedirectOfFailedPermission;\n    private isFailedPermissionPropertyOfRedirectTo;\n    private checkOnlyPermissions;\n    private passingOnlyPermissionsValidation;\n}\n"]}