{"version":3,"file":"configuration.service.d.ts","sources":["configuration.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\nexport declare type StrategyFunction = (templateRef?: TemplateRef<any>) => void;\nexport interface Strategy {\n    [key: string]: StrategyFunction;\n}\nexport declare const USE_CONFIGURATION_STORE: InjectionToken<unknown>;\nexport declare class NgxPermissionsConfigurationService {\n    private isolate;\n    private configurationStore;\n    private strategiesSource;\n    strategies$: Observable<Strategy>;\n    onAuthorisedDefaultStrategy: string | undefined;\n    onUnAuthorisedDefaultStrategy: string | undefined;\n    constructor(isolate: boolean, configurationStore: NgxPermissionsConfigurationStore);\n    setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void;\n    setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void;\n    addPermissionStrategy(key: string, func: StrategyFunction): void;\n    getStrategy(key: string): StrategyFunction;\n    getAllStrategies(): Strategy;\n    private getDefinedStrategy;\n    private isPredefinedStrategy;\n}\n"]}