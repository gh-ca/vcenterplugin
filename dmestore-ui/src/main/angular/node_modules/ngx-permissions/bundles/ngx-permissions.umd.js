(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('ngx-permissions', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/router'], factory) :
    (global = global || self, factory(global['ngx-permissions'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.router));
}(this, (function (exports, core, rxjs, operators, router) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (!exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var NgxPermissionsPredefinedStrategies = {
        REMOVE: 'remove',
        SHOW: 'show'
    };

    var NgxPermissionsConfigurationStore = /** @class */ (function () {
        function NgxPermissionsConfigurationStore() {
            this.strategiesSource = new rxjs.BehaviorSubject({});
            this.strategies$ = this.strategiesSource.asObservable();
        }
        return NgxPermissionsConfigurationStore;
    }());
    NgxPermissionsConfigurationStore.decorators = [
        { type: core.Injectable }
    ];
    NgxPermissionsConfigurationStore.ctorParameters = function () { return []; };

    var USE_CONFIGURATION_STORE = new core.InjectionToken('USE_CONFIGURATION_STORE');
    var NgxPermissionsConfigurationService = /** @class */ (function () {
        function NgxPermissionsConfigurationService(isolate, configurationStore) {
            if (isolate === void 0) { isolate = false; }
            this.isolate = isolate;
            this.configurationStore = configurationStore;
            this.strategiesSource = this.isolate ? new rxjs.BehaviorSubject({}) : this.configurationStore.strategiesSource;
            this.strategies$ = this.strategiesSource.asObservable();
            this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;
            this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;
        }
        NgxPermissionsConfigurationService.prototype.setDefaultOnAuthorizedStrategy = function (name) {
            if (this.isolate) {
                this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            }
            else {
                this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
                this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;
            }
        };
        NgxPermissionsConfigurationService.prototype.setDefaultOnUnauthorizedStrategy = function (name) {
            if (this.isolate) {
                this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            }
            else {
                this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
                this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;
            }
        };
        NgxPermissionsConfigurationService.prototype.addPermissionStrategy = function (key, func) {
            this.strategiesSource.value[key] = func;
        };
        NgxPermissionsConfigurationService.prototype.getStrategy = function (key) {
            return this.strategiesSource.value[key];
        };
        NgxPermissionsConfigurationService.prototype.getAllStrategies = function () {
            return this.strategiesSource.value;
        };
        NgxPermissionsConfigurationService.prototype.getDefinedStrategy = function (name) {
            if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {
                return name;
            }
            else {
                throw new Error("No ' " + name + " ' strategy is found please define one");
            }
        };
        NgxPermissionsConfigurationService.prototype.isPredefinedStrategy = function (strategy) {
            return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;
        };
        return NgxPermissionsConfigurationService;
    }());
    NgxPermissionsConfigurationService.decorators = [
        { type: core.Injectable }
    ];
    NgxPermissionsConfigurationService.ctorParameters = function () { return [
        { type: Boolean, decorators: [{ type: core.Inject, args: [USE_CONFIGURATION_STORE,] }] },
        { type: NgxPermissionsConfigurationStore }
    ]; };

    var NgxPermissionsStore = /** @class */ (function () {
        function NgxPermissionsStore() {
            this.permissionsSource = new rxjs.BehaviorSubject({});
            this.permissions$ = this.permissionsSource.asObservable();
        }
        return NgxPermissionsStore;
    }());
    NgxPermissionsStore.decorators = [
        { type: core.Injectable }
    ];
    NgxPermissionsStore.ctorParameters = function () { return []; };

    function isFunction(value) {
        return typeof value === 'function';
    }
    function isPlainObject(value) {
        if (Object.prototype.toString.call(value) !== '[object Object]') {
            return false;
        }
        else {
            var prototype = Object.getPrototypeOf(value);
            return prototype === null || prototype === Object.prototype;
        }
    }
    function isString(value) {
        return !!value && typeof value === 'string';
    }
    function isBoolean(value) {
        return typeof value === 'boolean';
    }
    function isPromise(promise) {
        return Object.prototype.toString.call(promise) === '[object Promise]';
    }
    function notEmptyValue(value) {
        if (Array.isArray(value)) {
            return value.length > 0;
        }
        return !!value;
    }
    function transformStringToArray(value) {
        if (isString(value)) {
            return [value];
        }
        return value;
    }

    var USE_PERMISSIONS_STORE = new core.InjectionToken('USE_PERMISSIONS_STORE');
    var NgxPermissionsService = /** @class */ (function () {
        function NgxPermissionsService(isolate, permissionsStore) {
            if (isolate === void 0) { isolate = false; }
            this.isolate = isolate;
            this.permissionsStore = permissionsStore;
            this.permissionsSource = isolate ? new rxjs.BehaviorSubject({}) : permissionsStore.permissionsSource;
            this.permissions$ = this.permissionsSource.asObservable();
        }
        /**
         * Remove all permissions from permissions source
         */
        NgxPermissionsService.prototype.flushPermissions = function () {
            this.permissionsSource.next({});
        };
        NgxPermissionsService.prototype.hasPermission = function (permission) {
            if (!permission || (Array.isArray(permission) && permission.length === 0)) {
                return Promise.resolve(true);
            }
            permission = transformStringToArray(permission);
            return this.hasArrayPermission(permission);
        };
        NgxPermissionsService.prototype.loadPermissions = function (permissions, validationFunction) {
            var _this = this;
            var newPermissions = permissions.reduce(function (source, name) { return _this.reducePermission(source, name, validationFunction); }, {});
            this.permissionsSource.next(newPermissions);
        };
        NgxPermissionsService.prototype.addPermission = function (permission, validationFunction) {
            var _this = this;
            if (Array.isArray(permission)) {
                var permissions = permission.reduce(function (source, name) { return _this.reducePermission(source, name, validationFunction); }, this.permissionsSource.value);
                this.permissionsSource.next(permissions);
            }
            else {
                var permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);
                this.permissionsSource.next(permissions);
            }
        };
        NgxPermissionsService.prototype.removePermission = function (permissionName) {
            var permissions = Object.assign({}, this.permissionsSource.value);
            delete permissions[permissionName];
            this.permissionsSource.next(permissions);
        };
        NgxPermissionsService.prototype.getPermission = function (name) {
            return this.permissionsSource.value[name];
        };
        NgxPermissionsService.prototype.getPermissions = function () {
            return this.permissionsSource.value;
        };
        NgxPermissionsService.prototype.reducePermission = function (source, name, validationFunction) {
            var _a, _b;
            if (!!validationFunction && isFunction(validationFunction)) {
                return Object.assign(Object.assign({}, source), (_a = {}, _a[name] = { name: name, validationFunction: validationFunction }, _a));
            }
            return Object.assign(Object.assign({}, source), (_b = {}, _b[name] = { name: name }, _b));
        };
        NgxPermissionsService.prototype.hasArrayPermission = function (permissions) {
            var _this = this;
            var promises = permissions.map(function (key) {
                if (_this.hasPermissionValidationFunction(key)) {
                    var validationFunction_1 = _this.permissionsSource.value[key].validationFunction;
                    var immutableValue_1 = Object.assign({}, _this.permissionsSource.value);
                    return rxjs.of(null).pipe(operators.map(function () { return validationFunction_1(key, immutableValue_1); }), operators.switchMap(function (promise) { return isBoolean(promise) ?
                        rxjs.of(promise) : promise; }), operators.catchError(function () { return rxjs.of(false); }));
                }
                // check for name of the permission if there is no validation function
                return rxjs.of(!!_this.permissionsSource.value[key]);
            });
            return rxjs.from(promises).pipe(operators.mergeAll(), operators.first(function (data) { return data !== false; }, false), operators.map(function (data) { return data !== false; })).toPromise().then(function (data) { return data; });
        };
        NgxPermissionsService.prototype.hasPermissionValidationFunction = function (key) {
            return !!this.permissionsSource.value[key] &&
                !!this.permissionsSource.value[key].validationFunction &&
                isFunction(this.permissionsSource.value[key].validationFunction);
        };
        return NgxPermissionsService;
    }());
    NgxPermissionsService.decorators = [
        { type: core.Injectable }
    ];
    NgxPermissionsService.ctorParameters = function () { return [
        { type: Boolean, decorators: [{ type: core.Inject, args: [USE_PERMISSIONS_STORE,] }] },
        { type: NgxPermissionsStore }
    ]; };

    var NgxRolesStore = /** @class */ (function () {
        function NgxRolesStore() {
            this.rolesSource = new rxjs.BehaviorSubject({});
            this.roles$ = this.rolesSource.asObservable();
        }
        return NgxRolesStore;
    }());

    var USE_ROLES_STORE = new core.InjectionToken('USE_ROLES_STORE');
    var NgxRolesService = /** @class */ (function () {
        function NgxRolesService(isolate, rolesStore, permissionsService) {
            if (isolate === void 0) { isolate = false; }
            this.isolate = isolate;
            this.rolesStore = rolesStore;
            this.permissionsService = permissionsService;
            this.rolesSource = this.isolate ? new rxjs.BehaviorSubject({}) : this.rolesStore.rolesSource;
            this.roles$ = this.rolesSource.asObservable();
        }
        NgxRolesService.prototype.addRole = function (name, validationFunction) {
            var _a;
            var roles = Object.assign(Object.assign({}, this.rolesSource.value), (_a = {}, _a[name] = { name: name, validationFunction: validationFunction }, _a));
            this.rolesSource.next(roles);
        };
        NgxRolesService.prototype.addRoles = function (rolesObj) {
            var _this = this;
            Object.keys(rolesObj).forEach(function (key, index) {
                _this.addRole(key, rolesObj[key]);
            });
        };
        NgxRolesService.prototype.flushRoles = function () {
            this.rolesSource.next({});
        };
        NgxRolesService.prototype.removeRole = function (roleName) {
            var roles = Object.assign({}, this.rolesSource.value);
            delete roles[roleName];
            this.rolesSource.next(roles);
        };
        NgxRolesService.prototype.getRoles = function () {
            return this.rolesSource.value;
        };
        NgxRolesService.prototype.getRole = function (name) {
            return this.rolesSource.value[name];
        };
        NgxRolesService.prototype.hasOnlyRoles = function (names) {
            var isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);
            if (isNamesEmpty) {
                return Promise.resolve(true);
            }
            names = transformStringToArray(names);
            return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])
                .then(function (_a) {
                var _b = __read(_a, 2), hasRoles = _b[0], hasPermissions = _b[1];
                return hasRoles || hasPermissions;
            });
        };
        NgxRolesService.prototype.hasRoleKey = function (roleName) {
            var _this = this;
            var promises = roleName.map(function (key) {
                var hasValidationFunction = !!_this.rolesSource.value[key] &&
                    !!_this.rolesSource.value[key].validationFunction &&
                    isFunction(_this.rolesSource.value[key].validationFunction);
                if (hasValidationFunction && !isPromise(_this.rolesSource.value[key].validationFunction)) {
                    var validationFunction_1 = _this.rolesSource.value[key].validationFunction;
                    var immutableValue_1 = Object.assign({}, _this.rolesSource.value);
                    return rxjs.of(null).pipe(operators.map(function () { return validationFunction_1(key, immutableValue_1); }), operators.switchMap(function (promise) { return isBoolean(promise) ?
                        rxjs.of(promise) : promise; }), operators.catchError(function () { return rxjs.of(false); }));
                }
                return rxjs.of(false);
            });
            return rxjs.from(promises).pipe(operators.mergeAll(), operators.first(function (data) { return data !== false; }, false), operators.map(function (data) { return data !== false; })).toPromise().then(function (data) { return data; });
        };
        NgxRolesService.prototype.hasRolePermission = function (roles, roleNames) {
            var _this = this;
            return rxjs.from(roleNames).pipe(operators.mergeMap(function (key) {
                if (roles[key] && Array.isArray(roles[key].validationFunction)) {
                    return rxjs.from(roles[key].validationFunction).pipe(operators.mergeMap(function (permission) { return _this.permissionsService.hasPermission(permission); }), operators.every(function (hasPermission) { return hasPermission === true; }));
                }
                return rxjs.of(false);
            }), operators.first(function (hasPermission) { return hasPermission === true; }, false)).toPromise();
        };
        return NgxRolesService;
    }());
    NgxRolesService.decorators = [
        { type: core.Injectable }
    ];
    NgxRolesService.ctorParameters = function () { return [
        { type: Boolean, decorators: [{ type: core.Inject, args: [USE_ROLES_STORE,] }] },
        { type: NgxRolesStore },
        { type: NgxPermissionsService }
    ]; };

    var NgxPermissionsDirective = /** @class */ (function () {
        function NgxPermissionsDirective(permissionsService, configurationService, rolesService, viewContainer, changeDetector, templateRef) {
            this.permissionsService = permissionsService;
            this.configurationService = configurationService;
            this.rolesService = rolesService;
            this.viewContainer = viewContainer;
            this.changeDetector = changeDetector;
            this.templateRef = templateRef;
            this.permissionsAuthorized = new core.EventEmitter();
            this.permissionsUnauthorized = new core.EventEmitter();
            // skip first run cause merge will fire twice
            this.firstMergeUnusedRun = 1;
        }
        NgxPermissionsDirective.prototype.ngOnInit = function () {
            this.viewContainer.clear();
            this.initPermissionSubscription = this.validateExceptOnlyPermissions();
        };
        NgxPermissionsDirective.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var onlyChanges = changes.ngxPermissionsOnly;
            var exceptChanges = changes.ngxPermissionsExcept;
            if (onlyChanges || exceptChanges) {
                // Due to bug when you pass empty array
                if (onlyChanges && onlyChanges.firstChange) {
                    return;
                }
                if (exceptChanges && exceptChanges.firstChange) {
                    return;
                }
                rxjs.merge(this.permissionsService.permissions$, this.rolesService.roles$)
                    .pipe(operators.skip(this.firstMergeUnusedRun), operators.take(1))
                    .subscribe(function () {
                    if (notEmptyValue(_this.ngxPermissionsExcept)) {
                        _this.validateExceptAndOnlyPermissions();
                        return;
                    }
                    if (notEmptyValue(_this.ngxPermissionsOnly)) {
                        _this.validateOnlyPermissions();
                        return;
                    }
                    _this.handleAuthorisedPermission(_this.getAuthorisedTemplates());
                });
            }
        };
        NgxPermissionsDirective.prototype.ngOnDestroy = function () {
            if (this.initPermissionSubscription) {
                this.initPermissionSubscription.unsubscribe();
            }
        };
        NgxPermissionsDirective.prototype.validateExceptOnlyPermissions = function () {
            var _this = this;
            return rxjs.merge(this.permissionsService.permissions$, this.rolesService.roles$)
                .pipe(operators.skip(this.firstMergeUnusedRun))
                .subscribe(function () {
                if (notEmptyValue(_this.ngxPermissionsExcept)) {
                    _this.validateExceptAndOnlyPermissions();
                    return;
                }
                if (notEmptyValue(_this.ngxPermissionsOnly)) {
                    _this.validateOnlyPermissions();
                    return;
                }
                _this.handleAuthorisedPermission(_this.getAuthorisedTemplates());
            });
        };
        NgxPermissionsDirective.prototype.validateExceptAndOnlyPermissions = function () {
            var _this = this;
            Promise
                .all([
                this.permissionsService.hasPermission(this.ngxPermissionsExcept),
                this.rolesService.hasOnlyRoles(this.ngxPermissionsExcept)
            ])
                .then(function (_a) {
                var _b = __read(_a, 2), hasPermission = _b[0], hasRole = _b[1];
                if (hasPermission || hasRole) {
                    _this.handleUnauthorisedPermission(_this.ngxPermissionsExceptElse || _this.ngxPermissionsElse);
                    return;
                }
                if (!!_this.ngxPermissionsOnly) {
                    throw false;
                }
                _this.handleAuthorisedPermission(_this.ngxPermissionsExceptThen || _this.ngxPermissionsThen || _this.templateRef);
            })
                .catch(function () {
                if (!!_this.ngxPermissionsOnly) {
                    _this.validateOnlyPermissions();
                }
                else {
                    _this.handleAuthorisedPermission(_this.ngxPermissionsExceptThen || _this.ngxPermissionsThen || _this.templateRef);
                }
            });
        };
        NgxPermissionsDirective.prototype.validateOnlyPermissions = function () {
            var _this = this;
            Promise
                .all([this.permissionsService.hasPermission(this.ngxPermissionsOnly), this.rolesService.hasOnlyRoles(this.ngxPermissionsOnly)])
                .then(function (_a) {
                var _b = __read(_a, 2), hasPermissions = _b[0], hasRoles = _b[1];
                if (hasPermissions || hasRoles) {
                    _this.handleAuthorisedPermission(_this.ngxPermissionsOnlyThen || _this.ngxPermissionsThen || _this.templateRef);
                }
                else {
                    _this.handleUnauthorisedPermission(_this.ngxPermissionsOnlyElse || _this.ngxPermissionsElse);
                }
            })
                .catch(function () {
                _this.handleUnauthorisedPermission(_this.ngxPermissionsOnlyElse || _this.ngxPermissionsElse);
            });
        };
        NgxPermissionsDirective.prototype.handleUnauthorisedPermission = function (template) {
            if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) {
                return;
            }
            this.currentAuthorizedState = false;
            this.permissionsUnauthorized.emit();
            if (this.getUnAuthorizedStrategyInput()) {
                this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());
                return;
            }
            if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {
                this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);
            }
            else {
                this.showTemplateBlockInView(template);
            }
        };
        NgxPermissionsDirective.prototype.handleAuthorisedPermission = function (template) {
            if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) {
                return;
            }
            this.currentAuthorizedState = true;
            this.permissionsAuthorized.emit();
            if (this.getAuthorizedStrategyInput()) {
                this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());
                return;
            }
            if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {
                this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);
            }
            else {
                this.showTemplateBlockInView(template);
            }
        };
        NgxPermissionsDirective.prototype.applyStrategyAccordingToStrategyType = function (strategy) {
            if (isString(strategy)) {
                this.applyStrategy(strategy);
                return;
            }
            if (isFunction(strategy)) {
                this.showTemplateBlockInView(this.templateRef);
                strategy(this.templateRef);
                return;
            }
        };
        NgxPermissionsDirective.prototype.showTemplateBlockInView = function (template) {
            this.viewContainer.clear();
            if (!template) {
                return;
            }
            this.viewContainer.createEmbeddedView(template);
            this.changeDetector.markForCheck();
        };
        NgxPermissionsDirective.prototype.getAuthorisedTemplates = function () {
            return this.ngxPermissionsOnlyThen
                || this.ngxPermissionsExceptThen
                || this.ngxPermissionsThen
                || this.templateRef;
        };
        NgxPermissionsDirective.prototype.elseBlockDefined = function () {
            return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;
        };
        NgxPermissionsDirective.prototype.thenBlockDefined = function () {
            return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;
        };
        NgxPermissionsDirective.prototype.getAuthorizedStrategyInput = function () {
            return this.ngxPermissionsOnlyAuthorisedStrategy ||
                this.ngxPermissionsExceptAuthorisedStrategy ||
                this.ngxPermissionsAuthorisedStrategy;
        };
        NgxPermissionsDirective.prototype.getUnAuthorizedStrategyInput = function () {
            return this.ngxPermissionsOnlyUnauthorisedStrategy ||
                this.ngxPermissionsExceptUnauthorisedStrategy ||
                this.ngxPermissionsUnauthorisedStrategy;
        };
        NgxPermissionsDirective.prototype.applyStrategy = function (name) {
            if (name === NgxPermissionsPredefinedStrategies.SHOW) {
                this.showTemplateBlockInView(this.templateRef);
                return;
            }
            if (name === NgxPermissionsPredefinedStrategies.REMOVE) {
                this.viewContainer.clear();
                return;
            }
            var strategy = this.configurationService.getStrategy(name);
            this.showTemplateBlockInView(this.templateRef);
            strategy(this.templateRef);
        };
        return NgxPermissionsDirective;
    }());
    NgxPermissionsDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
                },] }
    ];
    NgxPermissionsDirective.ctorParameters = function () { return [
        { type: NgxPermissionsService },
        { type: NgxPermissionsConfigurationService },
        { type: NgxRolesService },
        { type: core.ViewContainerRef },
        { type: core.ChangeDetectorRef },
        { type: core.TemplateRef }
    ]; };
    NgxPermissionsDirective.propDecorators = {
        ngxPermissionsOnly: [{ type: core.Input }],
        ngxPermissionsOnlyThen: [{ type: core.Input }],
        ngxPermissionsOnlyElse: [{ type: core.Input }],
        ngxPermissionsExcept: [{ type: core.Input }],
        ngxPermissionsExceptElse: [{ type: core.Input }],
        ngxPermissionsExceptThen: [{ type: core.Input }],
        ngxPermissionsThen: [{ type: core.Input }],
        ngxPermissionsElse: [{ type: core.Input }],
        ngxPermissionsOnlyAuthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsOnlyUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsExceptUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsExceptAuthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsAuthorisedStrategy: [{ type: core.Input }],
        permissionsAuthorized: [{ type: core.Output }],
        permissionsUnauthorized: [{ type: core.Output }]
    };

    var DEFAULT_REDIRECT_KEY = 'default';

    var NgxPermissionsGuard = /** @class */ (function () {
        function NgxPermissionsGuard(permissionsService, rolesService, router) {
            this.permissionsService = permissionsService;
            this.rolesService = rolesService;
            this.router = router;
        }
        NgxPermissionsGuard.prototype.canActivate = function (route, state) {
            return this.hasPermissions(route, state);
        };
        NgxPermissionsGuard.prototype.canActivateChild = function (childRoute, state) {
            return this.hasPermissions(childRoute, state);
        };
        NgxPermissionsGuard.prototype.canLoad = function (route) {
            return this.hasPermissions(route);
        };
        NgxPermissionsGuard.prototype.hasPermissions = function (route, state) {
            var routeDataPermissions = !!route && route.data ? route.data.permissions : {};
            var permissions = this.transformPermission(routeDataPermissions, route, state);
            if (this.isParameterAvailable(permissions.except)) {
                return this.passingExceptPermissionsValidation(permissions, route, state);
            }
            if (this.isParameterAvailable(permissions.only)) {
                return this.passingOnlyPermissionsValidation(permissions, route, state);
            }
            return true;
        };
        NgxPermissionsGuard.prototype.transformPermission = function (permissions, route, state) {
            var only = isFunction(permissions.only)
                ? permissions.only(route, state)
                : transformStringToArray(permissions.only);
            var except = isFunction(permissions.except)
                ? permissions.except(route, state)
                : transformStringToArray(permissions.except);
            var redirectTo = permissions.redirectTo;
            return {
                only: only,
                except: except,
                redirectTo: redirectTo
            };
        };
        NgxPermissionsGuard.prototype.isParameterAvailable = function (permission) {
            return !!permission && permission.length > 0;
        };
        NgxPermissionsGuard.prototype.passingExceptPermissionsValidation = function (permissions, route, state) {
            var _this = this;
            if (!!permissions.redirectTo
                && ((isFunction(permissions.redirectTo))
                    || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo)))) {
                var failedPermission_1 = '';
                return rxjs.from(permissions.except)
                    .pipe(operators.mergeMap(function (permissionsExcept) {
                    return rxjs.forkJoin([
                        _this.permissionsService.hasPermission(permissionsExcept),
                        _this.rolesService.hasOnlyRoles(permissionsExcept)
                    ]).pipe(operators.tap(function (hasPermissions) {
                        var dontHavePermissions = hasPermissions.every(function (hasPermission) { return hasPermission === false; });
                        if (!dontHavePermissions) {
                            failedPermission_1 = permissionsExcept;
                        }
                    }));
                }), operators.first(function (hasPermissions) { return hasPermissions.some(function (hasPermission) { return hasPermission === true; }); }, false), operators.mergeMap(function (isAllFalse) {
                    if (!!failedPermission_1) {
                        _this.handleRedirectOfFailedPermission(permissions, failedPermission_1, route, state);
                        return rxjs.of(false);
                    }
                    if (!isAllFalse && permissions.only) {
                        return _this.onlyRedirectCheck(permissions, route, state);
                    }
                    return rxjs.of(!isAllFalse);
                }))
                    .toPromise();
            }
            return Promise.all([
                this.permissionsService.hasPermission(permissions.except),
                this.rolesService.hasOnlyRoles(permissions.except)
            ]).then(function (_a) {
                var _b = __read(_a, 2), hasPermission = _b[0], hasRoles = _b[1];
                if (hasPermission || hasRoles) {
                    if (permissions.redirectTo) {
                        _this.redirectToAnotherRoute(permissions.redirectTo, route, state);
                    }
                    return false;
                }
                if (permissions.only) {
                    return _this.checkOnlyPermissions(permissions, route, state);
                }
                return true;
            });
        };
        NgxPermissionsGuard.prototype.redirectToAnotherRoute = function (permissionRedirectTo, route, state, failedPermissionName) {
            var redirectTo = isFunction(permissionRedirectTo)
                ? permissionRedirectTo(failedPermissionName, route, state)
                : permissionRedirectTo;
            if (this.isRedirectionWithParameters(redirectTo)) {
                redirectTo.navigationCommands = this.transformNavigationCommands(redirectTo.navigationCommands, route, state);
                redirectTo.navigationExtras = this.transformNavigationExtras(redirectTo.navigationExtras, route, state);
                this.router.navigate(redirectTo.navigationCommands, redirectTo.navigationExtras);
                return;
            }
            if (Array.isArray(redirectTo)) {
                this.router.navigate(redirectTo);
            }
            else {
                this.router.navigate([redirectTo]);
            }
        };
        NgxPermissionsGuard.prototype.isRedirectionWithParameters = function (object) {
            return (isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras));
        };
        NgxPermissionsGuard.prototype.transformNavigationCommands = function (navigationCommands, route, state) {
            return isFunction(navigationCommands)
                ? navigationCommands(route, state)
                : navigationCommands;
        };
        NgxPermissionsGuard.prototype.transformNavigationExtras = function (navigationExtras, route, state) {
            return isFunction(navigationExtras)
                ? navigationExtras(route, state)
                : navigationExtras;
        };
        NgxPermissionsGuard.prototype.onlyRedirectCheck = function (permissions, route, state) {
            var _this = this;
            var failedPermission = '';
            return rxjs.from(permissions.only)
                .pipe(operators.mergeMap(function (permissionsOnly) {
                return rxjs.forkJoin([
                    _this.permissionsService.hasPermission(permissionsOnly),
                    _this.rolesService.hasOnlyRoles(permissionsOnly)
                ]).pipe(operators.tap(function (hasPermissions) {
                    var failed = hasPermissions.every(function (hasPermission) { return hasPermission === false; });
                    if (failed) {
                        failedPermission = permissionsOnly;
                    }
                }));
            }), operators.first(function (hasPermissions) {
                if (isFunction(permissions.redirectTo)) {
                    return hasPermissions.some(function (hasPermission) { return hasPermission === true; });
                }
                return hasPermissions.every(function (hasPermission) { return hasPermission === false; });
            }, false), operators.mergeMap(function (pass) {
                if (isFunction(permissions.redirectTo)) {
                    if (pass) {
                        return rxjs.of(true);
                    }
                    else {
                        _this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
                        return rxjs.of(false);
                    }
                }
                else {
                    if (!!failedPermission) {
                        _this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
                    }
                    return rxjs.of(!pass);
                }
            }))
                .toPromise();
        };
        NgxPermissionsGuard.prototype.handleRedirectOfFailedPermission = function (permissions, failedPermission, route, state) {
            if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {
                this.redirectToAnotherRoute(permissions.redirectTo[failedPermission], route, state, failedPermission);
            }
            else {
                if (isFunction(permissions.redirectTo)) {
                    this.redirectToAnotherRoute(permissions.redirectTo, route, state, failedPermission);
                }
                else {
                    this.redirectToAnotherRoute(permissions.redirectTo[DEFAULT_REDIRECT_KEY], route, state, failedPermission);
                }
            }
        };
        NgxPermissionsGuard.prototype.isFailedPermissionPropertyOfRedirectTo = function (permissions, failedPermission) {
            return (!!permissions.redirectTo && permissions.redirectTo[failedPermission]);
        };
        NgxPermissionsGuard.prototype.checkOnlyPermissions = function (purePermissions, route, state) {
            var _this = this;
            var permissions = Object.assign({}, purePermissions);
            return Promise.all([
                this.permissionsService.hasPermission(permissions.only),
                this.rolesService.hasOnlyRoles(permissions.only)
            ]).then(function (_a) {
                var _b = __read(_a, 2), hasPermission = _b[0], hasRole = _b[1];
                if (hasPermission || hasRole) {
                    return true;
                }
                if (permissions.redirectTo) {
                    _this.redirectToAnotherRoute(permissions.redirectTo, route, state);
                }
                return false;
            });
        };
        NgxPermissionsGuard.prototype.passingOnlyPermissionsValidation = function (permissions, route, state) {
            if ((isFunction(permissions.redirectTo)
                || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {
                return this.onlyRedirectCheck(permissions, route, state);
            }
            return this.checkOnlyPermissions(permissions, route, state);
        };
        return NgxPermissionsGuard;
    }());
    NgxPermissionsGuard.decorators = [
        { type: core.Injectable }
    ];
    NgxPermissionsGuard.ctorParameters = function () { return [
        { type: NgxPermissionsService },
        { type: NgxRolesService },
        { type: router.Router }
    ]; };

    var NgxPermissionsAllowStubDirective = /** @class */ (function () {
        function NgxPermissionsAllowStubDirective(viewContainer, templateRef) {
            this.viewContainer = viewContainer;
            this.templateRef = templateRef;
            this.permissionsAuthorized = new core.EventEmitter();
            this.permissionsUnauthorized = new core.EventEmitter();
        }
        NgxPermissionsAllowStubDirective.prototype.ngOnInit = function () {
            this.viewContainer.clear();
            this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());
            this.permissionsUnauthorized.emit();
        };
        NgxPermissionsAllowStubDirective.prototype.getAuthorizedTemplate = function () {
            return this.ngxPermissionsOnlyThen ||
                this.ngxPermissionsExceptThen ||
                this.ngxPermissionsThen ||
                this.templateRef;
        };
        return NgxPermissionsAllowStubDirective;
    }());
    NgxPermissionsAllowStubDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
                },] }
    ];
    NgxPermissionsAllowStubDirective.ctorParameters = function () { return [
        { type: core.ViewContainerRef },
        { type: core.TemplateRef }
    ]; };
    NgxPermissionsAllowStubDirective.propDecorators = {
        ngxPermissionsOnly: [{ type: core.Input }],
        ngxPermissionsOnlyThen: [{ type: core.Input }],
        ngxPermissionsOnlyElse: [{ type: core.Input }],
        ngxPermissionsExcept: [{ type: core.Input }],
        ngxPermissionsExceptElse: [{ type: core.Input }],
        ngxPermissionsExceptThen: [{ type: core.Input }],
        ngxPermissionsThen: [{ type: core.Input }],
        ngxPermissionsElse: [{ type: core.Input }],
        ngxPermissionsOnlyAuthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsOnlyUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsExceptUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsExceptAuthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsAuthorisedStrategy: [{ type: core.Input }],
        permissionsAuthorized: [{ type: core.Output }],
        permissionsUnauthorized: [{ type: core.Output }]
    };

    var NgxPermissionsRestrictStubDirective = /** @class */ (function () {
        function NgxPermissionsRestrictStubDirective(viewContainer) {
            this.viewContainer = viewContainer;
            this.permissionsAuthorized = new core.EventEmitter();
            this.permissionsUnauthorized = new core.EventEmitter();
        }
        NgxPermissionsRestrictStubDirective.prototype.ngOnInit = function () {
            this.viewContainer.clear();
            if (this.getUnAuthorizedTemplate()) {
                this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());
            }
            this.permissionsUnauthorized.emit();
        };
        NgxPermissionsRestrictStubDirective.prototype.getUnAuthorizedTemplate = function () {
            return this.ngxPermissionsOnlyElse ||
                this.ngxPermissionsExceptElse ||
                this.ngxPermissionsElse;
        };
        return NgxPermissionsRestrictStubDirective;
    }());
    NgxPermissionsRestrictStubDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
                },] }
    ];
    NgxPermissionsRestrictStubDirective.ctorParameters = function () { return [
        { type: core.ViewContainerRef }
    ]; };
    NgxPermissionsRestrictStubDirective.propDecorators = {
        ngxPermissionsOnly: [{ type: core.Input }],
        ngxPermissionsOnlyThen: [{ type: core.Input }],
        ngxPermissionsOnlyElse: [{ type: core.Input }],
        ngxPermissionsExcept: [{ type: core.Input }],
        ngxPermissionsExceptElse: [{ type: core.Input }],
        ngxPermissionsExceptThen: [{ type: core.Input }],
        ngxPermissionsThen: [{ type: core.Input }],
        ngxPermissionsElse: [{ type: core.Input }],
        ngxPermissionsOnlyAuthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsOnlyUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsExceptUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsExceptAuthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsUnauthorisedStrategy: [{ type: core.Input }],
        ngxPermissionsAuthorisedStrategy: [{ type: core.Input }],
        permissionsAuthorized: [{ type: core.Output }],
        permissionsUnauthorized: [{ type: core.Output }]
    };

    var NgxPermissionsModule = /** @class */ (function () {
        function NgxPermissionsModule() {
        }
        NgxPermissionsModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: NgxPermissionsModule,
                providers: [
                    NgxPermissionsStore,
                    NgxRolesStore,
                    NgxPermissionsConfigurationStore,
                    NgxPermissionsService,
                    NgxPermissionsGuard,
                    NgxRolesService,
                    NgxPermissionsConfigurationService,
                    { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },
                    { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },
                    { provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate },
                ]
            };
        };
        NgxPermissionsModule.forChild = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: NgxPermissionsModule,
                providers: [
                    { provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate },
                    { provide: USE_ROLES_STORE, useValue: config.rolesIsolate },
                    { provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate },
                    NgxPermissionsConfigurationService,
                    NgxPermissionsService,
                    NgxRolesService,
                    NgxPermissionsGuard
                ]
            };
        };
        return NgxPermissionsModule;
    }());
    NgxPermissionsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPermissionsDirective
                    ],
                    exports: [
                        NgxPermissionsDirective
                    ]
                },] }
    ];
    var NgxPermissionsAllowStubModule = /** @class */ (function () {
        function NgxPermissionsAllowStubModule() {
        }
        return NgxPermissionsAllowStubModule;
    }());
    NgxPermissionsAllowStubModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPermissionsAllowStubDirective
                    ],
                    exports: [
                        NgxPermissionsAllowStubDirective
                    ]
                },] }
    ];
    var NgxPermissionsRestrictStubModule = /** @class */ (function () {
        function NgxPermissionsRestrictStubModule() {
        }
        return NgxPermissionsRestrictStubModule;
    }());
    NgxPermissionsRestrictStubModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxPermissionsRestrictStubDirective
                    ],
                    exports: [
                        NgxPermissionsRestrictStubDirective
                    ]
                },] }
    ];

    /*
     * Public API Surface of ngx-permissions
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DEFAULT_REDIRECT_KEY = DEFAULT_REDIRECT_KEY;
    exports.NgxPermissionsAllowStubDirective = NgxPermissionsAllowStubDirective;
    exports.NgxPermissionsAllowStubModule = NgxPermissionsAllowStubModule;
    exports.NgxPermissionsConfigurationService = NgxPermissionsConfigurationService;
    exports.NgxPermissionsConfigurationStore = NgxPermissionsConfigurationStore;
    exports.NgxPermissionsDirective = NgxPermissionsDirective;
    exports.NgxPermissionsGuard = NgxPermissionsGuard;
    exports.NgxPermissionsModule = NgxPermissionsModule;
    exports.NgxPermissionsPredefinedStrategies = NgxPermissionsPredefinedStrategies;
    exports.NgxPermissionsRestrictStubDirective = NgxPermissionsRestrictStubDirective;
    exports.NgxPermissionsRestrictStubModule = NgxPermissionsRestrictStubModule;
    exports.NgxPermissionsService = NgxPermissionsService;
    exports.NgxPermissionsStore = NgxPermissionsStore;
    exports.NgxRolesService = NgxRolesService;
    exports.NgxRolesStore = NgxRolesStore;
    exports.USE_CONFIGURATION_STORE = USE_CONFIGURATION_STORE;
    exports.USE_PERMISSIONS_STORE = USE_PERMISSIONS_STORE;
    exports.USE_ROLES_STORE = USE_ROLES_STORE;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-permissions.umd.js.map
