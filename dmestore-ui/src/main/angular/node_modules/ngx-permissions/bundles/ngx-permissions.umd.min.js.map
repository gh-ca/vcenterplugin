{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-permissions/src/lib/enums/predefined-strategies.enum.ts","../../../projects/ngx-permissions/src/lib/store/configuration.store.ts","../../../projects/ngx-permissions/src/lib/service/configuration.service.ts","../../../projects/ngx-permissions/src/lib/store/permissions.store.ts","../../../projects/ngx-permissions/src/lib/utils/utils.ts","../../../projects/ngx-permissions/src/lib/service/permissions.service.ts","../../../projects/ngx-permissions/src/lib/store/roles.store.ts","../../../projects/ngx-permissions/src/lib/service/roles.service.ts","../../../projects/ngx-permissions/src/lib/directive/permissions.directive.ts","../../../projects/ngx-permissions/src/lib/router/permissions-guard.service.ts","../../../projects/ngx-permissions/src/lib/testing/permissions-allow.directive.stub.ts","../../../projects/ngx-permissions/src/lib/testing/permissions-restrict.directive.stub.ts","../../../projects/ngx-permissions/src/lib/index.ts","../../../projects/ngx-permissions/src/lib/model/permissions-router-data.model.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","NgxPermissionsPredefinedStrategies","REMOVE","SHOW","this","strategiesSource","BehaviorSubject","strategies$","asObservable","Injectable","USE_CONFIGURATION_STORE","InjectionToken","NgxPermissionsConfigurationService","isolate","configurationStore","onAuthorisedDefaultStrategy","undefined","onUnAuthorisedDefaultStrategy","prototype","setDefaultOnAuthorizedStrategy","name","getDefinedStrategy","setDefaultOnUnauthorizedStrategy","addPermissionStrategy","key","func","getStrategy","getAllStrategies","isPredefinedStrategy","Error","strategy","Inject","args","NgxPermissionsConfigurationStore","permissionsSource","permissions$","isFunction","isPlainObject","Object","toString","getPrototypeOf","isString","isBoolean","notEmptyValue","Array","isArray","length","transformStringToArray","USE_PERMISSIONS_STORE","NgxPermissionsService","permissionsStore","flushPermissions","hasPermission","permission","Promise","resolve","hasArrayPermission","loadPermissions","permissions","validationFunction","_this","newPermissions","reduce","source","reducePermission","addPermission","removePermission","permissionName","assign","getPermission","getPermissions","_a","_b","promises","map","hasPermissionValidationFunction","validationFunction_1","immutableValue_1","of","pipe","switchMap","promise","catchError","from","mergeAll","first","data","toPromise","then","NgxPermissionsStore","rolesSource","roles$","USE_ROLES_STORE","NgxRolesService","rolesStore","permissionsService","addRole","roles","addRoles","rolesObj","keys","forEach","index","flushRoles","removeRole","roleName","getRoles","getRole","hasOnlyRoles","names","all","hasRoleKey","hasRolePermission","hasRoles","hasPermissions","roleNames","mergeMap","every","NgxRolesStore","NgxPermissionsDirective","configurationService","rolesService","viewContainer","changeDetector","templateRef","permissionsAuthorized","EventEmitter","permissionsUnauthorized","firstMergeUnusedRun","ngOnInit","clear","initPermissionSubscription","validateExceptOnlyPermissions","ngOnChanges","changes","onlyChanges","ngxPermissionsOnly","exceptChanges","ngxPermissionsExcept","firstChange","merge","skip","take","subscribe","validateExceptAndOnlyPermissions","validateOnlyPermissions","handleAuthorisedPermission","getAuthorisedTemplates","ngOnDestroy","unsubscribe","hasRole","handleUnauthorisedPermission","ngxPermissionsExceptElse","ngxPermissionsElse","ngxPermissionsExceptThen","ngxPermissionsThen","catch","ngxPermissionsOnlyThen","ngxPermissionsOnlyElse","template","currentAuthorizedState","emit","getUnAuthorizedStrategyInput","applyStrategyAccordingToStrategyType","elseBlockDefined","applyStrategy","showTemplateBlockInView","getAuthorizedStrategyInput","thenBlockDefined","createEmbeddedView","markForCheck","ngxPermissionsOnlyAuthorisedStrategy","ngxPermissionsExceptAuthorisedStrategy","ngxPermissionsAuthorisedStrategy","ngxPermissionsOnlyUnauthorisedStrategy","ngxPermissionsExceptUnauthorisedStrategy","ngxPermissionsUnauthorisedStrategy","Directive","selector","ViewContainerRef","ChangeDetectorRef","TemplateRef","Input","Output","NgxPermissionsGuard","router","canActivate","route","state","canActivateChild","childRoute","canLoad","routeDataPermissions","transformPermission","isParameterAvailable","except","passingExceptPermissionsValidation","only","passingOnlyPermissionsValidation","redirectTo","isRedirectionWithParameters","failedPermission_1","permissionsExcept","forkJoin","tap","some","isAllFalse","handleRedirectOfFailedPermission","onlyRedirectCheck","redirectToAnotherRoute","checkOnlyPermissions","permissionRedirectTo","failedPermissionName","navigationCommands","transformNavigationCommands","navigationExtras","transformNavigationExtras","navigate","object","failedPermission","permissionsOnly","pass","isFailedPermissionPropertyOfRedirectTo","purePermissions","Router","NgxPermissionsAllowStubDirective","getAuthorizedTemplate","NgxPermissionsRestrictStubDirective","getUnAuthorizedTemplate","NgxPermissionsModule","forRoot","config","ngModule","providers","provide","useValue","permissionsIsolate","rolesIsolate","configurationIsolate","forChild","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export const NgxPermissionsPredefinedStrategies = {\n    REMOVE: 'remove',\n    SHOW: 'show'\n};\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Strategy } from '../service/configuration.service';\n\n@Injectable()\nexport class NgxPermissionsConfigurationStore {\n\n    public strategiesSource: BehaviorSubject<Strategy> = new BehaviorSubject<Strategy>({});\n    public strategies$: Observable<Strategy> = this.strategiesSource.asObservable();\n\n    public onAuthorisedDefaultStrategy: string | undefined;\n    public onUnAuthorisedDefaultStrategy: string | undefined;\n\n    constructor() {\n    }\n\n}\n","import { Inject, Injectable, InjectionToken, TemplateRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\n\nexport type StrategyFunction = (templateRef?: TemplateRef<any>) => void;\n\nexport interface Strategy {\n    [key: string]: StrategyFunction;\n}\n\nexport const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\n\n@Injectable()\nexport class NgxPermissionsConfigurationService {\n\n    private strategiesSource: BehaviorSubject<Strategy>;\n    public strategies$: Observable<Strategy>;\n    public onAuthorisedDefaultStrategy: string | undefined;\n    public onUnAuthorisedDefaultStrategy: string | undefined;\n\n    constructor(\n        @Inject(USE_CONFIGURATION_STORE) private isolate: boolean = false,\n        private configurationStore: NgxPermissionsConfigurationStore\n    ) {\n        this.strategiesSource = this.isolate ? new BehaviorSubject<Strategy>({}) : this.configurationStore.strategiesSource;\n        this.strategies$ = this.strategiesSource.asObservable();\n\n        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\n        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\n\n    }\n\n    public setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void {\n        if (this.isolate) {\n            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n        } else {\n            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\n        }\n    }\n\n    public setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void {\n        if (this.isolate) {\n            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n        } else {\n            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\n        }\n    }\n\n    public addPermissionStrategy(key: string, func: StrategyFunction): void {\n        this.strategiesSource.value[key] = func;\n    }\n\n    public getStrategy(key: string) {\n        return this.strategiesSource.value[key];\n    }\n\n    public getAllStrategies() {\n        return this.strategiesSource.value;\n    }\n\n    private getDefinedStrategy(name: string | 'remove' | 'show') {\n        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\n            return name;\n        } else {\n            throw new Error(`No ' ${name} ' strategy is found please define one`);\n        }\n    }\n\n    private isPredefinedStrategy(strategy: string): boolean {\n        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class NgxPermissionsStore {\n\n    public permissionsSource = new BehaviorSubject<{}>({});\n    public permissions$: Observable<{}> = this.permissionsSource.asObservable();\n\n    constructor() {\n    }\n\n}\n","export function isFunction<T>(value: any): value is T {\n    return typeof value === 'function';\n}\n\nexport function isPlainObject(value: any): boolean {\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\n        return false;\n    } else {\n        const prototype = Object.getPrototypeOf(value);\n        return prototype === null || prototype === Object.prototype;\n    }\n}\n\nexport function isString(value: any): value is string {\n    return !!value && typeof value === 'string';\n}\n\nexport function isBoolean(value: any): value is boolean {\n    return typeof value === 'boolean';\n}\n\nexport function isPromise(promise: any) {\n    return Object.prototype.toString.call(promise) === '[object Promise]';\n}\n\nexport function notEmptyValue(value: string | string[]): boolean {\n    if (Array.isArray(value)) {\n        return value.length > 0;\n    }\n    return !!value;\n}\n\nexport function transformStringToArray(value: string | string[]): string[] {\n    if (isString(value)) {\n        return [value];\n    }\n    return value;\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\nimport { catchError, first, map, mergeAll, switchMap } from 'rxjs/operators';\n\nimport { NgxPermission } from '../model/permission.model';\nimport { ValidationFn } from '../model/permissions-router-data.model';\nimport { NgxPermissionsStore } from '../store/permissions.store';\n\nimport { isBoolean, isFunction, transformStringToArray } from '../utils/utils';\n\nexport interface NgxPermissionsObject {\n    [name: string]: NgxPermission;\n}\n\nexport const USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\n\n@Injectable()\nexport class NgxPermissionsService {\n\n    private permissionsSource: BehaviorSubject<NgxPermissionsObject>;\n    public permissions$: Observable<NgxPermissionsObject>;\n\n    constructor(\n        @Inject(USE_PERMISSIONS_STORE) private isolate: boolean = false,\n        private permissionsStore: NgxPermissionsStore\n    ) {\n        this.permissionsSource = isolate ? new BehaviorSubject<NgxPermissionsObject>({}) : permissionsStore.permissionsSource;\n        this.permissions$ = this.permissionsSource.asObservable();\n    }\n\n    /**\n     * Remove all permissions from permissions source\n     */\n    public flushPermissions(): void {\n        this.permissionsSource.next({});\n    }\n\n    public hasPermission(permission: string | string[]): Promise<boolean> {\n        if (!permission || (Array.isArray(permission) && permission.length === 0)) {\n            return Promise.resolve(true);\n        }\n\n        permission = transformStringToArray(permission);\n        return this.hasArrayPermission(permission);\n    }\n\n    public loadPermissions(permissions: string[], validationFunction?: ValidationFn): void {\n        const newPermissions = permissions.reduce(\n            (source, name) => this.reducePermission(source, name, validationFunction), {}\n        );\n        this.permissionsSource.next(newPermissions);\n    }\n\n    public addPermission(permission: string | string[], validationFunction?: ValidationFn): void {\n        if (Array.isArray(permission)) {\n            const permissions = permission.reduce(\n                (source, name) => this.reducePermission(source, name, validationFunction), this.permissionsSource.value\n            );\n\n            this.permissionsSource.next(permissions);\n        } else {\n            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\n\n            this.permissionsSource.next(permissions);\n        }\n    }\n\n    public removePermission(permissionName: string): void {\n        const permissions = {\n            ...this.permissionsSource.value\n        };\n        delete permissions[permissionName];\n        this.permissionsSource.next(permissions);\n    }\n\n    public getPermission(name: string): NgxPermission {\n        return this.permissionsSource.value[name];\n    }\n\n    public getPermissions(): NgxPermissionsObject {\n        return this.permissionsSource.value;\n    }\n\n    private reducePermission(source: NgxPermissionsObject, name: string, validationFunction?: ValidationFn): NgxPermissionsObject {\n        if (!!validationFunction && isFunction(validationFunction)) {\n            return {\n                ...source,\n                [name]: {name, validationFunction}\n            };\n        }\n        return {\n            ...source,\n            [name]: {name}\n        };\n    }\n\n    private hasArrayPermission(permissions: string[]): Promise<boolean> {\n        const promises: Observable<boolean>[] = permissions.map(key => {\n            if (this.hasPermissionValidationFunction(key)) {\n                const validationFunction = this.permissionsSource.value[key].validationFunction;\n                const immutableValue = {...this.permissionsSource.value};\n\n                return of(null).pipe(\n                    map(() => validationFunction(key, immutableValue)),\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\n                        of(promise as boolean) : promise as Promise<boolean>),\n                    catchError(() => of(false))\n                );\n            }\n\n            // check for name of the permission if there is no validation function\n            return of(!!this.permissionsSource.value[key]);\n        });\n\n        return from(promises).pipe(\n            mergeAll(),\n            first((data) => data !== false, false),\n            map((data) => data !== false)\n        ).toPromise().then((data: any) => data);\n    }\n\n    private hasPermissionValidationFunction(key: string): boolean {\n        return !!this.permissionsSource.value[key] &&\n            !!this.permissionsSource.value[key].validationFunction &&\n            isFunction(this.permissionsSource.value[key].validationFunction);\n    }\n\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\n\nexport class NgxRolesStore {\n\n    public rolesSource = new BehaviorSubject<{}>({});\n\n    public roles$: Observable<{}> = this.rolesSource.asObservable();\n\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\nimport { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';\nimport { ValidationFn } from '../model/permissions-router-data.model';\n\nimport { NgxRole } from '../model/role.model';\nimport { NgxRolesStore } from '../store/roles.store';\nimport { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';\nimport { NgxPermissionsService } from './permissions.service';\n\nexport const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\n\nexport interface NgxRolesObject {\n    [name: string]: NgxRole;\n}\n\n@Injectable()\nexport class NgxRolesService {\n\n    private rolesSource: BehaviorSubject<NgxRolesObject>;\n\n    public roles$: Observable<NgxRolesObject>;\n\n    constructor(\n        @Inject(USE_ROLES_STORE) private isolate: boolean = false,\n        private rolesStore: NgxRolesStore,\n        private permissionsService: NgxPermissionsService\n    ) {\n        this.rolesSource = this.isolate ? new BehaviorSubject<NgxRolesObject>({}) : this.rolesStore.rolesSource;\n        this.roles$ = this.rolesSource.asObservable();\n    }\n\n    public addRole(name: string, validationFunction: ValidationFn | string[]) {\n        const roles = {\n            ...this.rolesSource.value,\n            [name]: {name, validationFunction}\n        };\n        this.rolesSource.next(roles);\n    }\n\n    public addRoles(rolesObj: { [name: string]: ValidationFn | string[] }) {\n        Object.keys(rolesObj).forEach((key, index) => {\n            this.addRole(key, rolesObj[key]);\n        });\n    }\n\n    public flushRoles() {\n        this.rolesSource.next({});\n    }\n\n    public removeRole(roleName: string) {\n        const roles = {\n            ...this.rolesSource.value\n        };\n        delete roles[roleName];\n        this.rolesSource.next(roles);\n    }\n\n    public getRoles() {\n        return this.rolesSource.value;\n    }\n\n    public getRole(name: string) {\n        return this.rolesSource.value[name];\n    }\n\n    public hasOnlyRoles(names: string | string[]): Promise<boolean> {\n        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);\n\n        if (isNamesEmpty) {\n            return Promise.resolve(true);\n        }\n\n        names = transformStringToArray(names);\n\n        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])\n            .then(([hasRoles, hasPermissions]: [boolean, boolean]) => {\n                return hasRoles || hasPermissions;\n            });\n    }\n\n    private hasRoleKey(roleName: string[]): Promise<boolean> {\n        const promises: Observable<boolean>[] = roleName.map((key) => {\n            const hasValidationFunction = !!this.rolesSource.value[key] &&\n                                          !!this.rolesSource.value[key].validationFunction &&\n                                          isFunction(this.rolesSource.value[key].validationFunction);\n\n            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\n                const validationFunction = this.rolesSource.value[key].validationFunction as ValidationFn;\n                const immutableValue = {...this.rolesSource.value};\n\n                return of(null).pipe(\n                    map(() => validationFunction(key, immutableValue)),\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\n                        of(promise as boolean) : promise as Promise<boolean>),\n                    catchError(() => of(false))\n                );\n            }\n\n            return of(false);\n        });\n\n        return from(promises).pipe(\n            mergeAll(),\n            first((data: any) => data !== false, false),\n            map((data) => data !== false)\n        ).toPromise().then((data: any) => data);\n    }\n\n    private hasRolePermission(roles: NgxRolesObject, roleNames: string[]): Promise<boolean> {\n        return from(roleNames).pipe(\n            mergeMap((key) => {\n                if (roles[key] && Array.isArray(roles[key].validationFunction)) {\n                    return from(roles[key].validationFunction).pipe(\n                        mergeMap((permission) => this.permissionsService.hasPermission(permission)),\n                        every(hasPermission => hasPermission === true)\n                    );\n                }\n\n                return of(false);\n            }),\n            first(hasPermission => hasPermission === true, false)\n        ).toPromise();\n    }\n\n}\n","import {\n    ChangeDetectorRef,\n    Directive,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { merge, Subscription } from 'rxjs';\nimport { skip, take } from 'rxjs/operators';\n\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\nimport { NgxPermissionsService } from '../service/permissions.service';\nimport { NgxRolesService } from '../service/roles.service';\nimport { isBoolean, isFunction, isString, notEmptyValue } from '../utils/utils';\n\n@Directive({\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n})\nexport class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges  {\n\n    @Input() ngxPermissionsOnly: string | string[];\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsExcept: string | string[];\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\n\n    @Input() ngxPermissionsThen: TemplateRef<any>;\n    @Input() ngxPermissionsElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\n\n    @Output() permissionsAuthorized = new EventEmitter();\n    @Output() permissionsUnauthorized = new EventEmitter();\n\n    private initPermissionSubscription: Subscription;\n    // skip first run cause merge will fire twice\n    private firstMergeUnusedRun = 1;\n    private currentAuthorizedState: boolean;\n\n    constructor(\n        private permissionsService: NgxPermissionsService,\n        private configurationService: NgxPermissionsConfigurationService,\n        private rolesService: NgxRolesService,\n        private viewContainer: ViewContainerRef,\n        private changeDetector: ChangeDetectorRef,\n        private templateRef: TemplateRef<any>\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.viewContainer.clear();\n        this.initPermissionSubscription = this.validateExceptOnlyPermissions();\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const onlyChanges = changes.ngxPermissionsOnly;\n        const exceptChanges = changes.ngxPermissionsExcept;\n        if (onlyChanges || exceptChanges) {\n            // Due to bug when you pass empty array\n            if (onlyChanges && onlyChanges.firstChange) {\n                return;\n            }\n            if (exceptChanges && exceptChanges.firstChange) {\n                return;\n            }\n\n            merge(this.permissionsService.permissions$, this.rolesService.roles$)\n                .pipe(skip(this.firstMergeUnusedRun), take(1))\n                .subscribe(() => {\n                    if (notEmptyValue(this.ngxPermissionsExcept)) {\n                        this.validateExceptAndOnlyPermissions();\n                        return;\n                    }\n\n                    if (notEmptyValue(this.ngxPermissionsOnly)) {\n                        this.validateOnlyPermissions();\n                        return;\n                    }\n\n                    this.handleAuthorisedPermission(this.getAuthorisedTemplates());\n                });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.initPermissionSubscription) {\n            this.initPermissionSubscription.unsubscribe();\n        }\n    }\n\n    private validateExceptOnlyPermissions(): Subscription {\n        return merge(this.permissionsService.permissions$, this.rolesService.roles$)\n            .pipe(skip(this.firstMergeUnusedRun))\n            .subscribe(() => {\n                if (notEmptyValue(this.ngxPermissionsExcept)) {\n                    this.validateExceptAndOnlyPermissions();\n                    return;\n                }\n\n                if (notEmptyValue(this.ngxPermissionsOnly)) {\n                    this.validateOnlyPermissions();\n                    return;\n                }\n                this.handleAuthorisedPermission(this.getAuthorisedTemplates());\n            });\n    }\n\n    private validateExceptAndOnlyPermissions(): void {\n        Promise\n            .all([\n              this.permissionsService.hasPermission(this.ngxPermissionsExcept),\n              this.rolesService.hasOnlyRoles(this.ngxPermissionsExcept)\n            ])\n            .then(([hasPermission, hasRole]) => {\n                if (hasPermission || hasRole) {\n                    this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\n                    return;\n                }\n\n                if (!!this.ngxPermissionsOnly) {\n                    throw false;\n                }\n\n                this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\n            })\n            .catch(() => {\n                if (!!this.ngxPermissionsOnly) {\n                    this.validateOnlyPermissions();\n                } else {\n                    this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\n                }\n        });\n    }\n\n    private validateOnlyPermissions(): void {\n        Promise\n            .all([this.permissionsService.hasPermission(this.ngxPermissionsOnly), this.rolesService.hasOnlyRoles(this.ngxPermissionsOnly)])\n            .then(([hasPermissions, hasRoles]) => {\n                if (hasPermissions || hasRoles) {\n                    this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\n                } else {\n                    this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\n                }\n            })\n          .catch(() => {\n                this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\n        });\n    }\n\n    private handleUnauthorisedPermission(template: TemplateRef<any>): void {\n        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) {\n            return;\n        }\n\n        this.currentAuthorizedState = false;\n        this.permissionsUnauthorized.emit();\n\n        if (this.getUnAuthorizedStrategyInput()) {\n            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\n            return;\n        }\n\n        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\n            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\n        } else {\n            this.showTemplateBlockInView(template);\n        }\n\n    }\n\n    private handleAuthorisedPermission(template: TemplateRef<any>): void {\n        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) {\n            return;\n        }\n\n        this.currentAuthorizedState = true;\n        this.permissionsAuthorized.emit();\n\n        if (this.getAuthorizedStrategyInput()) {\n            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\n            return;\n        }\n\n        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\n            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\n        } else {\n            this.showTemplateBlockInView(template);\n        }\n    }\n\n    private applyStrategyAccordingToStrategyType(strategy: string | StrategyFunction): void {\n        if (isString(strategy)) {\n            this.applyStrategy(strategy);\n            return;\n        }\n\n        if (isFunction(strategy)) {\n            this.showTemplateBlockInView(this.templateRef);\n            (strategy as StrategyFunction)(this.templateRef);\n            return;\n        }\n    }\n\n    private showTemplateBlockInView(template: TemplateRef<any>): void {\n        this.viewContainer.clear();\n        if (!template) {\n            return;\n        }\n\n        this.viewContainer.createEmbeddedView(template);\n        this.changeDetector.markForCheck();\n    }\n\n    private getAuthorisedTemplates(): TemplateRef<any> {\n        return this.ngxPermissionsOnlyThen\n            || this.ngxPermissionsExceptThen\n            || this.ngxPermissionsThen\n            || this.templateRef;\n    }\n\n    private elseBlockDefined(): boolean {\n        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\n    }\n\n    private thenBlockDefined() {\n        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\n    }\n\n    private getAuthorizedStrategyInput() {\n        return this.ngxPermissionsOnlyAuthorisedStrategy ||\n            this.ngxPermissionsExceptAuthorisedStrategy ||\n            this.ngxPermissionsAuthorisedStrategy;\n    }\n\n    private getUnAuthorizedStrategyInput() {\n        return this.ngxPermissionsOnlyUnauthorisedStrategy ||\n            this.ngxPermissionsExceptUnauthorisedStrategy ||\n            this.ngxPermissionsUnauthorisedStrategy;\n    }\n\n    private applyStrategy(name: string) {\n        if (name === NgxPermissionsPredefinedStrategies.SHOW) {\n            this.showTemplateBlockInView(this.templateRef);\n            return;\n        }\n\n        if (name === NgxPermissionsPredefinedStrategies.REMOVE) {\n            this.viewContainer.clear();\n            return;\n        }\n        const strategy = this.configurationService.getStrategy(name);\n        this.showTemplateBlockInView(this.templateRef);\n        strategy(this.templateRef);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    CanActivate,\n    CanActivateChild,\n    CanLoad,\n    NavigationExtras,\n    Route,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\n\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { first, mergeMap, tap } from 'rxjs/operators';\n\nimport {\n    DEFAULT_REDIRECT_KEY,\n    ExceptFn,\n    NavigationCommandsFn,\n    NavigationExtrasFn,\n    NgxPermissionsRouterData,\n    NgxRedirectToNavigationParameters,\n    OnlyFn,\n    RedirectTo,\n    RedirectToFn\n} from '../model/permissions-router-data.model';\nimport { NgxPermissionsService } from '../service/permissions.service';\nimport { NgxRolesService } from '../service/roles.service';\nimport { isFunction, isPlainObject, transformStringToArray } from '../utils/utils';\n\nexport interface NgxPermissionsData {\n    only?: string | string[];\n    except?: string | string[];\n    redirectTo?: RedirectTo | RedirectToFn;\n}\n\n@Injectable()\nexport class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\n\n    constructor(private permissionsService: NgxPermissionsService, private rolesService: NgxRolesService, private router: Router) {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\n        return this.hasPermissions(route, state);\n    }\n\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n        return this.hasPermissions(childRoute, state);\n    }\n\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean> {\n        return this.hasPermissions(route);\n    }\n\n    private hasPermissions(route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\n        const routeDataPermissions = !!route && route.data ? (route.data.permissions as NgxPermissionsRouterData) : {};\n        const permissions = this.transformPermission(routeDataPermissions, route, state);\n\n        if (this.isParameterAvailable(permissions.except)) {\n            return this.passingExceptPermissionsValidation(permissions, route, state);\n        }\n\n        if (this.isParameterAvailable(permissions.only)) {\n            return this.passingOnlyPermissionsValidation(permissions, route, state);\n        }\n\n        return true;\n    }\n\n    private transformPermission(\n        permissions: NgxPermissionsRouterData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): NgxPermissionsData {\n        const only = isFunction<OnlyFn>(permissions.only)\n            ? permissions.only(route, state)\n            : transformStringToArray(permissions.only);\n        const except = isFunction<ExceptFn>(permissions.except)\n            ? permissions.except(route, state)\n            : transformStringToArray(permissions.except);\n        const redirectTo = permissions.redirectTo;\n\n\n        return {\n            only,\n            except,\n            redirectTo\n        };\n    }\n\n    private isParameterAvailable(permission: string | string[]) {\n        return !!permission && permission.length > 0;\n    }\n\n    private passingExceptPermissionsValidation(\n        permissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state: RouterStateSnapshot\n    ): Promise<boolean> {\n        if (\n            !!permissions.redirectTo\n            && (\n                (isFunction<RedirectToFn>(permissions.redirectTo))\n                || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))\n            )\n        ) {\n            let failedPermission = '';\n\n            return from(permissions.except)\n                .pipe(\n                    mergeMap(permissionsExcept => {\n                        return forkJoin([\n                            this.permissionsService.hasPermission(permissionsExcept),\n                            this.rolesService.hasOnlyRoles(permissionsExcept)\n                        ]).pipe(\n                            tap(hasPermissions => {\n                                const dontHavePermissions = hasPermissions.every(hasPermission => hasPermission === false);\n\n                                if (!dontHavePermissions) {\n                                    failedPermission = permissionsExcept;\n                                }\n                            })\n                        );\n                    }),\n                    first(hasPermissions => hasPermissions.some(hasPermission => hasPermission === true), false),\n                    mergeMap(isAllFalse => {\n                        if (!!failedPermission) {\n                            this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n\n                            return of(false);\n                        }\n\n                        if (!isAllFalse && permissions.only) {\n                            return this.onlyRedirectCheck(permissions, route, state);\n                        }\n\n                        return of(!isAllFalse);\n                    })\n                )\n                .toPromise();\n        }\n\n        return Promise.all([\n            this.permissionsService.hasPermission(permissions.except),\n            this.rolesService.hasOnlyRoles(permissions.except)\n        ]).then(([hasPermission, hasRoles]) => {\n            if (hasPermission || hasRoles) {\n                if (permissions.redirectTo) {\n                    this.redirectToAnotherRoute(\n                        permissions.redirectTo,\n                        route,\n                        state\n                    );\n                }\n\n                return false;\n            }\n\n            if (permissions.only) {\n                return this.checkOnlyPermissions(permissions, route, state);\n            }\n            return true;\n        });\n    }\n\n    private redirectToAnotherRoute(\n        permissionRedirectTo: RedirectTo | RedirectToFn,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot,\n        failedPermissionName?: string\n    ): void {\n\n        const redirectTo = isFunction<RedirectToFn>(permissionRedirectTo)\n            ? permissionRedirectTo(failedPermissionName, route, state)\n            : permissionRedirectTo;\n\n        if (this.isRedirectionWithParameters(redirectTo)) {\n            redirectTo.navigationCommands = this.transformNavigationCommands(redirectTo.navigationCommands, route, state);\n            redirectTo.navigationExtras = this.transformNavigationExtras(redirectTo.navigationExtras, route, state);\n            this.router.navigate(redirectTo.navigationCommands, redirectTo.navigationExtras);\n            return;\n        }\n\n        if (Array.isArray(redirectTo)) {\n            this.router.navigate(redirectTo);\n        } else {\n            this.router.navigate([redirectTo]);\n        }\n    }\n\n    private isRedirectionWithParameters(object: any | NgxRedirectToNavigationParameters): object is NgxRedirectToNavigationParameters {\n        return (isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras));\n    }\n\n    private transformNavigationCommands(\n        navigationCommands: any[] | NavigationCommandsFn,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): any[] {\n        return isFunction<NavigationCommandsFn>(navigationCommands)\n            ? navigationCommands(route, state)\n            : navigationCommands;\n    }\n\n    private transformNavigationExtras(\n        navigationExtras: NavigationExtras | NavigationExtrasFn,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): NavigationExtras {\n        return isFunction<NavigationExtrasFn>(navigationExtras)\n            ? navigationExtras(route, state)\n            : navigationExtras;\n    }\n\n    private onlyRedirectCheck(\n        permissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): Promise<boolean> {\n        let failedPermission = '';\n\n        return from(permissions.only)\n            .pipe(\n                mergeMap(permissionsOnly => {\n                    return forkJoin([\n                        this.permissionsService.hasPermission(permissionsOnly),\n                        this.rolesService.hasOnlyRoles(permissionsOnly)\n                    ]).pipe(\n                        tap(hasPermissions => {\n                            const failed = hasPermissions.every(hasPermission => hasPermission === false);\n\n                            if (failed) {\n                                failedPermission = permissionsOnly;\n                            }\n                        })\n                    );\n                }),\n                first(hasPermissions => {\n                        if (isFunction<RedirectToFn>(permissions.redirectTo)) {\n                            return hasPermissions.some(hasPermission => hasPermission === true);\n                        }\n\n                        return hasPermissions.every(hasPermission => hasPermission === false);\n                    },\n                    false),\n                mergeMap(\n                    (pass: boolean): Observable<boolean> => {\n                        if (isFunction<RedirectToFn>(permissions.redirectTo)) {\n                            if (pass) {\n                                return of(true);\n                            } else {\n                                this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n                                return of(false);\n                            }\n                        } else {\n                            if (!!failedPermission) {\n                                this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n                            }\n                            return of(!pass);\n                        }\n                    }\n                )\n            )\n            .toPromise();\n    }\n\n    private handleRedirectOfFailedPermission(\n        permissions: NgxPermissionsData,\n        failedPermission: string,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ) {\n        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\n            this.redirectToAnotherRoute(permissions.redirectTo[failedPermission], route, state, failedPermission);\n        } else {\n            if (isFunction<RedirectToFn>(permissions.redirectTo)) {\n                this.redirectToAnotherRoute(permissions.redirectTo, route, state, failedPermission);\n            } else {\n                this.redirectToAnotherRoute(permissions.redirectTo[DEFAULT_REDIRECT_KEY], route, state, failedPermission);\n            }\n        }\n    }\n\n    private isFailedPermissionPropertyOfRedirectTo(permissions: NgxPermissionsData, failedPermission: string): boolean {\n        return (!!permissions.redirectTo && permissions.redirectTo[failedPermission]);\n    }\n\n    private checkOnlyPermissions(\n        purePermissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): Promise<boolean> {\n        const permissions: NgxPermissionsData = {\n            ...purePermissions\n        };\n\n        return Promise.all([\n            this.permissionsService.hasPermission(permissions.only),\n            this.rolesService.hasOnlyRoles(permissions.only)\n        ]).then(([hasPermission, hasRole]) => {\n            if (hasPermission || hasRole) {\n                return true;\n            }\n\n            if (permissions.redirectTo) {\n                this.redirectToAnotherRoute(permissions.redirectTo, route, state);\n            }\n\n            return false;\n        });\n    }\n\n    private passingOnlyPermissionsValidation(\n        permissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): Promise<boolean> {\n        if (\n            (isFunction<RedirectToFn>(permissions.redirectTo)\n                || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))\n        ) {\n            return this.onlyRedirectCheck(permissions, route, state);\n        }\n        return this.checkOnlyPermissions(permissions, route, state);\n    }\n}\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { StrategyFunction } from '../service/configuration.service';\n\n@Directive({\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n})\nexport class NgxPermissionsAllowStubDirective implements OnInit {\n\n    @Input() ngxPermissionsOnly: string | string[];\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsExcept: string | string[];\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\n\n    @Input() ngxPermissionsThen: TemplateRef<any>;\n    @Input() ngxPermissionsElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\n\n    @Output() permissionsAuthorized = new EventEmitter();\n    @Output() permissionsUnauthorized = new EventEmitter();\n\n\n    constructor(private viewContainer: ViewContainerRef,\n                private templateRef: TemplateRef<any>) {}\n\n\n    ngOnInit(): void {\n        this.viewContainer.clear();\n        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\n        this.permissionsUnauthorized.emit();\n    }\n\n\n    private getAuthorizedTemplate() {\n        return this.ngxPermissionsOnlyThen ||\n            this.ngxPermissionsExceptThen ||\n            this.ngxPermissionsThen ||\n            this.templateRef;\n    }\n\n}\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { StrategyFunction } from '../service/configuration.service';\n\n@Directive({\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n})\nexport class NgxPermissionsRestrictStubDirective implements OnInit {\n\n    @Input() ngxPermissionsOnly: string | string[];\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsExcept: string | string[];\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\n\n    @Input() ngxPermissionsThen: TemplateRef<any>;\n    @Input() ngxPermissionsElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\n\n    @Output() permissionsAuthorized = new EventEmitter();\n    @Output() permissionsUnauthorized = new EventEmitter();\n\n\n    constructor(private viewContainer: ViewContainerRef) {}\n\n\n    ngOnInit(): void {\n        this.viewContainer.clear();\n        if (this.getUnAuthorizedTemplate()) {\n            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\n        }\n        this.permissionsUnauthorized.emit();\n    }\n\n\n    private getUnAuthorizedTemplate() {\n        return this.ngxPermissionsOnlyElse ||\n            this.ngxPermissionsExceptElse ||\n            this.ngxPermissionsElse;\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxPermissionsDirective } from './directive/permissions.directive';\nimport { NgxPermissionsService, USE_PERMISSIONS_STORE } from './service/permissions.service';\nimport { NgxPermissionsGuard } from './router/permissions-guard.service';\nimport { NgxRolesService, USE_ROLES_STORE } from './service/roles.service';\nimport { NgxPermissionsStore } from './store/permissions.store';\nimport { NgxRolesStore } from './store/roles.store';\nimport { NgxPermissionsAllowStubDirective } from './testing/permissions-allow.directive.stub';\nimport { NgxPermissionsRestrictStubDirective } from './testing/permissions-restrict.directive.stub';\nimport { NgxPermissionsConfigurationService, USE_CONFIGURATION_STORE } from './service/configuration.service';\nimport { NgxPermissionsConfigurationStore } from './store/configuration.store';\n\nexport * from './store/roles.store';\nexport * from './store/permissions.store';\nexport * from './store/configuration.store';\n\nexport * from './directive/permissions.directive';\n\nexport * from './service/permissions.service';\nexport * from './service/roles.service';\nexport * from './service/configuration.service';\n\nexport * from './router/permissions-guard.service';\n\nexport * from './model/permissions-router-data.model';\nexport * from './model/role.model';\n\nexport * from './testing/permissions-allow.directive.stub';\nexport * from './testing/permissions-restrict.directive.stub';\n\nexport * from './enums/predefined-strategies.enum';\n\nexport interface NgxPermissionsModuleConfig {\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    rolesIsolate?: boolean;\n    permissionsIsolate?: boolean;\n    configurationIsolate?: boolean;\n}\n\n\n@NgModule({\n    imports: [],\n    declarations: [\n        NgxPermissionsDirective\n    ],\n    exports: [\n        NgxPermissionsDirective\n    ]\n})\nexport class NgxPermissionsModule {\n    static forRoot(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders<NgxPermissionsModule> {\n        return {\n            ngModule: NgxPermissionsModule,\n            providers: [\n                NgxPermissionsStore,\n                NgxRolesStore,\n                NgxPermissionsConfigurationStore,\n                NgxPermissionsService,\n                NgxPermissionsGuard,\n                NgxRolesService,\n                NgxPermissionsConfigurationService,\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\n            ]\n        };\n    }\n\n    static forChild(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders<NgxPermissionsModule> {\n        return {\n            ngModule: NgxPermissionsModule,\n            providers: [\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\n                NgxPermissionsConfigurationService,\n                NgxPermissionsService,\n                NgxRolesService,\n                NgxPermissionsGuard\n            ]\n        };\n    }\n}\n\n@NgModule({\n    imports: [],\n    declarations: [\n        NgxPermissionsAllowStubDirective\n    ],\n    exports: [\n        NgxPermissionsAllowStubDirective\n    ]\n})\nexport class NgxPermissionsAllowStubModule {\n}\n\n\n@NgModule({\n    imports: [],\n    declarations: [\n        NgxPermissionsRestrictStubDirective\n    ],\n    exports: [\n        NgxPermissionsRestrictStubDirective\n    ]\n})\nexport class NgxPermissionsRestrictStubModule {\n}\n\n\n","import { ActivatedRouteSnapshot, NavigationExtras, Route, RouterStateSnapshot } from '@angular/router';\n\nexport interface NgxPermissionsRouterData {\n    only?: string | string[] | OnlyFn;\n    except?: string | string[] | ExceptFn;\n    redirectTo?: RedirectTo | RedirectToFn;\n}\n\nexport interface NgxRedirectToNavigationParameters {\n    navigationCommands: any[] | NavigationCommandsFn;\n    navigationExtras?: NavigationExtras | NavigationExtrasFn;\n}\n\nexport declare type OnlyFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => string | string[];\nexport declare type ExceptFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => string | string[];\n\nexport declare type RedirectTo =\n    string\n    | { [name: string]: NgxRedirectToNavigationParameters | string | RedirectToFn }\n    | NgxRedirectToNavigationParameters;\nexport declare type RedirectToFn =\n    (rejectedPermissionName?: string, route?: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => RedirectTo;\n\nexport declare type NavigationCommandsFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => any[];\nexport declare type NavigationExtrasFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => NavigationExtras;\nexport declare type ValidationFn = ((name?: string, store?: any) => Promise<void | string | boolean> | boolean | string[]);\n\nexport const DEFAULT_REDIRECT_KEY = 'default';\n"]}