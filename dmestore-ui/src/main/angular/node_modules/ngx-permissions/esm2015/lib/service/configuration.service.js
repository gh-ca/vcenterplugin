import { Inject, Injectable, InjectionToken } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';
import { NgxPermissionsConfigurationStore } from '../store/configuration.store';
export const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');
export class NgxPermissionsConfigurationService {
    constructor(isolate = false, configurationStore) {
        this.isolate = isolate;
        this.configurationStore = configurationStore;
        this.strategiesSource = this.isolate ? new BehaviorSubject({}) : this.configurationStore.strategiesSource;
        this.strategies$ = this.strategiesSource.asObservable();
        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;
        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;
    }
    setDefaultOnAuthorizedStrategy(name) {
        if (this.isolate) {
            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
        }
        else {
            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;
        }
    }
    setDefaultOnUnauthorizedStrategy(name) {
        if (this.isolate) {
            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
        }
        else {
            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);
            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;
        }
    }
    addPermissionStrategy(key, func) {
        this.strategiesSource.value[key] = func;
    }
    getStrategy(key) {
        return this.strategiesSource.value[key];
    }
    getAllStrategies() {
        return this.strategiesSource.value;
    }
    getDefinedStrategy(name) {
        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {
            return name;
        }
        else {
            throw new Error(`No ' ${name} ' strategy is found please define one`);
        }
    }
    isPredefinedStrategy(strategy) {
        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;
    }
}
NgxPermissionsConfigurationService.decorators = [
    { type: Injectable }
];
NgxPermissionsConfigurationService.ctorParameters = () => [
    { type: Boolean, decorators: [{ type: Inject, args: [USE_CONFIGURATION_STORE,] }] },
    { type: NgxPermissionsConfigurationStore }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXBlcm1pc3Npb25zL3NyYy9saWIvc2VydmljZS9jb25maWd1cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDekYsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFRaEYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUdyRixNQUFNLE9BQU8sa0NBQWtDO0lBTzNDLFlBQzZDLFVBQW1CLEtBQUssRUFDekQsa0JBQW9EO1FBRG5CLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3pELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBa0M7UUFFNUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksZUFBZSxDQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7UUFDcEgsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFeEQsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDJCQUEyQixDQUFDO1FBQ2xILElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyw2QkFBNkIsQ0FBQztJQUUxSCxDQUFDO0lBRU0sOEJBQThCLENBQUMsSUFBZ0M7UUFDbEUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRixJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDJCQUEyQixDQUFDO1NBQzFGO0lBQ0wsQ0FBQztJQUVNLGdDQUFnQyxDQUFDLElBQWdDO1FBQ3BFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEU7YUFBTTtZQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEYsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyw2QkFBNkIsQ0FBQztTQUM5RjtJQUNMLENBQUM7SUFFTSxxQkFBcUIsQ0FBQyxHQUFXLEVBQUUsSUFBc0I7UUFDNUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDNUMsQ0FBQztJQUVNLFdBQVcsQ0FBQyxHQUFXO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sZ0JBQWdCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBRU8sa0JBQWtCLENBQUMsSUFBZ0M7UUFDdkQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0RSxPQUFPLElBQUksQ0FBQztTQUNmO2FBQU07WUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSx3Q0FBd0MsQ0FBQyxDQUFDO1NBQ3pFO0lBQ0wsQ0FBQztJQUVPLG9CQUFvQixDQUFDLFFBQWdCO1FBQ3pDLE9BQU8sUUFBUSxLQUFLLGtDQUFrQyxDQUFDLElBQUksSUFBSSxRQUFRLEtBQUssa0NBQWtDLENBQUMsTUFBTSxDQUFDO0lBQzFILENBQUM7OztZQTVESixVQUFVOzs7MENBU0YsTUFBTSxTQUFDLHVCQUF1QjtZQW5COUIsZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmd4UGVybWlzc2lvbnNQcmVkZWZpbmVkU3RyYXRlZ2llcyB9IGZyb20gJy4uL2VudW1zL3ByZWRlZmluZWQtc3RyYXRlZ2llcy5lbnVtJztcbmltcG9ydCB7IE5neFBlcm1pc3Npb25zQ29uZmlndXJhdGlvblN0b3JlIH0gZnJvbSAnLi4vc3RvcmUvY29uZmlndXJhdGlvbi5zdG9yZSc7XG5cbmV4cG9ydCB0eXBlIFN0cmF0ZWd5RnVuY3Rpb24gPSAodGVtcGxhdGVSZWY/OiBUZW1wbGF0ZVJlZjxhbnk+KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmF0ZWd5IHtcbiAgICBba2V5OiBzdHJpbmddOiBTdHJhdGVneUZ1bmN0aW9uO1xufVxuXG5leHBvcnQgY29uc3QgVVNFX0NPTkZJR1VSQVRJT05fU1RPUkUgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1VTRV9DT05GSUdVUkFUSU9OX1NUT1JFJyk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hQZXJtaXNzaW9uc0NvbmZpZ3VyYXRpb25TZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgc3RyYXRlZ2llc1NvdXJjZTogQmVoYXZpb3JTdWJqZWN0PFN0cmF0ZWd5PjtcbiAgICBwdWJsaWMgc3RyYXRlZ2llcyQ6IE9ic2VydmFibGU8U3RyYXRlZ3k+O1xuICAgIHB1YmxpYyBvbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3k6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBwdWJsaWMgb25VbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3k6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFVTRV9DT05GSUdVUkFUSU9OX1NUT1JFKSBwcml2YXRlIGlzb2xhdGU6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgcHJpdmF0ZSBjb25maWd1cmF0aW9uU3RvcmU6IE5neFBlcm1pc3Npb25zQ29uZmlndXJhdGlvblN0b3JlXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc3RyYXRlZ2llc1NvdXJjZSA9IHRoaXMuaXNvbGF0ZSA/IG5ldyBCZWhhdmlvclN1YmplY3Q8U3RyYXRlZ3k+KHt9KSA6IHRoaXMuY29uZmlndXJhdGlvblN0b3JlLnN0cmF0ZWdpZXNTb3VyY2U7XG4gICAgICAgIHRoaXMuc3RyYXRlZ2llcyQgPSB0aGlzLnN0cmF0ZWdpZXNTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICAgICAgdGhpcy5vbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3kgPSB0aGlzLmlzb2xhdGUgPyB1bmRlZmluZWQgOiB0aGlzLmNvbmZpZ3VyYXRpb25TdG9yZS5vbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3k7XG4gICAgICAgIHRoaXMub25VbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3kgPSB0aGlzLmlzb2xhdGUgPyB1bmRlZmluZWQgOiB0aGlzLmNvbmZpZ3VyYXRpb25TdG9yZS5vblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzZXREZWZhdWx0T25BdXRob3JpemVkU3RyYXRlZ3kobmFtZTogc3RyaW5nIHwgJ3JlbW92ZScgfCAnc2hvdycpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaXNvbGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3kgPSB0aGlzLmdldERlZmluZWRTdHJhdGVneShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvblN0b3JlLm9uQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuZ2V0RGVmaW5lZFN0cmF0ZWd5KG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5vbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3kgPSB0aGlzLmNvbmZpZ3VyYXRpb25TdG9yZS5vbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3k7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RGVmYXVsdE9uVW5hdXRob3JpemVkU3RyYXRlZ3kobmFtZTogc3RyaW5nIHwgJ3JlbW92ZScgfCAnc2hvdycpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaXNvbGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneSA9IHRoaXMuZ2V0RGVmaW5lZFN0cmF0ZWd5KG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uU3RvcmUub25VbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3kgPSB0aGlzLmdldERlZmluZWRTdHJhdGVneShuYW1lKTtcbiAgICAgICAgICAgIHRoaXMub25VbkF1dGhvcmlzZWREZWZhdWx0U3RyYXRlZ3kgPSB0aGlzLmNvbmZpZ3VyYXRpb25TdG9yZS5vblVuQXV0aG9yaXNlZERlZmF1bHRTdHJhdGVneTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhZGRQZXJtaXNzaW9uU3RyYXRlZ3koa2V5OiBzdHJpbmcsIGZ1bmM6IFN0cmF0ZWd5RnVuY3Rpb24pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdHJhdGVnaWVzU291cmNlLnZhbHVlW2tleV0gPSBmdW5jO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTdHJhdGVneShrZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJhdGVnaWVzU291cmNlLnZhbHVlW2tleV07XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFsbFN0cmF0ZWdpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmF0ZWdpZXNTb3VyY2UudmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREZWZpbmVkU3RyYXRlZ3kobmFtZTogc3RyaW5nIHwgJ3JlbW92ZScgfCAnc2hvdycpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RyYXRlZ2llc1NvdXJjZS52YWx1ZVtuYW1lXSB8fCB0aGlzLmlzUHJlZGVmaW5lZFN0cmF0ZWd5KG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gJyAke25hbWV9ICcgc3RyYXRlZ3kgaXMgZm91bmQgcGxlYXNlIGRlZmluZSBvbmVgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNQcmVkZWZpbmVkU3RyYXRlZ3koc3RyYXRlZ3k6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc3RyYXRlZ3kgPT09IE5neFBlcm1pc3Npb25zUHJlZGVmaW5lZFN0cmF0ZWdpZXMuU0hPVyB8fCBzdHJhdGVneSA9PT0gTmd4UGVybWlzc2lvbnNQcmVkZWZpbmVkU3RyYXRlZ2llcy5SRU1PVkU7XG4gICAgfVxuXG59XG4iXX0=