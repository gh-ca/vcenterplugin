import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { forkJoin, from, of } from 'rxjs';
import { first, mergeMap, tap } from 'rxjs/operators';
import { DEFAULT_REDIRECT_KEY } from '../model/permissions-router-data.model';
import { NgxPermissionsService } from '../service/permissions.service';
import { NgxRolesService } from '../service/roles.service';
import { isFunction, isPlainObject, transformStringToArray } from '../utils/utils';
export class NgxPermissionsGuard {
    constructor(permissionsService, rolesService, router) {
        this.permissionsService = permissionsService;
        this.rolesService = rolesService;
        this.router = router;
    }
    canActivate(route, state) {
        return this.hasPermissions(route, state);
    }
    canActivateChild(childRoute, state) {
        return this.hasPermissions(childRoute, state);
    }
    canLoad(route) {
        return this.hasPermissions(route);
    }
    hasPermissions(route, state) {
        const routeDataPermissions = !!route && route.data ? route.data.permissions : {};
        const permissions = this.transformPermission(routeDataPermissions, route, state);
        if (this.isParameterAvailable(permissions.except)) {
            return this.passingExceptPermissionsValidation(permissions, route, state);
        }
        if (this.isParameterAvailable(permissions.only)) {
            return this.passingOnlyPermissionsValidation(permissions, route, state);
        }
        return true;
    }
    transformPermission(permissions, route, state) {
        const only = isFunction(permissions.only)
            ? permissions.only(route, state)
            : transformStringToArray(permissions.only);
        const except = isFunction(permissions.except)
            ? permissions.except(route, state)
            : transformStringToArray(permissions.except);
        const redirectTo = permissions.redirectTo;
        return {
            only,
            except,
            redirectTo
        };
    }
    isParameterAvailable(permission) {
        return !!permission && permission.length > 0;
    }
    passingExceptPermissionsValidation(permissions, route, state) {
        if (!!permissions.redirectTo
            && ((isFunction(permissions.redirectTo))
                || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo)))) {
            let failedPermission = '';
            return from(permissions.except)
                .pipe(mergeMap(permissionsExcept => {
                return forkJoin([
                    this.permissionsService.hasPermission(permissionsExcept),
                    this.rolesService.hasOnlyRoles(permissionsExcept)
                ]).pipe(tap(hasPermissions => {
                    const dontHavePermissions = hasPermissions.every(hasPermission => hasPermission === false);
                    if (!dontHavePermissions) {
                        failedPermission = permissionsExcept;
                    }
                }));
            }), first(hasPermissions => hasPermissions.some(hasPermission => hasPermission === true), false), mergeMap(isAllFalse => {
                if (!!failedPermission) {
                    this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
                    return of(false);
                }
                if (!isAllFalse && permissions.only) {
                    return this.onlyRedirectCheck(permissions, route, state);
                }
                return of(!isAllFalse);
            }))
                .toPromise();
        }
        return Promise.all([
            this.permissionsService.hasPermission(permissions.except),
            this.rolesService.hasOnlyRoles(permissions.except)
        ]).then(([hasPermission, hasRoles]) => {
            if (hasPermission || hasRoles) {
                if (permissions.redirectTo) {
                    this.redirectToAnotherRoute(permissions.redirectTo, route, state);
                }
                return false;
            }
            if (permissions.only) {
                return this.checkOnlyPermissions(permissions, route, state);
            }
            return true;
        });
    }
    redirectToAnotherRoute(permissionRedirectTo, route, state, failedPermissionName) {
        const redirectTo = isFunction(permissionRedirectTo)
            ? permissionRedirectTo(failedPermissionName, route, state)
            : permissionRedirectTo;
        if (this.isRedirectionWithParameters(redirectTo)) {
            redirectTo.navigationCommands = this.transformNavigationCommands(redirectTo.navigationCommands, route, state);
            redirectTo.navigationExtras = this.transformNavigationExtras(redirectTo.navigationExtras, route, state);
            this.router.navigate(redirectTo.navigationCommands, redirectTo.navigationExtras);
            return;
        }
        if (Array.isArray(redirectTo)) {
            this.router.navigate(redirectTo);
        }
        else {
            this.router.navigate([redirectTo]);
        }
    }
    isRedirectionWithParameters(object) {
        return (isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras));
    }
    transformNavigationCommands(navigationCommands, route, state) {
        return isFunction(navigationCommands)
            ? navigationCommands(route, state)
            : navigationCommands;
    }
    transformNavigationExtras(navigationExtras, route, state) {
        return isFunction(navigationExtras)
            ? navigationExtras(route, state)
            : navigationExtras;
    }
    onlyRedirectCheck(permissions, route, state) {
        let failedPermission = '';
        return from(permissions.only)
            .pipe(mergeMap(permissionsOnly => {
            return forkJoin([
                this.permissionsService.hasPermission(permissionsOnly),
                this.rolesService.hasOnlyRoles(permissionsOnly)
            ]).pipe(tap(hasPermissions => {
                const failed = hasPermissions.every(hasPermission => hasPermission === false);
                if (failed) {
                    failedPermission = permissionsOnly;
                }
            }));
        }), first(hasPermissions => {
            if (isFunction(permissions.redirectTo)) {
                return hasPermissions.some(hasPermission => hasPermission === true);
            }
            return hasPermissions.every(hasPermission => hasPermission === false);
        }, false), mergeMap((pass) => {
            if (isFunction(permissions.redirectTo)) {
                if (pass) {
                    return of(true);
                }
                else {
                    this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
                    return of(false);
                }
            }
            else {
                if (!!failedPermission) {
                    this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);
                }
                return of(!pass);
            }
        }))
            .toPromise();
    }
    handleRedirectOfFailedPermission(permissions, failedPermission, route, state) {
        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {
            this.redirectToAnotherRoute(permissions.redirectTo[failedPermission], route, state, failedPermission);
        }
        else {
            if (isFunction(permissions.redirectTo)) {
                this.redirectToAnotherRoute(permissions.redirectTo, route, state, failedPermission);
            }
            else {
                this.redirectToAnotherRoute(permissions.redirectTo[DEFAULT_REDIRECT_KEY], route, state, failedPermission);
            }
        }
    }
    isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission) {
        return (!!permissions.redirectTo && permissions.redirectTo[failedPermission]);
    }
    checkOnlyPermissions(purePermissions, route, state) {
        const permissions = Object.assign({}, purePermissions);
        return Promise.all([
            this.permissionsService.hasPermission(permissions.only),
            this.rolesService.hasOnlyRoles(permissions.only)
        ]).then(([hasPermission, hasRole]) => {
            if (hasPermission || hasRole) {
                return true;
            }
            if (permissions.redirectTo) {
                this.redirectToAnotherRoute(permissions.redirectTo, route, state);
            }
            return false;
        });
    }
    passingOnlyPermissionsValidation(permissions, route, state) {
        if ((isFunction(permissions.redirectTo)
            || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {
            return this.onlyRedirectCheck(permissions, route, state);
        }
        return this.checkOnlyPermissions(permissions, route, state);
    }
}
NgxPermissionsGuard.decorators = [
    { type: Injectable }
];
NgxPermissionsGuard.ctorParameters = () => [
    { type: NgxPermissionsService },
    { type: NgxRolesService },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,