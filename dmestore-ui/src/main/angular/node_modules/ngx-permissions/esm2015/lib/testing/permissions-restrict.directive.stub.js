import { Directive, EventEmitter, Input, Output, ViewContainerRef } from '@angular/core';
export class NgxPermissionsRestrictStubDirective {
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
        this.permissionsAuthorized = new EventEmitter();
        this.permissionsUnauthorized = new EventEmitter();
    }
    ngOnInit() {
        this.viewContainer.clear();
        if (this.getUnAuthorizedTemplate()) {
            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());
        }
        this.permissionsUnauthorized.emit();
    }
    getUnAuthorizedTemplate() {
        return this.ngxPermissionsOnlyElse ||
            this.ngxPermissionsExceptElse ||
            this.ngxPermissionsElse;
    }
}
NgxPermissionsRestrictStubDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'
            },] }
];
NgxPermissionsRestrictStubDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
NgxPermissionsRestrictStubDirective.propDecorators = {
    ngxPermissionsOnly: [{ type: Input }],
    ngxPermissionsOnlyThen: [{ type: Input }],
    ngxPermissionsOnlyElse: [{ type: Input }],
    ngxPermissionsExcept: [{ type: Input }],
    ngxPermissionsExceptElse: [{ type: Input }],
    ngxPermissionsExceptThen: [{ type: Input }],
    ngxPermissionsThen: [{ type: Input }],
    ngxPermissionsElse: [{ type: Input }],
    ngxPermissionsOnlyAuthorisedStrategy: [{ type: Input }],
    ngxPermissionsOnlyUnauthorisedStrategy: [{ type: Input }],
    ngxPermissionsExceptUnauthorisedStrategy: [{ type: Input }],
    ngxPermissionsExceptAuthorisedStrategy: [{ type: Input }],
    ngxPermissionsUnauthorisedStrategy: [{ type: Input }],
    ngxPermissionsAuthorisedStrategy: [{ type: Input }],
    permissionsAuthorized: [{ type: Output }],
    permissionsUnauthorized: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMtcmVzdHJpY3QuZGlyZWN0aXZlLnN0dWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcGVybWlzc2lvbnMvc3JjL2xpYi90ZXN0aW5nL3Blcm1pc3Npb25zLXJlc3RyaWN0LmRpcmVjdGl2ZS5zdHViLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQWUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNOUcsTUFBTSxPQUFPLG1DQUFtQztJQTBCNUMsWUFBb0IsYUFBK0I7UUFBL0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBSnpDLDBCQUFxQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0MsNEJBQXVCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUdELENBQUM7SUFHdkQsUUFBUTtRQUNKLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0IsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUM7U0FDekU7UUFDRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUdPLHVCQUF1QjtRQUMzQixPQUFPLElBQUksQ0FBQyxzQkFBc0I7WUFDOUIsSUFBSSxDQUFDLHdCQUF3QjtZQUM3QixJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDaEMsQ0FBQzs7O1lBN0NKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsNkNBQTZDO2FBQzFEOzs7WUFMcUUsZ0JBQWdCOzs7aUNBUWpGLEtBQUs7cUNBQ0wsS0FBSztxQ0FDTCxLQUFLO21DQUVMLEtBQUs7dUNBQ0wsS0FBSzt1Q0FDTCxLQUFLO2lDQUVMLEtBQUs7aUNBQ0wsS0FBSzttREFFTCxLQUFLO3FEQUNMLEtBQUs7dURBRUwsS0FBSztxREFDTCxLQUFLO2lEQUVMLEtBQUs7K0NBQ0wsS0FBSztvQ0FFTCxNQUFNO3NDQUNOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RyYXRlZ3lGdW5jdGlvbiB9IGZyb20gJy4uL3NlcnZpY2UvY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbmd4UGVybWlzc2lvbnNPbmx5XSxbbmd4UGVybWlzc2lvbnNFeGNlcHRdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hQZXJtaXNzaW9uc1Jlc3RyaWN0U3R1YkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc09ubHk6IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zT25seVRoZW46IFRlbXBsYXRlUmVmPGFueT47XG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNPbmx5RWxzZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zRXhjZXB0OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc0V4Y2VwdEVsc2U6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNFeGNlcHRUaGVuOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNUaGVuOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zRWxzZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zT25seUF1dGhvcmlzZWRTdHJhdGVneTogc3RyaW5nIHwgU3RyYXRlZ3lGdW5jdGlvbjtcbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc09ubHlVbmF1dGhvcmlzZWRTdHJhdGVneTogc3RyaW5nIHwgU3RyYXRlZ3lGdW5jdGlvbjtcblxuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zRXhjZXB0VW5hdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNFeGNlcHRBdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XG5cbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc1VuYXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zQXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xuXG4gICAgQE91dHB1dCgpIHBlcm1pc3Npb25zQXV0aG9yaXplZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgcGVybWlzc2lvbnNVbmF1dGhvcml6ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZikge31cblxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICBpZiAodGhpcy5nZXRVbkF1dGhvcml6ZWRUZW1wbGF0ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuZ2V0VW5BdXRob3JpemVkVGVtcGxhdGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc1VuYXV0aG9yaXplZC5lbWl0KCk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGdldFVuQXV0aG9yaXplZFRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZ3hQZXJtaXNzaW9uc09ubHlFbHNlIHx8XG4gICAgICAgICAgICB0aGlzLm5neFBlcm1pc3Npb25zRXhjZXB0RWxzZSB8fFxuICAgICAgICAgICAgdGhpcy5uZ3hQZXJtaXNzaW9uc0Vsc2U7XG4gICAgfVxuXG59XG4iXX0=