import { Inject, Injectable, InjectionToken } from '@angular/core';
import { BehaviorSubject, from, of } from 'rxjs';
import { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';
import { NgxRolesStore } from '../store/roles.store';
import { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';
import { NgxPermissionsService } from './permissions.service';
export const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');
export class NgxRolesService {
    constructor(isolate = false, rolesStore, permissionsService) {
        this.isolate = isolate;
        this.rolesStore = rolesStore;
        this.permissionsService = permissionsService;
        this.rolesSource = this.isolate ? new BehaviorSubject({}) : this.rolesStore.rolesSource;
        this.roles$ = this.rolesSource.asObservable();
    }
    addRole(name, validationFunction) {
        const roles = Object.assign(Object.assign({}, this.rolesSource.value), { [name]: { name, validationFunction } });
        this.rolesSource.next(roles);
    }
    addRoles(rolesObj) {
        Object.keys(rolesObj).forEach((key, index) => {
            this.addRole(key, rolesObj[key]);
        });
    }
    flushRoles() {
        this.rolesSource.next({});
    }
    removeRole(roleName) {
        const roles = Object.assign({}, this.rolesSource.value);
        delete roles[roleName];
        this.rolesSource.next(roles);
    }
    getRoles() {
        return this.rolesSource.value;
    }
    getRole(name) {
        return this.rolesSource.value[name];
    }
    hasOnlyRoles(names) {
        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);
        if (isNamesEmpty) {
            return Promise.resolve(true);
        }
        names = transformStringToArray(names);
        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])
            .then(([hasRoles, hasPermissions]) => {
            return hasRoles || hasPermissions;
        });
    }
    hasRoleKey(roleName) {
        const promises = roleName.map((key) => {
            const hasValidationFunction = !!this.rolesSource.value[key] &&
                !!this.rolesSource.value[key].validationFunction &&
                isFunction(this.rolesSource.value[key].validationFunction);
            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {
                const validationFunction = this.rolesSource.value[key].validationFunction;
                const immutableValue = Object.assign({}, this.rolesSource.value);
                return of(null).pipe(map(() => validationFunction(key, immutableValue)), switchMap((promise) => isBoolean(promise) ?
                    of(promise) : promise), catchError(() => of(false)));
            }
            return of(false);
        });
        return from(promises).pipe(mergeAll(), first((data) => data !== false, false), map((data) => data !== false)).toPromise().then((data) => data);
    }
    hasRolePermission(roles, roleNames) {
        return from(roleNames).pipe(mergeMap((key) => {
            if (roles[key] && Array.isArray(roles[key].validationFunction)) {
                return from(roles[key].validationFunction).pipe(mergeMap((permission) => this.permissionsService.hasPermission(permission)), every(hasPermission => hasPermission === true));
            }
            return of(false);
        }), first(hasPermission => hasPermission === true, false)).toPromise();
    }
}
NgxRolesService.decorators = [
    { type: Injectable }
];
NgxRolesService.ctorParameters = () => [
    { type: Boolean, decorators: [{ type: Inject, args: [USE_ROLES_STORE,] }] },
    { type: NgxRolesStore },
    { type: NgxPermissionsService }
];
//# sourceMappingURL=data:application/json;base64,