{"version":3,"file":"ngx-permissions.js","sources":["../../../projects/ngx-permissions/src/lib/enums/predefined-strategies.enum.ts","../../../projects/ngx-permissions/src/lib/store/configuration.store.ts","../../../projects/ngx-permissions/src/lib/service/configuration.service.ts","../../../projects/ngx-permissions/src/lib/store/permissions.store.ts","../../../projects/ngx-permissions/src/lib/utils/utils.ts","../../../projects/ngx-permissions/src/lib/service/permissions.service.ts","../../../projects/ngx-permissions/src/lib/store/roles.store.ts","../../../projects/ngx-permissions/src/lib/service/roles.service.ts","../../../projects/ngx-permissions/src/lib/directive/permissions.directive.ts","../../../projects/ngx-permissions/src/lib/model/permissions-router-data.model.ts","../../../projects/ngx-permissions/src/lib/router/permissions-guard.service.ts","../../../projects/ngx-permissions/src/lib/testing/permissions-allow.directive.stub.ts","../../../projects/ngx-permissions/src/lib/testing/permissions-restrict.directive.stub.ts","../../../projects/ngx-permissions/src/lib/index.ts","../../../projects/ngx-permissions/src/public-api.ts","../../../projects/ngx-permissions/src/ngx-permissions.ts"],"names":[],"mappings":"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","sourcesContent":["export const NgxPermissionsPredefinedStrategies = {\n    REMOVE: 'remove',\n    SHOW: 'show'\n};\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Strategy } from '../service/configuration.service';\n\n@Injectable()\nexport class NgxPermissionsConfigurationStore {\n\n    public strategiesSource: BehaviorSubject<Strategy> = new BehaviorSubject<Strategy>({});\n    public strategies$: Observable<Strategy> = this.strategiesSource.asObservable();\n\n    public onAuthorisedDefaultStrategy: string | undefined;\n    public onUnAuthorisedDefaultStrategy: string | undefined;\n\n    constructor() {\n    }\n\n}\n","import { Inject, Injectable, InjectionToken, TemplateRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\n\nexport type StrategyFunction = (templateRef?: TemplateRef<any>) => void;\n\nexport interface Strategy {\n    [key: string]: StrategyFunction;\n}\n\nexport const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\n\n@Injectable()\nexport class NgxPermissionsConfigurationService {\n\n    private strategiesSource: BehaviorSubject<Strategy>;\n    public strategies$: Observable<Strategy>;\n    public onAuthorisedDefaultStrategy: string | undefined;\n    public onUnAuthorisedDefaultStrategy: string | undefined;\n\n    constructor(\n        @Inject(USE_CONFIGURATION_STORE) private isolate: boolean = false,\n        private configurationStore: NgxPermissionsConfigurationStore\n    ) {\n        this.strategiesSource = this.isolate ? new BehaviorSubject<Strategy>({}) : this.configurationStore.strategiesSource;\n        this.strategies$ = this.strategiesSource.asObservable();\n\n        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\n        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\n\n    }\n\n    public setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void {\n        if (this.isolate) {\n            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n        } else {\n            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\n        }\n    }\n\n    public setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void {\n        if (this.isolate) {\n            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n        } else {\n            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\n            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\n        }\n    }\n\n    public addPermissionStrategy(key: string, func: StrategyFunction): void {\n        this.strategiesSource.value[key] = func;\n    }\n\n    public getStrategy(key: string) {\n        return this.strategiesSource.value[key];\n    }\n\n    public getAllStrategies() {\n        return this.strategiesSource.value;\n    }\n\n    private getDefinedStrategy(name: string | 'remove' | 'show') {\n        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\n            return name;\n        } else {\n            throw new Error(`No ' ${name} ' strategy is found please define one`);\n        }\n    }\n\n    private isPredefinedStrategy(strategy: string): boolean {\n        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class NgxPermissionsStore {\n\n    public permissionsSource = new BehaviorSubject<{}>({});\n    public permissions$: Observable<{}> = this.permissionsSource.asObservable();\n\n    constructor() {\n    }\n\n}\n","export function isFunction<T>(value: any): value is T {\n    return typeof value === 'function';\n}\n\nexport function isPlainObject(value: any): boolean {\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\n        return false;\n    } else {\n        const prototype = Object.getPrototypeOf(value);\n        return prototype === null || prototype === Object.prototype;\n    }\n}\n\nexport function isString(value: any): value is string {\n    return !!value && typeof value === 'string';\n}\n\nexport function isBoolean(value: any): value is boolean {\n    return typeof value === 'boolean';\n}\n\nexport function isPromise(promise: any) {\n    return Object.prototype.toString.call(promise) === '[object Promise]';\n}\n\nexport function notEmptyValue(value: string | string[]): boolean {\n    if (Array.isArray(value)) {\n        return value.length > 0;\n    }\n    return !!value;\n}\n\nexport function transformStringToArray(value: string | string[]): string[] {\n    if (isString(value)) {\n        return [value];\n    }\n    return value;\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\nimport { catchError, first, map, mergeAll, switchMap } from 'rxjs/operators';\n\nimport { NgxPermission } from '../model/permission.model';\nimport { ValidationFn } from '../model/permissions-router-data.model';\nimport { NgxPermissionsStore } from '../store/permissions.store';\n\nimport { isBoolean, isFunction, transformStringToArray } from '../utils/utils';\n\nexport interface NgxPermissionsObject {\n    [name: string]: NgxPermission;\n}\n\nexport const USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\n\n@Injectable()\nexport class NgxPermissionsService {\n\n    private permissionsSource: BehaviorSubject<NgxPermissionsObject>;\n    public permissions$: Observable<NgxPermissionsObject>;\n\n    constructor(\n        @Inject(USE_PERMISSIONS_STORE) private isolate: boolean = false,\n        private permissionsStore: NgxPermissionsStore\n    ) {\n        this.permissionsSource = isolate ? new BehaviorSubject<NgxPermissionsObject>({}) : permissionsStore.permissionsSource;\n        this.permissions$ = this.permissionsSource.asObservable();\n    }\n\n    /**\n     * Remove all permissions from permissions source\n     */\n    public flushPermissions(): void {\n        this.permissionsSource.next({});\n    }\n\n    public hasPermission(permission: string | string[]): Promise<boolean> {\n        if (!permission || (Array.isArray(permission) && permission.length === 0)) {\n            return Promise.resolve(true);\n        }\n\n        permission = transformStringToArray(permission);\n        return this.hasArrayPermission(permission);\n    }\n\n    public loadPermissions(permissions: string[], validationFunction?: ValidationFn): void {\n        const newPermissions = permissions.reduce(\n            (source, name) => this.reducePermission(source, name, validationFunction), {}\n        );\n        this.permissionsSource.next(newPermissions);\n    }\n\n    public addPermission(permission: string | string[], validationFunction?: ValidationFn): void {\n        if (Array.isArray(permission)) {\n            const permissions = permission.reduce(\n                (source, name) => this.reducePermission(source, name, validationFunction), this.permissionsSource.value\n            );\n\n            this.permissionsSource.next(permissions);\n        } else {\n            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\n\n            this.permissionsSource.next(permissions);\n        }\n    }\n\n    public removePermission(permissionName: string): void {\n        const permissions = {\n            ...this.permissionsSource.value\n        };\n        delete permissions[permissionName];\n        this.permissionsSource.next(permissions);\n    }\n\n    public getPermission(name: string): NgxPermission {\n        return this.permissionsSource.value[name];\n    }\n\n    public getPermissions(): NgxPermissionsObject {\n        return this.permissionsSource.value;\n    }\n\n    private reducePermission(source: NgxPermissionsObject, name: string, validationFunction?: ValidationFn): NgxPermissionsObject {\n        if (!!validationFunction && isFunction(validationFunction)) {\n            return {\n                ...source,\n                [name]: {name, validationFunction}\n            };\n        }\n        return {\n            ...source,\n            [name]: {name}\n        };\n    }\n\n    private hasArrayPermission(permissions: string[]): Promise<boolean> {\n        const promises: Observable<boolean>[] = permissions.map(key => {\n            if (this.hasPermissionValidationFunction(key)) {\n                const validationFunction = this.permissionsSource.value[key].validationFunction;\n                const immutableValue = {...this.permissionsSource.value};\n\n                return of(null).pipe(\n                    map(() => validationFunction(key, immutableValue)),\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\n                        of(promise as boolean) : promise as Promise<boolean>),\n                    catchError(() => of(false))\n                );\n            }\n\n            // check for name of the permission if there is no validation function\n            return of(!!this.permissionsSource.value[key]);\n        });\n\n        return from(promises).pipe(\n            mergeAll(),\n            first((data) => data !== false, false),\n            map((data) => data !== false)\n        ).toPromise().then((data: any) => data);\n    }\n\n    private hasPermissionValidationFunction(key: string): boolean {\n        return !!this.permissionsSource.value[key] &&\n            !!this.permissionsSource.value[key].validationFunction &&\n            isFunction(this.permissionsSource.value[key].validationFunction);\n    }\n\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\n\nexport class NgxRolesStore {\n\n    public rolesSource = new BehaviorSubject<{}>({});\n\n    public roles$: Observable<{}> = this.rolesSource.asObservable();\n\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\nimport { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';\nimport { ValidationFn } from '../model/permissions-router-data.model';\n\nimport { NgxRole } from '../model/role.model';\nimport { NgxRolesStore } from '../store/roles.store';\nimport { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';\nimport { NgxPermissionsService } from './permissions.service';\n\nexport const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\n\nexport interface NgxRolesObject {\n    [name: string]: NgxRole;\n}\n\n@Injectable()\nexport class NgxRolesService {\n\n    private rolesSource: BehaviorSubject<NgxRolesObject>;\n\n    public roles$: Observable<NgxRolesObject>;\n\n    constructor(\n        @Inject(USE_ROLES_STORE) private isolate: boolean = false,\n        private rolesStore: NgxRolesStore,\n        private permissionsService: NgxPermissionsService\n    ) {\n        this.rolesSource = this.isolate ? new BehaviorSubject<NgxRolesObject>({}) : this.rolesStore.rolesSource;\n        this.roles$ = this.rolesSource.asObservable();\n    }\n\n    public addRole(name: string, validationFunction: ValidationFn | string[]) {\n        const roles = {\n            ...this.rolesSource.value,\n            [name]: {name, validationFunction}\n        };\n        this.rolesSource.next(roles);\n    }\n\n    public addRoles(rolesObj: { [name: string]: ValidationFn | string[] }) {\n        Object.keys(rolesObj).forEach((key, index) => {\n            this.addRole(key, rolesObj[key]);\n        });\n    }\n\n    public flushRoles() {\n        this.rolesSource.next({});\n    }\n\n    public removeRole(roleName: string) {\n        const roles = {\n            ...this.rolesSource.value\n        };\n        delete roles[roleName];\n        this.rolesSource.next(roles);\n    }\n\n    public getRoles() {\n        return this.rolesSource.value;\n    }\n\n    public getRole(name: string) {\n        return this.rolesSource.value[name];\n    }\n\n    public hasOnlyRoles(names: string | string[]): Promise<boolean> {\n        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);\n\n        if (isNamesEmpty) {\n            return Promise.resolve(true);\n        }\n\n        names = transformStringToArray(names);\n\n        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])\n            .then(([hasRoles, hasPermissions]: [boolean, boolean]) => {\n                return hasRoles || hasPermissions;\n            });\n    }\n\n    private hasRoleKey(roleName: string[]): Promise<boolean> {\n        const promises: Observable<boolean>[] = roleName.map((key) => {\n            const hasValidationFunction = !!this.rolesSource.value[key] &&\n                                          !!this.rolesSource.value[key].validationFunction &&\n                                          isFunction(this.rolesSource.value[key].validationFunction);\n\n            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\n                const validationFunction = this.rolesSource.value[key].validationFunction as ValidationFn;\n                const immutableValue = {...this.rolesSource.value};\n\n                return of(null).pipe(\n                    map(() => validationFunction(key, immutableValue)),\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\n                        of(promise as boolean) : promise as Promise<boolean>),\n                    catchError(() => of(false))\n                );\n            }\n\n            return of(false);\n        });\n\n        return from(promises).pipe(\n            mergeAll(),\n            first((data: any) => data !== false, false),\n            map((data) => data !== false)\n        ).toPromise().then((data: any) => data);\n    }\n\n    private hasRolePermission(roles: NgxRolesObject, roleNames: string[]): Promise<boolean> {\n        return from(roleNames).pipe(\n            mergeMap((key) => {\n                if (roles[key] && Array.isArray(roles[key].validationFunction)) {\n                    return from(roles[key].validationFunction).pipe(\n                        mergeMap((permission) => this.permissionsService.hasPermission(permission)),\n                        every(hasPermission => hasPermission === true)\n                    );\n                }\n\n                return of(false);\n            }),\n            first(hasPermission => hasPermission === true, false)\n        ).toPromise();\n    }\n\n}\n","import {\n    ChangeDetectorRef,\n    Directive,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { merge, Subscription } from 'rxjs';\nimport { skip, take } from 'rxjs/operators';\n\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\nimport { NgxPermissionsService } from '../service/permissions.service';\nimport { NgxRolesService } from '../service/roles.service';\nimport { isBoolean, isFunction, isString, notEmptyValue } from '../utils/utils';\n\n@Directive({\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n})\nexport class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges  {\n\n    @Input() ngxPermissionsOnly: string | string[];\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsExcept: string | string[];\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\n\n    @Input() ngxPermissionsThen: TemplateRef<any>;\n    @Input() ngxPermissionsElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\n\n    @Output() permissionsAuthorized = new EventEmitter();\n    @Output() permissionsUnauthorized = new EventEmitter();\n\n    private initPermissionSubscription: Subscription;\n    // skip first run cause merge will fire twice\n    private firstMergeUnusedRun = 1;\n    private currentAuthorizedState: boolean;\n\n    constructor(\n        private permissionsService: NgxPermissionsService,\n        private configurationService: NgxPermissionsConfigurationService,\n        private rolesService: NgxRolesService,\n        private viewContainer: ViewContainerRef,\n        private changeDetector: ChangeDetectorRef,\n        private templateRef: TemplateRef<any>\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.viewContainer.clear();\n        this.initPermissionSubscription = this.validateExceptOnlyPermissions();\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const onlyChanges = changes.ngxPermissionsOnly;\n        const exceptChanges = changes.ngxPermissionsExcept;\n        if (onlyChanges || exceptChanges) {\n            // Due to bug when you pass empty array\n            if (onlyChanges && onlyChanges.firstChange) {\n                return;\n            }\n            if (exceptChanges && exceptChanges.firstChange) {\n                return;\n            }\n\n            merge(this.permissionsService.permissions$, this.rolesService.roles$)\n                .pipe(skip(this.firstMergeUnusedRun), take(1))\n                .subscribe(() => {\n                    if (notEmptyValue(this.ngxPermissionsExcept)) {\n                        this.validateExceptAndOnlyPermissions();\n                        return;\n                    }\n\n                    if (notEmptyValue(this.ngxPermissionsOnly)) {\n                        this.validateOnlyPermissions();\n                        return;\n                    }\n\n                    this.handleAuthorisedPermission(this.getAuthorisedTemplates());\n                });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.initPermissionSubscription) {\n            this.initPermissionSubscription.unsubscribe();\n        }\n    }\n\n    private validateExceptOnlyPermissions(): Subscription {\n        return merge(this.permissionsService.permissions$, this.rolesService.roles$)\n            .pipe(skip(this.firstMergeUnusedRun))\n            .subscribe(() => {\n                if (notEmptyValue(this.ngxPermissionsExcept)) {\n                    this.validateExceptAndOnlyPermissions();\n                    return;\n                }\n\n                if (notEmptyValue(this.ngxPermissionsOnly)) {\n                    this.validateOnlyPermissions();\n                    return;\n                }\n                this.handleAuthorisedPermission(this.getAuthorisedTemplates());\n            });\n    }\n\n    private validateExceptAndOnlyPermissions(): void {\n        Promise\n            .all([\n              this.permissionsService.hasPermission(this.ngxPermissionsExcept),\n              this.rolesService.hasOnlyRoles(this.ngxPermissionsExcept)\n            ])\n            .then(([hasPermission, hasRole]) => {\n                if (hasPermission || hasRole) {\n                    this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\n                    return;\n                }\n\n                if (!!this.ngxPermissionsOnly) {\n                    throw false;\n                }\n\n                this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\n            })\n            .catch(() => {\n                if (!!this.ngxPermissionsOnly) {\n                    this.validateOnlyPermissions();\n                } else {\n                    this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\n                }\n        });\n    }\n\n    private validateOnlyPermissions(): void {\n        Promise\n            .all([this.permissionsService.hasPermission(this.ngxPermissionsOnly), this.rolesService.hasOnlyRoles(this.ngxPermissionsOnly)])\n            .then(([hasPermissions, hasRoles]) => {\n                if (hasPermissions || hasRoles) {\n                    this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\n                } else {\n                    this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\n                }\n            })\n          .catch(() => {\n                this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\n        });\n    }\n\n    private handleUnauthorisedPermission(template: TemplateRef<any>): void {\n        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) {\n            return;\n        }\n\n        this.currentAuthorizedState = false;\n        this.permissionsUnauthorized.emit();\n\n        if (this.getUnAuthorizedStrategyInput()) {\n            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\n            return;\n        }\n\n        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\n            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\n        } else {\n            this.showTemplateBlockInView(template);\n        }\n\n    }\n\n    private handleAuthorisedPermission(template: TemplateRef<any>): void {\n        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) {\n            return;\n        }\n\n        this.currentAuthorizedState = true;\n        this.permissionsAuthorized.emit();\n\n        if (this.getAuthorizedStrategyInput()) {\n            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\n            return;\n        }\n\n        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\n            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\n        } else {\n            this.showTemplateBlockInView(template);\n        }\n    }\n\n    private applyStrategyAccordingToStrategyType(strategy: string | StrategyFunction): void {\n        if (isString(strategy)) {\n            this.applyStrategy(strategy);\n            return;\n        }\n\n        if (isFunction(strategy)) {\n            this.showTemplateBlockInView(this.templateRef);\n            (strategy as StrategyFunction)(this.templateRef);\n            return;\n        }\n    }\n\n    private showTemplateBlockInView(template: TemplateRef<any>): void {\n        this.viewContainer.clear();\n        if (!template) {\n            return;\n        }\n\n        this.viewContainer.createEmbeddedView(template);\n        this.changeDetector.markForCheck();\n    }\n\n    private getAuthorisedTemplates(): TemplateRef<any> {\n        return this.ngxPermissionsOnlyThen\n            || this.ngxPermissionsExceptThen\n            || this.ngxPermissionsThen\n            || this.templateRef;\n    }\n\n    private elseBlockDefined(): boolean {\n        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\n    }\n\n    private thenBlockDefined() {\n        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\n    }\n\n    private getAuthorizedStrategyInput() {\n        return this.ngxPermissionsOnlyAuthorisedStrategy ||\n            this.ngxPermissionsExceptAuthorisedStrategy ||\n            this.ngxPermissionsAuthorisedStrategy;\n    }\n\n    private getUnAuthorizedStrategyInput() {\n        return this.ngxPermissionsOnlyUnauthorisedStrategy ||\n            this.ngxPermissionsExceptUnauthorisedStrategy ||\n            this.ngxPermissionsUnauthorisedStrategy;\n    }\n\n    private applyStrategy(name: string) {\n        if (name === NgxPermissionsPredefinedStrategies.SHOW) {\n            this.showTemplateBlockInView(this.templateRef);\n            return;\n        }\n\n        if (name === NgxPermissionsPredefinedStrategies.REMOVE) {\n            this.viewContainer.clear();\n            return;\n        }\n        const strategy = this.configurationService.getStrategy(name);\n        this.showTemplateBlockInView(this.templateRef);\n        strategy(this.templateRef);\n    }\n}\n","import { ActivatedRouteSnapshot, NavigationExtras, Route, RouterStateSnapshot } from '@angular/router';\n\nexport interface NgxPermissionsRouterData {\n    only?: string | string[] | OnlyFn;\n    except?: string | string[] | ExceptFn;\n    redirectTo?: RedirectTo | RedirectToFn;\n}\n\nexport interface NgxRedirectToNavigationParameters {\n    navigationCommands: any[] | NavigationCommandsFn;\n    navigationExtras?: NavigationExtras | NavigationExtrasFn;\n}\n\nexport declare type OnlyFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => string | string[];\nexport declare type ExceptFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => string | string[];\n\nexport declare type RedirectTo =\n    string\n    | { [name: string]: NgxRedirectToNavigationParameters | string | RedirectToFn }\n    | NgxRedirectToNavigationParameters;\nexport declare type RedirectToFn =\n    (rejectedPermissionName?: string, route?: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => RedirectTo;\n\nexport declare type NavigationCommandsFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => any[];\nexport declare type NavigationExtrasFn = (route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) => NavigationExtras;\nexport declare type ValidationFn = ((name?: string, store?: any) => Promise<void | string | boolean> | boolean | string[]);\n\nexport const DEFAULT_REDIRECT_KEY = 'default';\n","import { Injectable } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    CanActivate,\n    CanActivateChild,\n    CanLoad,\n    NavigationExtras,\n    Route,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\n\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { first, mergeMap, tap } from 'rxjs/operators';\n\nimport {\n    DEFAULT_REDIRECT_KEY,\n    ExceptFn,\n    NavigationCommandsFn,\n    NavigationExtrasFn,\n    NgxPermissionsRouterData,\n    NgxRedirectToNavigationParameters,\n    OnlyFn,\n    RedirectTo,\n    RedirectToFn\n} from '../model/permissions-router-data.model';\nimport { NgxPermissionsService } from '../service/permissions.service';\nimport { NgxRolesService } from '../service/roles.service';\nimport { isFunction, isPlainObject, transformStringToArray } from '../utils/utils';\n\nexport interface NgxPermissionsData {\n    only?: string | string[];\n    except?: string | string[];\n    redirectTo?: RedirectTo | RedirectToFn;\n}\n\n@Injectable()\nexport class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\n\n    constructor(private permissionsService: NgxPermissionsService, private rolesService: NgxRolesService, private router: Router) {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\n        return this.hasPermissions(route, state);\n    }\n\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n        return this.hasPermissions(childRoute, state);\n    }\n\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean> {\n        return this.hasPermissions(route);\n    }\n\n    private hasPermissions(route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\n        const routeDataPermissions = !!route && route.data ? (route.data.permissions as NgxPermissionsRouterData) : {};\n        const permissions = this.transformPermission(routeDataPermissions, route, state);\n\n        if (this.isParameterAvailable(permissions.except)) {\n            return this.passingExceptPermissionsValidation(permissions, route, state);\n        }\n\n        if (this.isParameterAvailable(permissions.only)) {\n            return this.passingOnlyPermissionsValidation(permissions, route, state);\n        }\n\n        return true;\n    }\n\n    private transformPermission(\n        permissions: NgxPermissionsRouterData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): NgxPermissionsData {\n        const only = isFunction<OnlyFn>(permissions.only)\n            ? permissions.only(route, state)\n            : transformStringToArray(permissions.only);\n        const except = isFunction<ExceptFn>(permissions.except)\n            ? permissions.except(route, state)\n            : transformStringToArray(permissions.except);\n        const redirectTo = permissions.redirectTo;\n\n\n        return {\n            only,\n            except,\n            redirectTo\n        };\n    }\n\n    private isParameterAvailable(permission: string | string[]) {\n        return !!permission && permission.length > 0;\n    }\n\n    private passingExceptPermissionsValidation(\n        permissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state: RouterStateSnapshot\n    ): Promise<boolean> {\n        if (\n            !!permissions.redirectTo\n            && (\n                (isFunction<RedirectToFn>(permissions.redirectTo))\n                || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))\n            )\n        ) {\n            let failedPermission = '';\n\n            return from(permissions.except)\n                .pipe(\n                    mergeMap(permissionsExcept => {\n                        return forkJoin([\n                            this.permissionsService.hasPermission(permissionsExcept),\n                            this.rolesService.hasOnlyRoles(permissionsExcept)\n                        ]).pipe(\n                            tap(hasPermissions => {\n                                const dontHavePermissions = hasPermissions.every(hasPermission => hasPermission === false);\n\n                                if (!dontHavePermissions) {\n                                    failedPermission = permissionsExcept;\n                                }\n                            })\n                        );\n                    }),\n                    first(hasPermissions => hasPermissions.some(hasPermission => hasPermission === true), false),\n                    mergeMap(isAllFalse => {\n                        if (!!failedPermission) {\n                            this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n\n                            return of(false);\n                        }\n\n                        if (!isAllFalse && permissions.only) {\n                            return this.onlyRedirectCheck(permissions, route, state);\n                        }\n\n                        return of(!isAllFalse);\n                    })\n                )\n                .toPromise();\n        }\n\n        return Promise.all([\n            this.permissionsService.hasPermission(permissions.except),\n            this.rolesService.hasOnlyRoles(permissions.except)\n        ]).then(([hasPermission, hasRoles]) => {\n            if (hasPermission || hasRoles) {\n                if (permissions.redirectTo) {\n                    this.redirectToAnotherRoute(\n                        permissions.redirectTo,\n                        route,\n                        state\n                    );\n                }\n\n                return false;\n            }\n\n            if (permissions.only) {\n                return this.checkOnlyPermissions(permissions, route, state);\n            }\n            return true;\n        });\n    }\n\n    private redirectToAnotherRoute(\n        permissionRedirectTo: RedirectTo | RedirectToFn,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot,\n        failedPermissionName?: string\n    ): void {\n\n        const redirectTo = isFunction<RedirectToFn>(permissionRedirectTo)\n            ? permissionRedirectTo(failedPermissionName, route, state)\n            : permissionRedirectTo;\n\n        if (this.isRedirectionWithParameters(redirectTo)) {\n            redirectTo.navigationCommands = this.transformNavigationCommands(redirectTo.navigationCommands, route, state);\n            redirectTo.navigationExtras = this.transformNavigationExtras(redirectTo.navigationExtras, route, state);\n            this.router.navigate(redirectTo.navigationCommands, redirectTo.navigationExtras);\n            return;\n        }\n\n        if (Array.isArray(redirectTo)) {\n            this.router.navigate(redirectTo);\n        } else {\n            this.router.navigate([redirectTo]);\n        }\n    }\n\n    private isRedirectionWithParameters(object: any | NgxRedirectToNavigationParameters): object is NgxRedirectToNavigationParameters {\n        return (isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras));\n    }\n\n    private transformNavigationCommands(\n        navigationCommands: any[] | NavigationCommandsFn,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): any[] {\n        return isFunction<NavigationCommandsFn>(navigationCommands)\n            ? navigationCommands(route, state)\n            : navigationCommands;\n    }\n\n    private transformNavigationExtras(\n        navigationExtras: NavigationExtras | NavigationExtrasFn,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): NavigationExtras {\n        return isFunction<NavigationExtrasFn>(navigationExtras)\n            ? navigationExtras(route, state)\n            : navigationExtras;\n    }\n\n    private onlyRedirectCheck(\n        permissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): Promise<boolean> {\n        let failedPermission = '';\n\n        return from(permissions.only)\n            .pipe(\n                mergeMap(permissionsOnly => {\n                    return forkJoin([\n                        this.permissionsService.hasPermission(permissionsOnly),\n                        this.rolesService.hasOnlyRoles(permissionsOnly)\n                    ]).pipe(\n                        tap(hasPermissions => {\n                            const failed = hasPermissions.every(hasPermission => hasPermission === false);\n\n                            if (failed) {\n                                failedPermission = permissionsOnly;\n                            }\n                        })\n                    );\n                }),\n                first(hasPermissions => {\n                        if (isFunction<RedirectToFn>(permissions.redirectTo)) {\n                            return hasPermissions.some(hasPermission => hasPermission === true);\n                        }\n\n                        return hasPermissions.every(hasPermission => hasPermission === false);\n                    },\n                    false),\n                mergeMap(\n                    (pass: boolean): Observable<boolean> => {\n                        if (isFunction<RedirectToFn>(permissions.redirectTo)) {\n                            if (pass) {\n                                return of(true);\n                            } else {\n                                this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n                                return of(false);\n                            }\n                        } else {\n                            if (!!failedPermission) {\n                                this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\n                            }\n                            return of(!pass);\n                        }\n                    }\n                )\n            )\n            .toPromise();\n    }\n\n    private handleRedirectOfFailedPermission(\n        permissions: NgxPermissionsData,\n        failedPermission: string,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ) {\n        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\n            this.redirectToAnotherRoute(permissions.redirectTo[failedPermission], route, state, failedPermission);\n        } else {\n            if (isFunction<RedirectToFn>(permissions.redirectTo)) {\n                this.redirectToAnotherRoute(permissions.redirectTo, route, state, failedPermission);\n            } else {\n                this.redirectToAnotherRoute(permissions.redirectTo[DEFAULT_REDIRECT_KEY], route, state, failedPermission);\n            }\n        }\n    }\n\n    private isFailedPermissionPropertyOfRedirectTo(permissions: NgxPermissionsData, failedPermission: string): boolean {\n        return (!!permissions.redirectTo && permissions.redirectTo[failedPermission]);\n    }\n\n    private checkOnlyPermissions(\n        purePermissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): Promise<boolean> {\n        const permissions: NgxPermissionsData = {\n            ...purePermissions\n        };\n\n        return Promise.all([\n            this.permissionsService.hasPermission(permissions.only),\n            this.rolesService.hasOnlyRoles(permissions.only)\n        ]).then(([hasPermission, hasRole]) => {\n            if (hasPermission || hasRole) {\n                return true;\n            }\n\n            if (permissions.redirectTo) {\n                this.redirectToAnotherRoute(permissions.redirectTo, route, state);\n            }\n\n            return false;\n        });\n    }\n\n    private passingOnlyPermissionsValidation(\n        permissions: NgxPermissionsData,\n        route: ActivatedRouteSnapshot | Route,\n        state?: RouterStateSnapshot\n    ): Promise<boolean> {\n        if (\n            (isFunction<RedirectToFn>(permissions.redirectTo)\n                || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))\n        ) {\n            return this.onlyRedirectCheck(permissions, route, state);\n        }\n        return this.checkOnlyPermissions(permissions, route, state);\n    }\n}\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { StrategyFunction } from '../service/configuration.service';\n\n@Directive({\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n})\nexport class NgxPermissionsAllowStubDirective implements OnInit {\n\n    @Input() ngxPermissionsOnly: string | string[];\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsExcept: string | string[];\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\n\n    @Input() ngxPermissionsThen: TemplateRef<any>;\n    @Input() ngxPermissionsElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\n\n    @Output() permissionsAuthorized = new EventEmitter();\n    @Output() permissionsUnauthorized = new EventEmitter();\n\n\n    constructor(private viewContainer: ViewContainerRef,\n                private templateRef: TemplateRef<any>) {}\n\n\n    ngOnInit(): void {\n        this.viewContainer.clear();\n        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\n        this.permissionsUnauthorized.emit();\n    }\n\n\n    private getAuthorizedTemplate() {\n        return this.ngxPermissionsOnlyThen ||\n            this.ngxPermissionsExceptThen ||\n            this.ngxPermissionsThen ||\n            this.templateRef;\n    }\n\n}\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { StrategyFunction } from '../service/configuration.service';\n\n@Directive({\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\n})\nexport class NgxPermissionsRestrictStubDirective implements OnInit {\n\n    @Input() ngxPermissionsOnly: string | string[];\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsExcept: string | string[];\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\n\n    @Input() ngxPermissionsThen: TemplateRef<any>;\n    @Input() ngxPermissionsElse: TemplateRef<any>;\n\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\n\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\n\n    @Output() permissionsAuthorized = new EventEmitter();\n    @Output() permissionsUnauthorized = new EventEmitter();\n\n\n    constructor(private viewContainer: ViewContainerRef) {}\n\n\n    ngOnInit(): void {\n        this.viewContainer.clear();\n        if (this.getUnAuthorizedTemplate()) {\n            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\n        }\n        this.permissionsUnauthorized.emit();\n    }\n\n\n    private getUnAuthorizedTemplate() {\n        return this.ngxPermissionsOnlyElse ||\n            this.ngxPermissionsExceptElse ||\n            this.ngxPermissionsElse;\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxPermissionsDirective } from './directive/permissions.directive';\nimport { NgxPermissionsService, USE_PERMISSIONS_STORE } from './service/permissions.service';\nimport { NgxPermissionsGuard } from './router/permissions-guard.service';\nimport { NgxRolesService, USE_ROLES_STORE } from './service/roles.service';\nimport { NgxPermissionsStore } from './store/permissions.store';\nimport { NgxRolesStore } from './store/roles.store';\nimport { NgxPermissionsAllowStubDirective } from './testing/permissions-allow.directive.stub';\nimport { NgxPermissionsRestrictStubDirective } from './testing/permissions-restrict.directive.stub';\nimport { NgxPermissionsConfigurationService, USE_CONFIGURATION_STORE } from './service/configuration.service';\nimport { NgxPermissionsConfigurationStore } from './store/configuration.store';\n\nexport * from './store/roles.store';\nexport * from './store/permissions.store';\nexport * from './store/configuration.store';\n\nexport * from './directive/permissions.directive';\n\nexport * from './service/permissions.service';\nexport * from './service/roles.service';\nexport * from './service/configuration.service';\n\nexport * from './router/permissions-guard.service';\n\nexport * from './model/permissions-router-data.model';\nexport * from './model/role.model';\n\nexport * from './testing/permissions-allow.directive.stub';\nexport * from './testing/permissions-restrict.directive.stub';\n\nexport * from './enums/predefined-strategies.enum';\n\nexport interface NgxPermissionsModuleConfig {\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    rolesIsolate?: boolean;\n    permissionsIsolate?: boolean;\n    configurationIsolate?: boolean;\n}\n\n\n@NgModule({\n    imports: [],\n    declarations: [\n        NgxPermissionsDirective\n    ],\n    exports: [\n        NgxPermissionsDirective\n    ]\n})\nexport class NgxPermissionsModule {\n    static forRoot(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders<NgxPermissionsModule> {\n        return {\n            ngModule: NgxPermissionsModule,\n            providers: [\n                NgxPermissionsStore,\n                NgxRolesStore,\n                NgxPermissionsConfigurationStore,\n                NgxPermissionsService,\n                NgxPermissionsGuard,\n                NgxRolesService,\n                NgxPermissionsConfigurationService,\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\n            ]\n        };\n    }\n\n    static forChild(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders<NgxPermissionsModule> {\n        return {\n            ngModule: NgxPermissionsModule,\n            providers: [\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\n                NgxPermissionsConfigurationService,\n                NgxPermissionsService,\n                NgxRolesService,\n                NgxPermissionsGuard\n            ]\n        };\n    }\n}\n\n@NgModule({\n    imports: [],\n    declarations: [\n        NgxPermissionsAllowStubDirective\n    ],\n    exports: [\n        NgxPermissionsAllowStubDirective\n    ]\n})\nexport class NgxPermissionsAllowStubModule {\n}\n\n\n@NgModule({\n    imports: [],\n    declarations: [\n        NgxPermissionsRestrictStubDirective\n    ],\n    exports: [\n        NgxPermissionsRestrictStubDirective\n    ]\n})\nexport class NgxPermissionsRestrictStubModule {\n}\n\n","/*\n * Public API Surface of ngx-permissions\n */\nexport * from './lib/index';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}