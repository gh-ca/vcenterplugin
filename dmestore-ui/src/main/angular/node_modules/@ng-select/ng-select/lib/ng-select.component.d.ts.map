{"version":3,"file":"ng-select.component.d.ts","sources":["ng-select.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnDestroy, OnChanges, AfterViewInit, ChangeDetectorRef, EventEmitter, TemplateRef, ElementRef, SimpleChanges, QueryList, InjectionToken } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ConsoleService } from './console.service';\nimport { ItemsList } from './items-list';\nimport { NgOption } from './ng-select.types';\nimport { NgDropdownPanelComponent } from './ng-dropdown-panel.component';\nimport { NgOptionComponent } from './ng-option.component';\nimport { SelectionModelFactory } from './selection-model';\nimport { NgSelectConfig } from './config.service';\nexport declare const SELECTION_MODEL_FACTORY: InjectionToken<SelectionModelFactory>;\nexport declare type DropdownPosition = 'bottom' | 'top' | 'auto';\nexport declare type AddTagFn = ((term: string) => any | Promise<any>);\nexport declare type CompareWithFn = (a: any, b: any) => boolean;\nexport declare type GroupValueFn = (key: string | object, children: any[]) => string | object;\nexport declare class NgSelectComponent implements OnDestroy, OnChanges, AfterViewInit, ControlValueAccessor {\n    classes: string;\n    private autoFocus;\n    private _cd;\n    private _console;\n    bindLabel: string;\n    bindValue: string;\n    markFirst: boolean;\n    placeholder: string;\n    notFoundText: string;\n    typeToSearchText: string;\n    addTagText: string;\n    loadingText: string;\n    clearAllText: string;\n    appearance: string;\n    dropdownPosition: DropdownPosition;\n    appendTo: string;\n    loading: boolean;\n    closeOnSelect: boolean;\n    hideSelected: boolean;\n    selectOnTab: boolean;\n    openOnEnter: boolean;\n    maxSelectedItems: number;\n    groupBy: string | Function;\n    groupValue: GroupValueFn;\n    bufferAmount: number;\n    virtualScroll: boolean;\n    selectableGroup: boolean;\n    selectableGroupAsModel: boolean;\n    searchFn: any;\n    trackByFn: any;\n    clearOnBackspace: boolean;\n    labelForId: any;\n    inputAttrs: {\n        [key: string]: string;\n    };\n    tabIndex: number;\n    readonly: boolean;\n    searchWhileComposing: boolean;\n    minTermLength: number;\n    editableSearchTerm: boolean;\n    keyDownFn: (_: KeyboardEvent) => boolean;\n    typeahead: Subject<string>;\n    multiple: boolean;\n    addTag: boolean | AddTagFn;\n    searchable: boolean;\n    clearable: boolean;\n    isOpen: boolean;\n    get items(): any[];\n    set items(value: any[]);\n    get compareWith(): CompareWithFn;\n    set compareWith(fn: CompareWithFn);\n    get clearSearchOnAdd(): boolean;\n    set clearSearchOnAdd(value: boolean);\n    blurEvent: EventEmitter<any>;\n    focusEvent: EventEmitter<any>;\n    changeEvent: EventEmitter<any>;\n    openEvent: EventEmitter<any>;\n    closeEvent: EventEmitter<any>;\n    searchEvent: EventEmitter<{\n        term: string;\n        items: any[];\n    }>;\n    clearEvent: EventEmitter<any>;\n    addEvent: EventEmitter<any>;\n    removeEvent: EventEmitter<any>;\n    scroll: EventEmitter<{\n        start: number;\n        end: number;\n    }>;\n    scrollToEnd: EventEmitter<any>;\n    optionTemplate: TemplateRef<any>;\n    optgroupTemplate: TemplateRef<any>;\n    labelTemplate: TemplateRef<any>;\n    multiLabelTemplate: TemplateRef<any>;\n    headerTemplate: TemplateRef<any>;\n    footerTemplate: TemplateRef<any>;\n    notFoundTemplate: TemplateRef<any>;\n    typeToSearchTemplate: TemplateRef<any>;\n    loadingTextTemplate: TemplateRef<any>;\n    tagTemplate: TemplateRef<any>;\n    loadingSpinnerTemplate: TemplateRef<any>;\n    dropdownPanel: NgDropdownPanelComponent;\n    searchInput: ElementRef<HTMLInputElement>;\n    ngOptions: QueryList<NgOptionComponent>;\n    get disabled(): boolean;\n    get filtered(): boolean;\n    itemsList: ItemsList;\n    viewPortItems: NgOption[];\n    searchTerm: string;\n    dropdownId: string;\n    element: HTMLElement;\n    focused: boolean;\n    escapeHTML: boolean;\n    useDefaultClass: boolean;\n    private _items;\n    private _itemsAreUsed;\n    private _defaultLabel;\n    private _primitive;\n    private _manualOpen;\n    private _disabled;\n    private _pressedKeys;\n    private _compareWith;\n    private _clearSearchOnAdd;\n    private _isComposing;\n    private get _editableSearchTerm();\n    private readonly _destroy$;\n    private readonly _keyPress$;\n    private _onChange;\n    private _onTouched;\n    clearItem: (item: any) => void;\n    constructor(classes: string, autoFocus: any, config: NgSelectConfig, newSelectionModel: SelectionModelFactory, _elementRef: ElementRef<HTMLElement>, _cd: ChangeDetectorRef, _console: ConsoleService);\n    get selectedItems(): NgOption[];\n    get selectedValues(): (string | Object)[];\n    get hasValue(): boolean;\n    get currentPanelPosition(): DropdownPosition;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    handleKeyDown($event: KeyboardEvent): void;\n    handleKeyCode($event: KeyboardEvent): void;\n    handleMousedown($event: MouseEvent): void;\n    handleArrowClick(): void;\n    handleClearClick(): void;\n    clearModel(): void;\n    writeValue(value: any | any[]): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(state: boolean): void;\n    toggle(): void;\n    open(): void;\n    close(): void;\n    toggleItem(item: NgOption): void;\n    select(item: NgOption): void;\n    focus(): void;\n    blur(): void;\n    unselect(item: NgOption): void;\n    selectTag(): void;\n    showClear(): boolean;\n    trackByOption: (_: number, item: NgOption) => any;\n    get showAddTag(): boolean;\n    showNoItemsFound(): boolean;\n    showTypeToSearch(): boolean;\n    onCompositionStart(): void;\n    onCompositionEnd(term: string): void;\n    filter(term: string): void;\n    onInputFocus($event: any): void;\n    onInputBlur($event: any): void;\n    onItemHover(item: NgOption): void;\n    detectChanges(): void;\n    private _setSearchTermFromItems;\n    private _setItems;\n    private _setItemsFromNgOptions;\n    private _isValidWriteValue;\n    private _handleWriteValue;\n    private _handleKeyPresses;\n    private _setInputAttributes;\n    private _updateNgModel;\n    private _clearSearch;\n    private _changeSearch;\n    private _scrollToMarked;\n    private _scrollToTag;\n    private _onSelectionChanged;\n    private _handleTab;\n    private _handleEnter;\n    private _handleSpace;\n    private _handleArrowDown;\n    private _handleArrowUp;\n    private _nextItemIsTag;\n    private _handleBackspace;\n    private get _isTypeahead();\n    private get _validTerm();\n    private _mergeGlobalConfig;\n}\n"]}