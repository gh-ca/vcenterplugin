!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common"),require("@angular/forms"),require("@ngx-formly/core"),require("@ngx-formly/core/select"),require("@angular/core"),require("@angular/material/select"),require("@ngx-formly/material/form-field"),require("@angular/material/core")):"function"==typeof define&&define.amd?define("@ngx-formly/material/select",["exports","@angular/common","@angular/forms","@ngx-formly/core","@ngx-formly/core/select","@angular/core","@angular/material/select","@ngx-formly/material/form-field","@angular/material/core"],t):t((e["ngx-formly"]=e["ngx-formly"]||{},e["ngx-formly"].material=e["ngx-formly"].material||{},e["ngx-formly"].material.select={}),e.ng.common,e.ng.forms,e.core,e.select,e.ng.core,e.ng.material.select,e["ngx-formly"].material["form-field"],e.ng.material.core)}(this,function(e,t,l,o,n,r,a,i,c){"use strict";var u=function(e,t){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var l in t)t.hasOwnProperty(l)&&(e[l]=t[l])})(e,t)};function s(e,t){var l="function"==typeof Symbol&&e[Symbol.iterator];if(!l)return e;var o,n,r=l.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(o=r.next()).done;)a.push(o.value)}catch(i){n={error:i}}finally{try{o&&!o.done&&(l=r["return"])&&l.call(r)}finally{if(n)throw n.error}}return a}var m=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.defaultOptions={templateOptions:{options:[],compareWith:function(e,t){return e===t}}},e}return function o(e,t){function l(){this.constructor=e}u(e,t),e.prototype=null===t?Object.create(t):(l.prototype=t.prototype,new l)}(e,t),e.prototype.getSelectAllState=function(e){return this.empty||0===this.value.length?"":this.value.length!==this.getSelectAllValue(e).length?"indeterminate":"checked"},e.prototype.toggleSelectAll=function(e){var t=this.getSelectAllValue(e);this.formControl.setValue(this.value&&this.value.length===t.length?[]:t)},e.prototype.change=function(e){this.to.change&&this.to.change(this.field,e)},e.prototype._getAriaLabelledby=function(){return this.to.attributes&&this.to.attributes["aria-labelledby"]?this.to.attributes["aria-labelledby"]:this.formField&&this.formField._labelId?this.formField._labelId:null},e.prototype.getSelectAllValue=function(e){if(!this.selectAllValue||e!==this.selectAllValue.options){var t=[];e.forEach(function(e){return e.group?t.push.apply(t,function l(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(s(arguments[t]));return e}(e.group)):t.push(e)}),this.selectAllValue={options:e,value:t.map(function(e){return e.value})}}return this.selectAllValue.value},e.decorators=[{type:r.Component,args:[{selector:"formly-field-mat-select",template:'\n    <ng-template #selectAll let-selectOptions="selectOptions">\n      <mat-option (click)="toggleSelectAll(selectOptions)">\n        <mat-pseudo-checkbox class="mat-option-pseudo-checkbox"\n          [state]="getSelectAllState(selectOptions)">\n        </mat-pseudo-checkbox>\n        {{ to.selectAllOption }}\n      </mat-option>\n    </ng-template>\n\n    <mat-select [id]="id"\n      [formControl]="formControl"\n      [formlyAttributes]="field"\n      [placeholder]="to.placeholder"\n      [tabindex]="to.tabindex"\n      [required]="to.required"\n      [compareWith]="to.compareWith"\n      [multiple]="to.multiple"\n      (selectionChange)="change($event)"\n      [errorStateMatcher]="errorStateMatcher"\n      [aria-labelledby]="_getAriaLabelledby()"\n      [disableOptionCentering]="to.disableOptionCentering"\n      >\n      <ng-container *ngIf="to.options | formlySelectOptions:field | async as selectOptions">\n        <ng-container *ngIf="to.multiple && to.selectAllOption" [ngTemplateOutlet]="selectAll" [ngTemplateOutletContext]="{ selectOptions: selectOptions }">\n        </ng-container>\n        <ng-container *ngFor="let item of selectOptions">\n          <mat-optgroup *ngIf="item.group" [label]="item.label">\n            <mat-option *ngFor="let child of item.group" [value]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </mat-option>\n          </mat-optgroup>\n          <mat-option *ngIf="!item.group" [value]="item.value" [disabled]="item.disabled">{{ item.label }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </mat-select>\n  '}]}],e.propDecorators={formFieldControl:[{type:r.ViewChild,args:[a.MatSelect,{"static":!0}]}]},e}(i.FieldType),p=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{declarations:[m],imports:[t.CommonModule,l.ReactiveFormsModule,a.MatSelectModule,c.MatPseudoCheckboxModule,i.FormlyMatFormFieldModule,n.FormlySelectModule,o.FormlyModule.forChild({types:[{name:"select",component:m,wrappers:["form-field"]}]})]}]}],e}();e.FormlyMatSelectModule=p,e.FormlyFieldSelect=m,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-material-select.umd.min.js.map