!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/common"),require("@ngx-formly/core"),require("@ngx-formly/core/select"),require("@angular/forms"),require("@angular/core"),require("@ngx-formly/material/form-field"),require("@angular/material/input")):"function"==typeof define&&define.amd?define("@ngx-formly/material/native-select",["exports","@angular/common","@ngx-formly/core","@ngx-formly/core/select","@angular/forms","@angular/core","@ngx-formly/material/form-field","@angular/material/input"],o):o((e["ngx-formly"]=e["ngx-formly"]||{},e["ngx-formly"].material=e["ngx-formly"].material||{},e["ngx-formly"].material["native-select"]={}),e.ng.common,e.core,e.select,e.ng.forms,e.ng.core,e["ngx-formly"].material["form-field"],e.ng.material.input)}(this,function(e,o,t,n,r,l,a,i){"use strict";var p=function(e,o){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,o){e.__proto__=o}||function(e,o){for(var t in o)o.hasOwnProperty(t)&&(e[t]=o[t])})(e,o)};var u=function(o){function e(){var e=null!==o&&o.apply(this,arguments)||this;return e.defaultOptions={templateOptions:{options:[]}},e}return function n(e,o){function t(){this.constructor=e}p(e,o),e.prototype=null===o?Object.create(o):(t.prototype=o.prototype,new t)}(e,o),e.decorators=[{type:l.Component,args:[{selector:"formly-field-mat-native-select",template:'\n    <select matNativeControl\n      [id]="id"\n      [readonly]="to.readonly"\n      [required]="to.required"\n      [errorStateMatcher]="errorStateMatcher"\n      [formControl]="formControl"\n      [formlyAttributes]="field">\n      <option *ngIf="to.placeholder" [ngValue]="null">{{ to.placeholder }}</option>\n      <ng-container *ngIf="to.options | formlySelectOptions:field | async as opts">\n        <ng-container *ngIf="to._flatOptions else grouplist">\n          <ng-container *ngFor="let opt of opts">\n            <option [ngValue]="opt.value" [disabled]="opt.disabled">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor="let opt of opts">\n            <option *ngIf="!opt.group else optgroup" [ngValue]="opt.value" [disabled]="opt.disabled">{{ opt.label }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]="opt.label">\n                <option *ngFor="let child of opt.group" [ngValue]="child.value" [disabled]="child.disabled">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n  '}]}],e.propDecorators={formFieldControl:[{type:l.ViewChild,args:[i.MatInput,{"static":!0}]}]},e}(a.FieldType),c=function(){function e(){}return e.decorators=[{type:l.NgModule,args:[{declarations:[u],imports:[o.CommonModule,r.ReactiveFormsModule,i.MatInputModule,a.FormlyMatFormFieldModule,n.FormlySelectModule,t.FormlyModule.forChild({types:[{name:"native-select",component:u,wrappers:["form-field"]}]})]}]}],e}();e.FormlyMatNativeSelectModule=c,e.FormlyFieldNativeSelect=u,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-material-native-select.umd.min.js.map