!function(o,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@angular/forms"),require("@ngx-formly/core"),require("@ngx-formly/core/select"),require("@angular/core"),require("@ngx-formly/material/form-field"),require("@angular/material/checkbox")):"function"==typeof define&&define.amd?define("@ngx-formly/material/multicheckbox",["exports","@angular/common","@angular/forms","@ngx-formly/core","@ngx-formly/core/select","@angular/core","@ngx-formly/material/form-field","@angular/material/checkbox"],e):e((o["ngx-formly"]=o["ngx-formly"]||{},o["ngx-formly"].material=o["ngx-formly"].material||{},o["ngx-formly"].material.multicheckbox={}),o.ng.common,o.ng.forms,o.core,o.select,o.ng.core,o["ngx-formly"].material["form-field"],o.ng.material.checkbox)}(this,function(o,e,r,t,n,l,i,a){"use strict";var c=function(o,e){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,e){o.__proto__=e}||function(o,e){for(var r in e)e.hasOwnProperty(r)&&(o[r]=e[r])})(o,e)};var f=function(){return(f=Object.assign||function(o){for(var e,r=1,t=arguments.length;r<t;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(o[n]=e[n]);return o}).apply(this,arguments)};function u(o,e){var r="function"==typeof Symbol&&o[Symbol.iterator];if(!r)return o;var t,n,l=r.call(o),i=[];try{for(;(void 0===e||0<e--)&&!(t=l.next()).done;)i.push(t.value)}catch(a){n={error:a}}finally{try{t&&!t.done&&(r=l["return"])&&r.call(l)}finally{if(n)throw n.error}}return i}function m(){for(var o=[],e=0;e<arguments.length;e++)o=o.concat(u(arguments[e]));return o}var s=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{hideFieldUnderline:!0,floatLabel:"always",options:[],color:"accent"}},o}return function t(o,e){function r(){this.constructor=o}c(o,e),o.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}(o,e),o.prototype.onChange=function(e,o){var r;"array"===this.to.type?this.formControl.patchValue(o?m(this.formControl.value||[],[e]):m(this.formControl.value||[]).filter(function(o){return o!==e})):this.formControl.patchValue(f({},this.formControl.value,((r={})[e]=o,r))),this.formControl.markAsTouched()},o.prototype.onContainerClick=function(o){this.checkboxes.length&&this.checkboxes.first.focus(),e.prototype.onContainerClick.call(this,o)},o.prototype.isChecked=function(o){var e=this.formControl.value;return e&&("array"===this.to.type?-1!==e.indexOf(o.value):e[o.value])},o.decorators=[{type:l.Component,args:[{selector:"formly-field-mat-multicheckbox",template:'\n    <ng-container *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;">\n      <mat-checkbox\n        [id]="id + \'_\' + i"\n        [formlyAttributes]="field"\n        [tabindex]="to.tabindex"\n        [color]="to.color"\n        [labelPosition]="to.labelPosition"\n        [checked]="isChecked(option)"\n        [disabled]="formControl.disabled"\n        (change)="onChange(option.value, $event.checked)">\n          {{ option.label }}\n      </mat-checkbox>\n    </ng-container>\n  '}]}],o.propDecorators={checkboxes:[{type:l.ViewChildren,args:[a.MatCheckbox]}]},o}(i.FieldType),p=function(){function o(){}return o.decorators=[{type:l.NgModule,args:[{declarations:[s],imports:[e.CommonModule,r.ReactiveFormsModule,a.MatCheckboxModule,i.FormlyMatFormFieldModule,n.FormlySelectModule,t.FormlyModule.forChild({types:[{name:"multicheckbox",component:s,wrappers:["form-field"]}]})]}]}],o}();o.FormlyMatMultiCheckboxModule=p,o.FormlyFieldMultiCheckbox=s,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-material-multicheckbox.umd.min.js.map