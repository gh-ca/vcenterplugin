import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Component, ViewChild, NgModule } from '@angular/core';
import { ɵdefineHiddenProp, FormlyModule } from '@ngx-formly/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { MatInput, MatInputModule } from '@angular/material/input';
import { MatDatepickerInput, MatDatepickerModule } from '@angular/material/datepicker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/input';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/material/datepicker';
import * as ɵngcc4 from '@ngx-formly/core';

const _c0 = ["datepickerToggle"];
function FormlyDatepickerTypeComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-datepicker-toggle", 4);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("for", _r2);
} }
class FormlyDatepickerTypeComponent extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                datepickerOptions: {
                    startView: 'month',
                    datepickerTogglePosition: 'suffix',
                    dateInput: (/**
                     * @return {?}
                     */
                    () => { }),
                    dateChange: (/**
                     * @return {?}
                     */
                    () => { }),
                    monthSelected: (/**
                     * @return {?}
                     */
                    () => { }),
                    yearSelected: (/**
                     * @return {?}
                     */
                    () => { }),
                },
            },
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // temporary fix for https://github.com/angular/material2/issues/6728
        ((/** @type {?} */ (this.datepickerInput)))._formField = this.formField;
        setTimeout((/**
         * @return {?}
         */
        () => {
            ɵdefineHiddenProp(this.field, '_mat' + this.to.datepickerOptions.datepickerTogglePosition, this.datepickerToggle);
            ((/** @type {?} */ (this.options)))._markForCheck(this.field);
        }));
    }
}
FormlyDatepickerTypeComponent.ɵfac = function FormlyDatepickerTypeComponent_Factory(t) { return ɵFormlyDatepickerTypeComponent_BaseFactory(t || FormlyDatepickerTypeComponent); };
FormlyDatepickerTypeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyDatepickerTypeComponent, selectors: [["formly-field-mat-datepicker"]], viewQuery: function FormlyDatepickerTypeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(MatInput, true);
        ɵngcc0.ɵɵviewQuery(MatDatepickerInput, true);
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datepickerInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datepickerToggle = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 20, consts: [["matInput", "", 3, "id", "errorStateMatcher", "formControl", "matDatepicker", "matDatepickerFilter", "max", "min", "formlyAttributes", "placeholder", "tabindex", "readonly", "required", "dateInput", "dateChange"], ["datepickerToggle", ""], [3, "color", "dateClass", "disabled", "opened", "panelClass", "startAt", "startView", "touchUi", "monthSelected", "yearSelected"], ["picker", ""], [3, "for"]], template: function FormlyDatepickerTypeComponent_Template(rf, ctx) { if (rf & 1) {
        const _r3 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "input", 0);
        ɵngcc0.ɵɵlistener("dateInput", function FormlyDatepickerTypeComponent_Template_input_dateInput_0_listener($event) { return ctx.to.datepickerOptions.dateInput(ctx.field, $event); })("dateChange", function FormlyDatepickerTypeComponent_Template_input_dateChange_0_listener($event) { return ctx.to.datepickerOptions.dateChange(ctx.field, $event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, FormlyDatepickerTypeComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(3, "mat-datepicker", 2, 3);
        ɵngcc0.ɵɵlistener("monthSelected", function FormlyDatepickerTypeComponent_Template_mat_datepicker_monthSelected_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const _r2 = ɵngcc0.ɵɵreference(4); return ctx.to.datepickerOptions.monthSelected(ctx.field, $event, _r2); })("yearSelected", function FormlyDatepickerTypeComponent_Template_mat_datepicker_yearSelected_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const _r2 = ɵngcc0.ɵɵreference(4); return ctx.to.datepickerOptions.yearSelected(ctx.field, $event, _r2); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("id", ctx.id)("errorStateMatcher", ctx.errorStateMatcher)("formControl", ctx.formControl)("matDatepicker", _r2)("matDatepickerFilter", ctx.to.datepickerOptions.filter)("max", ctx.to.datepickerOptions.max)("min", ctx.to.datepickerOptions.min)("formlyAttributes", ctx.field)("placeholder", ctx.to.placeholder)("tabindex", ctx.to.tabindex)("readonly", ctx.to.readonly)("required", ctx.to.required);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("color", ctx.to.color)("dateClass", ctx.to.datepickerOptions.dateClass)("disabled", ctx.to.datepickerOptions.disabled)("opened", ctx.to.datepickerOptions.opened)("panelClass", ctx.to.datepickerOptions.panelClass)("startAt", ctx.to.datepickerOptions.startAt)("startView", ctx.to.datepickerOptions.startView)("touchUi", ctx.to.datepickerOptions.touchUi);
    } }, directives: [ɵngcc1.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc3.MatDatepickerInput, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc4.FormlyAttributes, ɵngcc2.RequiredValidator, ɵngcc3.MatDatepicker, ɵngcc3.MatDatepickerToggle], encapsulation: 2 });
FormlyDatepickerTypeComponent.propDecorators = {
    formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }],
    datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput,] }],
    datepickerToggle: [{ type: ViewChild, args: ['datepickerToggle',] }]
};
const ɵFormlyDatepickerTypeComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyDatepickerTypeComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyDatepickerTypeComponent, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-datepicker',
                template: `
    <input matInput
      [id]="id"
      [errorStateMatcher]="errorStateMatcher"
      [formControl]="formControl"
      [matDatepicker]="picker"
      [matDatepickerFilter]="to.datepickerOptions.filter"
      [max]="to.datepickerOptions.max"
      [min]="to.datepickerOptions.min"
      [formlyAttributes]="field"
      [placeholder]="to.placeholder"
      [tabindex]="to.tabindex"
      [readonly]="to.readonly"
      [required]="to.required"
      (dateInput)="to.datepickerOptions.dateInput(field, $event)"
      (dateChange)="to.datepickerOptions.dateChange(field, $event)">
    <ng-template #datepickerToggle>
      <mat-datepicker-toggle [for]="picker"></mat-datepicker-toggle>
    </ng-template>
    <mat-datepicker #picker
      [color]="to.color"
      [dateClass]="to.datepickerOptions.dateClass"
      [disabled]="to.datepickerOptions.disabled"
      [opened]="to.datepickerOptions.opened"
      [panelClass]="to.datepickerOptions.panelClass"
      [startAt]="to.datepickerOptions.startAt"
      [startView]="to.datepickerOptions.startView"
      [touchUi]="to.datepickerOptions.touchUi"
      (monthSelected)="to.datepickerOptions.monthSelected(field, $event, picker)"
      (yearSelected)="to.datepickerOptions.yearSelected(field, $event, picker)"
    >
    </mat-datepicker>
  `
            }]
    }], null, { formFieldControl: [{
            type: ViewChild,
            args: [MatInput, ( /** @type {?} */({ static: true }))]
        }], datepickerInput: [{
            type: ViewChild,
            args: [MatDatepickerInput]
        }], datepickerToggle: [{
            type: ViewChild,
            args: ['datepickerToggle']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyMatDatepickerModule {
}
FormlyMatDatepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatDatepickerModule });
FormlyMatDatepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatDatepickerModule_Factory(t) { return new (t || FormlyMatDatepickerModule)(); }, imports: [[
            CommonModule,
            ReactiveFormsModule,
            MatInputModule,
            MatDatepickerModule,
            FormlyMatFormFieldModule,
            FormlyModule.forChild({
                types: [{
                        name: 'datepicker',
                        component: FormlyDatepickerTypeComponent,
                        wrappers: ['form-field']
                    }]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatDatepickerModule, { declarations: function () { return [FormlyDatepickerTypeComponent]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule,
        MatInputModule,
        MatDatepickerModule,
        FormlyMatFormFieldModule, ɵngcc4.FormlyModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatDatepickerModule, [{
        type: NgModule,
        args: [{
                declarations: [FormlyDatepickerTypeComponent],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatInputModule,
                    MatDatepickerModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'datepicker',
                                component: FormlyDatepickerTypeComponent,
                                wrappers: ['form-field']
                            }]
                    }),
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyMatDatepickerModule, FormlyDatepickerTypeComponent as ɵa };

//# sourceMappingURL=ngx-formly-material-datepicker.js.map