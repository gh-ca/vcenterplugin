import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { Component, ViewChild, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { MatSlideToggle, MatSlideToggleModule } from '@angular/material/slide-toggle';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/slide-toggle';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ngx-formly/core';
class FormlyToggleTypeComponent extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                floatLabel: 'always',
                hideLabel: true,
            },
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        this.slideToggle.focus();
        super.onContainerClick(event);
    }
}
FormlyToggleTypeComponent.ɵfac = function FormlyToggleTypeComponent_Factory(t) { return ɵFormlyToggleTypeComponent_BaseFactory(t || FormlyToggleTypeComponent); };
FormlyToggleTypeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyToggleTypeComponent, selectors: [["formly-field-mat-toggle"]], viewQuery: function FormlyToggleTypeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatSlideToggle, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideToggle = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 7, consts: [[3, "id", "formControl", "formlyAttributes", "color", "tabindex", "required"]], template: function FormlyToggleTypeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-slide-toggle", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id)("formControl", ctx.formControl)("formlyAttributes", ctx.field)("color", ctx.to.color)("tabindex", ctx.to.tabindex)("required", ctx.to.required);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.to.label, " ");
    } }, directives: [ɵngcc1.MatSlideToggle, ɵngcc1.MatSlideToggleRequiredValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator], encapsulation: 2 });
FormlyToggleTypeComponent.propDecorators = {
    slideToggle: [{ type: ViewChild, args: [MatSlideToggle,] }]
};
const ɵFormlyToggleTypeComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyToggleTypeComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyToggleTypeComponent, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-toggle',
                template: `
    <mat-slide-toggle
      [id]="id"
      [formControl]="formControl"
      [formlyAttributes]="field"
      [color]="to.color"
      [tabindex]="to.tabindex"
      [required]="to.required">
      {{ to.label }}
    </mat-slide-toggle>
  `
            }]
    }], null, { slideToggle: [{
            type: ViewChild,
            args: [MatSlideToggle]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyMatToggleModule {
}
FormlyMatToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatToggleModule });
FormlyMatToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatToggleModule_Factory(t) { return new (t || FormlyMatToggleModule)(); }, imports: [[
            CommonModule,
            ReactiveFormsModule,
            MatSlideToggleModule,
            FormlyMatFormFieldModule,
            FormlyModule.forChild({
                types: [{
                        name: 'toggle',
                        component: FormlyToggleTypeComponent,
                        wrappers: ['form-field']
                    }]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatToggleModule, { declarations: function () { return [FormlyToggleTypeComponent]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule,
        MatSlideToggleModule,
        FormlyMatFormFieldModule, ɵngcc3.FormlyModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatToggleModule, [{
        type: NgModule,
        args: [{
                declarations: [FormlyToggleTypeComponent],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatSlideToggleModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'toggle',
                                component: FormlyToggleTypeComponent,
                                wrappers: ['form-field']
                            }]
                    }),
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyMatToggleModule, FormlyToggleTypeComponent as ɵa };

//# sourceMappingURL=ngx-formly-material-toggle.js.map