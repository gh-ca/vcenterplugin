import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { Component, ViewChild, NgModule } from '@angular/core';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';
import { MatRadioGroup, MatRadioModule } from '@angular/material/radio';
import { ɵwrapProperty, FormlyModule } from '@ngx-formly/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/radio';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ngx-formly/core';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@ngx-formly/core/select';

function FormlyFieldRadio_mat_radio_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("color", ctx_r0.to.color)("labelPosition", ctx_r0.to.labelPosition)("value", option_r1.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r1.label, " ");
} }
class FormlyFieldRadio extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                floatLabel: 'always',
                options: [],
                tabindex: -1,
            },
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.focusObserver = ɵwrapProperty(this.field, 'focus', (/**
         * @param {?} __0
         * @return {?}
         */
        ({ currentValue }) => {
            if (this.to.tabindex === -1
                && currentValue
                && this.radioGroup._radios.length > 0) {
                /** @type {?} */
                const radio = this.radioGroup.selected
                    ? this.radioGroup.selected
                    : this.radioGroup._radios.first;
                radio.focus();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.focusObserver && this.focusObserver();
    }
}
FormlyFieldRadio.ɵfac = function FormlyFieldRadio_Factory(t) { return ɵFormlyFieldRadio_BaseFactory(t || FormlyFieldRadio); };
FormlyFieldRadio.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRadio, selectors: [["formly-field-mat-radio"]], viewQuery: function FormlyFieldRadio_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatRadioGroup, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radioGroup = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 10, consts: [[3, "formControl", "formlyAttributes", "required", "tabindex"], [3, "id", "color", "labelPosition", "value", 4, "ngFor", "ngForOf"], [3, "id", "color", "labelPosition", "value"]], template: function FormlyFieldRadio_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-radio-group", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldRadio_mat_radio_button_1_Template, 2, 5, "mat-radio-button", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "formlySelectOptions");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("formlyAttributes", ctx.field)("required", ctx.to.required)("tabindex", ctx.to.tabindex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 5, ɵngcc0.ɵɵpipeBind2(3, 7, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.MatRadioGroup, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator, ɵngcc4.NgForOf, ɵngcc1.MatRadioButton], pipes: [ɵngcc4.AsyncPipe, ɵngcc5.ɵa], encapsulation: 2 });
FormlyFieldRadio.propDecorators = {
    radioGroup: [{ type: ViewChild, args: [MatRadioGroup,] }]
};
const ɵFormlyFieldRadio_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRadio);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldRadio, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-radio',
                template: `
    <mat-radio-group
      [formControl]="formControl"
      [formlyAttributes]="field"
      [required]="to.required"
      [tabindex]="to.tabindex">
      <mat-radio-button *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;"
        [id]="id + '_' + i"
        [color]="to.color"
        [labelPosition]="to.labelPosition"
        [value]="option.value">
        {{ option.label }}
      </mat-radio-button>
    </mat-radio-group>
  `
            }]
    }], null, { radioGroup: [{
            type: ViewChild,
            args: [MatRadioGroup]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyMatRadioModule {
}
FormlyMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatRadioModule });
FormlyMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatRadioModule_Factory(t) { return new (t || FormlyMatRadioModule)(); }, imports: [[
            CommonModule,
            ReactiveFormsModule,
            MatRadioModule,
            FormlyMatFormFieldModule,
            FormlySelectModule,
            FormlyModule.forChild({
                types: [{
                        name: 'radio',
                        component: FormlyFieldRadio,
                        wrappers: ['form-field']
                    }]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatRadioModule, { declarations: function () { return [FormlyFieldRadio]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule,
        MatRadioModule,
        FormlyMatFormFieldModule,
        FormlySelectModule, ɵngcc3.FormlyModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatRadioModule, [{
        type: NgModule,
        args: [{
                declarations: [FormlyFieldRadio],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatRadioModule,
                    FormlyMatFormFieldModule,
                    FormlySelectModule,
                    FormlyModule.forChild({
                        types: [{
                                name: 'radio',
                                component: FormlyFieldRadio,
                                wrappers: ['form-field']
                            }]
                    }),
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyMatRadioModule, FormlyFieldRadio };

//# sourceMappingURL=ngx-formly-material-radio.js.map