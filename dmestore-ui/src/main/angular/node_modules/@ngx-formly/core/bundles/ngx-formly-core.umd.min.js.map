{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__values","o","m","Symbol","iterator","next","value","done","__read","r","ar","push","error","__spread","concat","getKeyPath","field","key","_keyPath","path","replace","split","isArray","slice","FORMLY_VALIDATORS","assignFieldValue","paths","parent","formControl","assignModelValue","model","isObject","test","clone","k","pop","reduce","getFieldValue","_b","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","undefined","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","_observers","fns","currentValue","firstChange","set","previousValue_1","changeFn","previousValue","splice","reduceFormUpdateValidityCalls","form","action","updateValidity","_updateTreeValidity","bind","updateValidityArgs","called","emitEvent","_a","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","component","_resolver","_injector","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","injector","buildForm","fieldGroup","core","_setOptions","_buildForm","_checkField","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","ChangeDetectorRef","markForCheck","_buildField","ComponentFactoryResolver","Injector","FormlyForm","formlyBuilder","ngZone","immutable","parentFormGroup","modelChange","EventEmitter","_modelChangeValue","modelChangeSubs","modelChange$","modelChangeSub","pipe","switchMap","onStable","asObservable","take","subscribe","runGuarded","checkExpressionChange","emit","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","FormGroup","setOptions","updateInitialValue","clearModelSubscriptions","trackModelChanges","ngOnDestroy","unsubscribe","changeModel","resetModel","_initialModel","control","resetForm","reset","emitModelChange","rootKey","control_1","valueChanges","distinctUntilChanged","modelOptions","updateOn","debounce","default","debounceTime","FormControl","patchValue","onlySelf","parsers","parserFn","tslib_1.__spread","join","observers","unshift","sub","Component","selector","template","providers","NgZone","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","FormlyField","renderer","resolver","elementRef","hideDeprecation","warnDeprecation","hostObservers","componentRefs","hooksObservers","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","resetRefs","renderField","containerRef","clear","wps_1","ref_1","createComponent","attachComponentRef","viewRef","detach","destroyed","insert","changeDetectorRef","detectChanges","hooks","sub_1","lifecycle","renderHostBinding","setStyle","setAttribute","filter","Renderer2","ElementRef","read","ViewContainerRef","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","document","templateOptions","listener","eventName","to","listen","attributes","attr","removeAttribute","detachElementRef","attachElementRef","fieldAttrElements","id","toggleFocus","element","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","Directive","host","(focus)","(blur)","(change)","Inject","DOCUMENT","FieldType","Field","_super","tslib_1.__extends","unregisterControl","opts","FormArray","key_1","controls","findIndex","updateControl","removeAt","key_2","removeControl","setParent","disabled","registerControl","disable","enable","registerOnDisabledChange","_hide","setControl","status","updateValueAndValidity","_forEachChild","cb","FieldArrayType","builder","fieldArray","add","initialModel","remove","FieldWrapper","FormlyGroup","[class]","FormlyValidationMessage","errorMessage$","statusChanges","startWith","errorMessage","of","fieldForm","errors","errorPath","asyncValidators","changeDetection","ChangeDetectionStrategy","OnPush","FormlyTemplateType","sanitizer","innerHtml","safeHtml","bypassSecurityTrustHtml","DomSanitizer","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","checkLocked","ignoreCache","checkField","_expressionProperties","expressionProperties","expressionProperty","this_1","_evalExpression","Observable","subscribe_1","setExprValue","subscription_1","onInit_1","onInit","onDestroy_1","onDestroy","hideExpression","hide","parent_1","parentExpression","evalStringExpression","argNames","sort","toggleFormControl","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","hideExpressionResult","hidden","setDisabledState","every","target","lastIndex","emitExpressionChanges","property","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","required","pattern","minLength","maxLength","min","max","validatorOption","isPromise","obj","then","handleAsyncResult","handleResult","ctrl","childCtrl_1","_d","setErrors","childErrors","FieldFormExtension","addFormControl","fieldsToUpdate","setValidators","findControl","controlOptions","componentType","c_1","enabled","asyncValidator","mergeValidators","setAsyncValidators","composeAsync","updateControlValidity","childrenToUpdate","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","getFieldInitialValue","paths_1","paths_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    let path: string[] = [];\n    if (typeof field.key === 'string') {\n      const key = field.key.indexOf('[') === -1\n        ? field.key\n        : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n      path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n    } else if (Array.isArray(field.key)) {\n      path = field.key.slice(0);\n    } else {\n      path = [`${field.key}`];\n    }\n\n    field._keyPath = { key: field.key, path };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignFieldValue(field: FormlyFieldConfigCache, value: any) {\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  if (value == null && field['autoClear'] && !field.formControl.parent) {\n    const k = paths.pop();\n    const m = paths.reduce((model, path) => model[path] || {}, field.parent.model);\n    delete m[k];\n    return;\n  }\n\n  assignModelValue(field.model, paths, value);\n}\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldInitialValue(field: FormlyFieldConfig) {\n  let value = field.options['_initialModel'];\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  for (const path of paths) {\n    if (!value) {\n      return undefined;\n    }\n    value = value[path];\n  }\n\n  return value;\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value)\n    || isObservable(value)\n    || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n    || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(\n  o: any,\n  prop: string,\n  setFn: (change: {currentValue: T, previousValue?: T, firstChange: boolean}) => void,\n) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  if (!o._observers[prop]) {\n    o._observers[prop] = [];\n  }\n\n  let fns: typeof setFn[] = o._observers[prop];\n  if (fns.indexOf(setFn) === -1) {\n    fns.push(setFn);\n    setFn({ currentValue: o[prop], firstChange: true });\n    if (fns.length === 1) {\n      defineHiddenProp(o, `___$${prop}`, o[prop]);\n      Object.defineProperty(o, prop, {\n        configurable: true,\n        get: () => o[`___$${prop}`],\n        set: currentValue => {\n          if (currentValue !== o[`___$${prop}`]) {\n            const previousValue = o[`___$${prop}`];\n            o[`___$${prop}`] = currentValue;\n            fns.forEach(changeFn => changeFn({ previousValue, currentValue, firstChange: false }));\n          }\n        },\n      });\n    }\n  }\n\n  return () => fns.splice(fns.indexOf(setFn), 1);\n}\n\nexport function reduceFormUpdateValidityCalls(form: any, action: Function) {\n  const updateValidity = form._updateTreeValidity.bind(form);\n\n  let updateValidityArgs = { called: false, emitEvent: false };\n  form._updateTreeValidity = ({ emitEvent } = { emitEvent: true }) => updateValidityArgs = { called: true, emitEvent: emitEvent || updateValidityArgs.emitEvent };\n  action();\n\n  updateValidityArgs.called && updateValidity({ emitEvent: updateValidityArgs.emitEvent });\n  form._updateTreeValidity = updateValidity;\n}\n","import { Injectable, InjectionToken, ComponentRef } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\nimport { Observable } from 'rxjs';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: ValidationMessageOption['message'] } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || !!(field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.resolveFieldTypeRef(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  resolveFieldTypeRef(field: FormlyFieldConfigCache = {}): ComponentRef<FieldType> {\n    if (!field.type) {\n      return null;\n    }\n\n    const type = this.getType(field.type);\n    if (!type.component || type['_componentRef']) {\n      return type['_componentRef'];\n    }\n\n    const { _resolver, _injector } = field.parent.options;\n    defineHiddenProp(\n      type,\n      '_componentRef',\n      _resolver.resolveComponentFactory<FieldType>(type.component).create(_injector),\n    );\n\n    return type['_componentRef'];\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: ValidationMessageOption['message']) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig, options?: { [id: string]: any; }): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n  options?: { [id: string]: any };\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes.\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n    */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector, ChangeDetectorRef } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp, reduceFormUpdateValidityCalls } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    const field = { fieldGroup, model, formControl, options: this._setOptions(options) };\n    reduceFormUpdateValidityCalls(formControl, () => this._buildForm(field));\n    field.options._checkField(field, true);\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._resolver) {\n      defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => {\n            // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n          });\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    if (!options._buildField) {\n      options._buildField = (field: FormlyFieldConfig) => {\n        this.buildForm(field.form, field.fieldGroup, field.model, field.options);\n        return field;\n      };\n    }\n\n    return options;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute, ViewChild, ElementRef, NgZone } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignFieldValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath } from '../utils';\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime, switchMap, distinctUntilChanged, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() { return this._model || {}; }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n  @ViewChild('content') set content(content: ElementRef<HTMLElement>) {\n    if (content && content.nativeElement.nextSibling) {\n      console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n    }\n  }\n\n  private immutable = false;\n  private _model: any;\n  private _modelChangeValue: any = {};\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private modelChangeSubs: Subscription[] = [];\n  private modelChange$ = new Subject<void>();\n  private modelChangeSub = this.modelChange$.pipe(\n    switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))),\n  ).subscribe(() => this.ngZone.runGuarded(() => {\n    // runGuarded is used to keep the expression changes in-sync\n    // https://github.com/ngx-formly/ngx-formly/issues/2095\n    this.checkExpressionChange();\n    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n  }));\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    private ngZone: NgZone,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // https://github.com/ngx-formly/ngx-formly/issues/2294\n    if (changes.model && this.field) {\n      this.field.model = this.model;\n    }\n\n    if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.options.updateInitialValue();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n    }\n  }\n\n  ngOnDestroy() {\n    this.modelChangeSub.unsubscribe();\n    this.clearModelSubscriptions();\n  }\n\n  changeModel({ key, value, field }: { key: string, value: any, field: FormlyFieldConfig }) {\n    assignFieldValue(field, value);\n    this.modelChange$.next();\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = clone(isNullOrUndefined(model) ? (<FormlyFormOptionsCache> this.options)._initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', ({ firstChange }) => {\n        if (!firstChange) {\n          this.checkExpressionChange();\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => (<FormlyFormOptionsCache> this.options)._initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const control = field.formControl;\n        let valueChanges = control.valueChanges.pipe(distinctUntilChanged());\n\n        const { updateOn, debounce } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n\n        this.modelChangeSubs.push(valueChanges.subscribe((value) => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n            control.patchValue(value, { emitEvent: false, onlySelf: true });\n          }\n\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n        }));\n\n        // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n        const observers = control.valueChanges['observers'];\n        if (observers && observers.length > 1) {\n          observers.unshift(observers.pop());\n        }\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n\n  private get field(): any {\n    return this.fields && this.fields[0] && this.fields[0].parent;\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Renderer2, ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp, wrapProperty } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\nimport { isObservable } from 'rxjs';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n  private hostObservers: Function[] = [];\n  private componentRefs: any[] = [];\n  private hooksObservers: Function[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private renderer: Renderer2,\n    private resolver: ComponentFactoryResolver,\n    private elementRef: ElementRef,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.resetRefs(this.field);\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hooksObservers.forEach(unsubscribe => unsubscribe());\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[]) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.formlyConfig.getWrapper(wrapper);\n\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty<ViewContainerRef>(ref.instance, 'fieldComponent', ({ firstChange, previousValue, currentValue }) => {\n        if (currentValue) {\n          const viewRef = previousValue ? previousValue.detach() : null;\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f && f.type) {\n      const { component } = this.formlyConfig.getType(f.type);\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field && this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        const r = this.field.hooks[name](this.field);\n        if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n          const sub = r.subscribe();\n          this.hooksObservers.push(() => sub.unsubscribe());\n        }\n      }\n    }\n\n    if (this.field && this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.renderHostBinding();\n      this.resetRefs(changes.field.previousValue);\n      this.renderField(this.containerRef, this.field, this.field ? this.field.wrappers : []);\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    this.componentRefs.push(ref);\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n\n  private renderHostBinding() {\n    if (!this.field) {\n      return;\n    }\n\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hostObservers = [\n      wrapProperty(this.field, 'hide', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n        }\n      }),\n      wrapProperty(this.field, 'className', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n        }\n      }),\n    ];\n  }\n\n  private resetRefs(field: FormlyFieldConfigCache) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter(ref => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n\n    this.componentRefs = [];\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(change)': 'onChange($event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  @Input() id: string;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n    'step',\n  ];\n\n  /**\n   * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n   */\n  private uiEvents = {\n    listeners: [],\n    events: [\n      'click',\n      'keyup',\n      'keydown',\n      'keypress',\n    ],\n  };\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements(): ElementRef[] { return (this.field && this.field['_elementRefs']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n      this.uiEvents.listeners.forEach(listener => listener());\n      this.uiEvents.events.forEach(eventName => {\n        if (this.to && this.to[eventName]) {\n          this.uiEvents.listeners.push(\n            this.renderer.listen(\n              this.elementRef.nativeElement,\n              eventName,\n              (e) => this.to[eventName](this.field, e),\n            ),\n          );\n        }\n      });\n\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        wrapProperty(this.field, 'focus', ({ currentValue }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(listener => listener());\n    this.detachElementRef(this.field);\n  }\n\n  toggleFocus(value: boolean) {\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.nativeElement.focus();\n    } else if (!value && isFocused) {\n      element.nativeElement.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachElementRef(f: FormlyFieldConfig) {\n    if (!f) {\n      return;\n    }\n\n    if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n\n  private detachElementRef(f: FormlyFieldConfig) {\n    const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n    if (index !== -1) {\n      this.field['_elementRefs'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty, isUndefined, assignFieldValue } from '../../utils';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { EventEmitter } from '@angular/core';\n\nexport function unregisterControl(field: FormlyFieldConfig, emitEvent = false) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (!form) {\n    return;\n  }\n\n  const control = field.formControl;\n  const opts = { emitEvent };\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === control);\n    if (key !== -1) {\n      updateControl(form, opts, () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts, () => form.removeControl(key));\n    }\n  }\n\n  control.setParent(null);\n  if (field['autoClear']) {\n    if (field.parent.model) {\n      delete field.parent.model[Array.isArray(field.key) ? field.key[0] : field.key];\n    }\n    control.reset(\n      { value: undefined, disabled: control.disabled },\n      { emitEvent: field.fieldGroup ? false : emitEvent, onlySelf: true },\n    );\n  }\n}\n\nexport function findControl(field: FormlyFieldConfig): AbstractControl {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  const form = field.parent.formControl as FormGroup;\n\n  return form ? form.get(getKeyPath(field)) : null;\n}\n\nexport function registerControl(field: FormlyFieldConfigCache, control?: any, emitEvent = false) {\n  control = control || field.formControl;\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (control['_fields'].indexOf(field) === -1) {\n    control['_fields'].push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled', ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n        (value: boolean) => field.templateOptions['___$disabled'] = value,\n      );\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  if (!parent['_formlyControls']) {\n    defineHiddenProp(parent, '_formlyControls', {});\n  }\n  parent['_formlyControls'][paths.join('.')] = control;\n\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      registerControl({\n        key: [path],\n        formControl: new FormGroup({}),\n        parent: { formControl: parent },\n      });\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  if (field['autoClear'] && field.parent && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n    assignFieldValue(field, field.defaultValue);\n  }\n\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n  const key = paths[paths.length - 1];\n  if (!field._hide && parent.get([key]) !== control) {\n    updateControl(\n      parent,\n      { emitEvent },\n      () => parent.setControl(key, control),\n    );\n  }\n}\n\nexport function updateValidity(c: AbstractControl) {\n  const status = c.status;\n  c.updateValueAndValidity({ emitEvent: false });\n  if (status !== c.status) {\n    (c.statusChanges as EventEmitter<string>).emit(c.status);\n  }\n}\n\nfunction updateControl(form: FormGroup|FormArray, opts: { emitEvent: boolean }, action: Function) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    (form as any)._forEachChild = (cb: Function) => {\n      Object\n        .keys(form.controls)\n        .forEach(k => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = (opts) => {\n      updateValueAndValidity({ ...(opts || {}), emitEvent: false });\n    };\n  }\n\n  action();\n\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}\n","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined, assignFieldValue } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl, unregisterControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  formControl: FormArray;\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl && field.key) {\n      registerControl(field, new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any, { markAsDirty } = { markAsDirty: true }) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignFieldValue(this.field, []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  remove(i: number, { markAsDirty } = { markAsDirty: true }) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: false }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FormlyConfig, ValidationMessageOption } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\nimport { Observable, isObservable, of } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage$ | async }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyValidationMessage implements OnChanges {\n  @Input() field: FormlyFieldConfig;\n  errorMessage$: Observable<string>;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngOnChanges() {\n    this.errorMessage$ = this.field.formControl.statusChanges.pipe(\n      startWith(null),\n      switchMap(() => isObservable(this.errorMessage)\n        ? this.errorMessage\n        : of(this.errorMessage),\n      ),\n    );\n  }\n\n  get errorMessage() {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: ValidationMessageOption['message'] = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {\n  get template() {\n    if (this.field && (this.field.template !== this.innerHtml.template)) {\n      this.innerHtml = {\n        template: this.field.template,\n        content: this.to.safeHtml\n          ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n          : this.field.template,\n      };\n    }\n\n    return this.innerHtml.content;\n  }\n\n  private innerHtml = { content: null, template: null };\n  constructor(private sanitizer: DomSanitizer) {\n    super();\n  }\n}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isFunction, defineHiddenProp, wrapProperty, reduceFormUpdateValidityCalls } from '../../utils';\nimport { evalExpression, evalStringExpression } from './utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl, updateValidity } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    let checkLocked = false;\n    field.options._checkField = (f, ignoreCache) => {\n      if (!checkLocked) {\n        checkLocked = true;\n        reduceFormUpdateValidityCalls(\n          f.formControl,\n          () => this.checkField(f, ignoreCache),\n        );\n        checkLocked = false;\n      }\n    };\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key];\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              key === 'templateOptions.disabled' && field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscribe = () => (expressionProperty as Observable<any>)\n            .subscribe(v => {\n              this.setExprValue(field, key, v);\n              if (field.options && field.options._markForCheck) {\n                field.options._markForCheck(field);\n              }\n            });\n\n          let subscription: Subscription = subscribe();\n          const onInit = field.hooks.onInit;\n          field.hooks.onInit = () => {\n            if (subscription === null) {\n              subscription = subscribe();\n            }\n            return onInit && onInit(field);\n          };\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = () => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n            subscription = null;\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      let parent = field.parent;\n      while (parent && !parent.hideExpression) {\n        parent = parent.parent;\n      }\n\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        parent && parent.hideExpression ? () => parent.hide : undefined,\n      );\n    } else {\n      wrapProperty(field, 'hide', ({ currentValue, firstChange }) => {\n        field._hide = currentValue;\n        if (!firstChange || (firstChange && currentValue === true)) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any, field: FormlyFieldConfig) => parentExpression() || expression(model, formState, field)\n      : expression;\n  }\n\n  private checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    this._checkField(field, ignoreCache);\n\n    field.options._hiddenFieldsForCheck\n      .sort(f => f.hide ? -1 : 1)\n      .forEach(f => this.toggleFormControl(f, f.hide));\n\n    field.options._hiddenFieldsForCheck = [];\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        field.options._hiddenFieldsForCheck.push(f);\n        markForCheck = true;\n      }\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        this.setExprValue(field, key, expressionValue);\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n\n    return markForCheck;\n  }\n\n  private setDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach(f => this.setDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private toggleFormControl(field: FormlyFieldConfigCache, hide: boolean) {\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n      if (c['_fields'].length > 1) {\n        updateValidity(c);\n      }\n\n      hide === true && c['_fields'].every(f => !!f._hide)\n        ? unregisterControl(field)\n        : registerControl(field);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide));\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field, type: 'hidden', value: hide });\n    }\n  }\n\n  private setExprValue(field: FormlyFieldConfigCache, prop: string, value: any) {\n    try {\n      let target = field;\n      const paths = prop.split('.');\n      const lastIndex = paths.length - 1;\n      for (let i = 0; i < lastIndex; i++) {\n        target = target[paths[i]];\n      }\n\n      target[paths[lastIndex]] = value;\n    } catch (error) {\n      error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n      throw error;\n    }\n\n    if (prop === 'templateOptions.disabled' && field.key) {\n      this.setDisabledState(field, value);\n    }\n\n    if (prop.indexOf('model.') === 0) {\n      const path = prop.replace(/^model\\./, ''),\n        control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n\n      if (\n        control\n        && !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n        && control.value !== value\n      ) {\n        control.patchValue(value, { emitEvent: false });\n      }\n    }\n\n    this.emitExpressionChanges(field, prop, value);\n  }\n\n  private emitExpressionChanges(field: FormlyFieldConfigCache, property: string, value: any) {\n    if (!field.options.fieldChanges) {\n      return;\n    }\n\n    field.options.fieldChanges.next({\n      field: field,\n      type: 'expressionChanges',\n      property,\n      value,\n    });\n  }\n}\n","import { FormlyExtension, FormlyConfig, ValidatorOption } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { FORMLY_VALIDATORS, defineHiddenProp, isPromise, wrapProperty, clone } from '../../utils';\nimport { updateValidity } from '../field-form/utils';\nimport { isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    const validators: ValidatorFn[] = [];\n    if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n      validators.push(this.getPredefinedFieldValidation(field));\n    }\n\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(field, '_' + type, validators);\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => wrapProperty(field.templateOptions, opt, ({ currentValue, firstChange }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        updateValidity(field.formControl);\n      }\n    }));\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.templateOptions[opt];\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      }))(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: any, validatorName?: string) {\n    let validatorOption: ValidatorOption = null;\n    if (typeof validator === 'string') {\n      validatorOption = clone(this.formlyConfig.getValidator(validator));\n    }\n\n    if (typeof validator === 'object' && validator.name) {\n      validatorOption = clone(this.formlyConfig.getValidator(validator.name));\n      if (validator.options) {\n        validatorOption.options = validator.options;\n      }\n    }\n\n    if (typeof validator === 'object' && validator.expression) {\n      const { expression, ...options } = validator;\n      validatorOption = {\n        name: validatorName,\n        validation: expression,\n        options: Object.keys(options).length > 0 ? options : null,\n      };\n    }\n\n    if (typeof validator === 'function') {\n      validatorOption = {\n        name: validatorName,\n        validation: validator,\n      };\n    }\n\n    return (control: AbstractControl) => {\n      const errors: any = validatorOption.validation(control, field, validatorOption.options);\n      if (isPromise(errors)) {\n        return errors.then(v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n      }\n\n      if (isObservable(errors) && !validatorName) {\n        return errors.pipe(map(v => this.handleAsyncResult(field, v, validatorOption)));\n      }\n\n      return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n    };\n  }\n\n  private handleAsyncResult(field: FormlyFieldConfigCache, errors: any, options: ValidatorOption) {\n    // workaround for https://github.com/angular/angular/issues/13200\n    if (field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n\n    return this.handleResult(field, errors, options);\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, errors: any, { name, options }: ValidatorOption) {\n    if (typeof errors === 'boolean') {\n      errors = errors ? null : { [name]: options ? options : true };\n    }\n\n    const ctrl = field.formControl;\n    ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n\n    if (errors && errors[name]) {\n      const errorPath = errors[name].errorPath\n        ? errors[name].errorPath\n        : (options || {}).errorPath;\n\n      const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n      if (childCtrl) {\n        const { errorPath, ...opts } = errors[name];\n        childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n\n        !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n        ctrl['_childrenErrors'][name] = () => {\n          const { [name]: toDelete, ...childErrors } = childCtrl.errors || {};\n          childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n        };\n      }\n    }\n\n    return errors;\n  }\n}\n","import { FormlyExtension, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { FormGroup, FormControl, AbstractControlOptions, Validators, ValidatorFn, AsyncValidatorFn } from '@angular/forms';\nimport { getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl, findControl, updateValidity as updateControlValidity } from './utils';\nimport { of } from 'rxjs';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  constructor(private config: FormlyConfig) { }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field.key) {\n      this.addFormControl(field);\n    }\n\n    if (field.parent && field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const fieldsToUpdate = this.setValidators(field);\n    if (fieldsToUpdate.length === 0) {\n      return;\n    }\n\n    if (fieldsToUpdate.length === 1) {\n      fieldsToUpdate[0].formControl.updateValueAndValidity();\n    } else {\n      (field.formControl as any)._updateTreeValidity();\n    }\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    let control = findControl(field);\n    if (!control) {\n      const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n      const value = getFieldValue(field);\n\n      const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n      if (ref && ref.componentType && ref.componentType['createControl']) {\n        const component = ref.componentType;\n        console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n        control = component['createControl'](value, field);\n      } else if (field.fieldGroup) {\n        // TODO: move to postPopulate\n        control = new FormGroup({}, controlOptions);\n      } else {\n        control = new FormControl(value, controlOptions);\n      }\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key || !field.parent) {\n      const { formControl: c } = field;\n      const disabled = field.templateOptions ? field.templateOptions.disabled : false;\n      if (disabled && c.enabled) {\n        c.disable({ emitEvent: false, onlySelf: true });\n        updateValidity = true;\n      }\n\n      if (null === c.validator || null === c.asyncValidator) {\n        c.setValidators(() => {\n          const v = Validators.compose(this.mergeValidators<ValidatorFn>(field, '_validators'));\n\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(() => {\n          const v = Validators.composeAsync(this.mergeValidators<AsyncValidatorFn>(field, '_asyncValidators'));\n\n          return v ? v(c) : of(null);\n        });\n\n        if (!c.parent) {\n          updateControlValidity(c);\n        } else {\n          updateValidity = true;\n        }\n      }\n    }\n\n    const fieldsToUpdate = updateValidity ? [field] : [];\n    (field.fieldGroup || []).forEach(f => {\n      const childrenToUpdate = this.setValidators(f);\n      if (!updateValidity) {\n        fieldsToUpdate.push(...childrenToUpdate);\n      }\n    });\n\n    return fieldsToUpdate;\n  }\n\n  private mergeValidators<T>(field: FormlyFieldConfigCache, type: '_validators' | '_asyncValidators'): T[] {\n    const validators: any = [];\n    const c = field.formControl;\n    if (c && c['_fields'] && c['_fields'].length > 1) {\n      c['_fields']\n        .filter((f: FormlyFieldConfigCache) => !f._hide)\n        .forEach((f: FormlyFieldConfigCache) => validators.push(...f[type]));\n    } else {\n      validators.push(...field[type]);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.key && f.fieldGroup)\n        .forEach(f => validators.push(...this.mergeValidators(f, type)));\n    }\n\n    return validators;\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, isUndefined, getFieldValue, reverseDeepMerge, assignFieldValue } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false,\n      },\n    });\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (\n      field.type !== 'formly-template'\n      && (\n        field.template\n        || (field.expressionProperties && field.expressionProperties.template)\n      )\n    ) {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (field.parent && !field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignFieldValue(field, field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension(formlyConfig) },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}