{"version":3,"file":"formly.config.d.ts","sources":["formly.config.d.ts"],"names":[],"mappingssourcesContent":["import { InjectionToken, ComponentRef } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\nimport { Observable } from 'rxjs';\nexport declare const FORMLY_CONFIG: InjectionToken<FormlyConfig>;\n/** @experimental */\nexport interface FormlyExtension {\n    prePopulate?(field: FormlyFieldConfig): void;\n    onPopulate?(field: FormlyFieldConfig): void;\n    postPopulate?(field: FormlyFieldConfig): void;\n}\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\nexport declare class FormlyConfig {\n    types: {\n        [name: string]: TypeOption;\n    };\n    validators: {\n        [name: string]: ValidatorOption;\n    };\n    wrappers: {\n        [name: string]: WrapperOption;\n    };\n    messages: {\n        [name: string]: ValidationMessageOption['message'];\n    };\n    templateManipulators: {\n        preWrapper: ManipulatorWrapper[];\n        postWrapper: ManipulatorWrapper[];\n    };\n    extras: ConfigOption['extras'];\n    extensions: {\n        [name: string]: FormlyExtension;\n    };\n    addConfig(config: ConfigOption): void;\n    setType(options: TypeOption | TypeOption[]): void;\n    getType(name: string): TypeOption;\n    getMergedField(field?: FormlyFieldConfig): any;\n    /** @internal */\n    resolveFieldTypeRef(field?: FormlyFieldConfigCache): ComponentRef<FieldType>;\n    setWrapper(options: WrapperOption): void;\n    getWrapper(name: string): WrapperOption;\n    setTypeWrapper(type: string, name: string): void;\n    setValidator(options: ValidatorOption): void;\n    getValidator(name: string): ValidatorOption;\n    addValidatorMessage(name: string, message: ValidationMessageOption['message']): void;\n    getValidatorMessage(name: string): string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\n    setManipulator(manipulator: ManipulatorOption): void;\n    private mergeExtendedType;\n}\nexport interface TypeOption {\n    name: string;\n    component?: any;\n    wrappers?: string[];\n    extends?: string;\n    defaultOptions?: FormlyFieldConfig;\n}\nexport interface WrapperOption {\n    name: string;\n    component: any;\n    types?: string[];\n}\nexport interface FieldValidatorFn {\n    (c: AbstractControl, field: FormlyFieldConfig, options?: {\n        [id: string]: any;\n    }): ValidationErrors | null;\n}\nexport interface ValidatorOption {\n    name: string;\n    validation: FieldValidatorFn;\n    options?: {\n        [id: string]: any;\n    };\n}\nexport interface ExtensionOption {\n    name: string;\n    extension: FormlyExtension;\n}\nexport interface ValidationMessageOption {\n    name: string;\n    message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\n}\nexport interface ManipulatorOption {\n    class?: {\n        new (): any;\n    };\n    method?: string;\n}\nexport interface ManipulatorWrapper {\n    (f: FormlyFieldConfig): string;\n}\nexport interface TemplateManipulators {\n    preWrapper?: ManipulatorWrapper[];\n    postWrapper?: ManipulatorWrapper[];\n}\nexport interface ConfigOption {\n    types?: TypeOption[];\n    wrappers?: WrapperOption[];\n    validators?: ValidatorOption[];\n    extensions?: ExtensionOption[];\n    validationMessages?: ValidationMessageOption[];\n    /** @deprecated use `extensions` instead */\n    manipulators?: ManipulatorOption[];\n    extras?: {\n        /** @deprecated use `extensions` instead */\n        fieldTransform?: any;\n        immutable?: boolean;\n        showError?: (field: FieldType) => boolean;\n        /**\n         * Defines the option which formly rely on to check field expression properties.\n         * - `modelChange`: perform a check when the value of the form control changes.\n         * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n        */\n        checkExpressionOn?: 'modelChange' | 'changeDetectionCheck';\n    };\n}\n"]}