import { __decorate, __param } from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RouterEvent } from '@angular/router';
import { of } from 'rxjs';
import { tap, delay, switchMap, filter } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';
// import { NgProgress } from '../../src/public-api';
import { NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';
import * as i0 from "@angular/core";
import * as i1 from "ngx-progressbar";
import * as i2 from "@angular/router";
import * as i3 from "./ng-progress-router.interface";
/**
 * Check if a router event type exists in an array of router event types
 * @param routerEvent
 * @param events
 */
function eventExists(routerEvent, events) {
    let res = false;
    events.map((event) => res = res || routerEvent instanceof event);
    return res;
}
let NgProgressRouter = class NgProgressRouter {
    constructor(progress, router, config) {
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
        const progressRef = progress.ref(this._config.id);
        const startProgress = of({}).pipe(tap(() => progressRef.start()));
        const completeProgress = of({}).pipe(delay(this._config.delay), tap(() => progressRef.complete()));
        const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];
        router.events.pipe(filter((event) => eventExists(event, filterEvents)), switchMap((event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)).subscribe();
    }
};
NgProgressRouter.ctorParameters = () => [
    { type: NgProgress },
    { type: Router },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_ROUTER_CONFIG,] }] }
];
NgProgressRouter.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgProgressRouter_Factory() { return new NgProgressRouter(i0.ɵɵinject(i1.NgProgress), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NG_PROGRESS_ROUTER_CONFIG, 8)); }, token: NgProgressRouter, providedIn: "root" });
NgProgressRouter = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(2, Optional()), __param(2, Inject(NG_PROGRESS_ROUTER_CONFIG))
], NgProgressRouter);
export { NgProgressRouter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJvZ3Jlc3NiYXIvcm91dGVyLyIsInNvdXJjZXMiOlsibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pILE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxxREFBcUQ7QUFDckQsT0FBTyxFQUEwQix5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7OztBQUVuRzs7OztHQUlHO0FBQ0gsU0FBUyxXQUFXLENBQUMsV0FBd0IsRUFBRSxNQUEyQjtJQUN4RSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksV0FBVyxZQUFZLEtBQUssQ0FBQyxDQUFDO0lBQ3BGLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUtELElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBUTNCLFlBQVksUUFBb0IsRUFBRSxNQUFjLEVBQWlELE1BQThCO1FBUDlHLFlBQU8sR0FBMkI7WUFDakQsRUFBRSxFQUFFLE1BQU07WUFDVixLQUFLLEVBQUUsQ0FBQztZQUNSLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQztZQUM5QixjQUFjLEVBQUUsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDO1NBQ25FLENBQUM7UUFHQSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLGlDQUFLLElBQUksQ0FBQyxPQUFPLEdBQUssTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3BFLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVsRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMvQixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQy9CLENBQUM7UUFFRixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN6QixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ2xDLENBQUM7UUFFRixNQUFNLFlBQVksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRW5GLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsQ0FBQyxLQUFrQixFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQ2hFLFNBQVMsQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUNuSCxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hCLENBQUM7Q0FDRixDQUFBOztZQXBCdUIsVUFBVTtZQUFVLE1BQU07NENBQUcsUUFBUSxZQUFJLE1BQU0sU0FBQyx5QkFBeUI7OztBQVJwRixnQkFBZ0I7SUFINUIsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztJQVNtRCxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQTtHQVJyRixnQkFBZ0IsQ0E0QjVCO1NBNUJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvblN0YXJ0LCBOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRXJyb3IsIFJvdXRlckV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAsIGRlbGF5LCBzd2l0Y2hNYXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3MgfSBmcm9tICduZ3gtcHJvZ3Jlc3NiYXInO1xuLy8gaW1wb3J0IHsgTmdQcm9ncmVzcyB9IGZyb20gJy4uLy4uL3NyYy9wdWJsaWMtYXBpJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3NSb3V0ZXJDb25maWcsIE5HX1BST0dSRVNTX1JPVVRFUl9DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLXJvdXRlci5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgcm91dGVyIGV2ZW50IHR5cGUgZXhpc3RzIGluIGFuIGFycmF5IG9mIHJvdXRlciBldmVudCB0eXBlc1xuICogQHBhcmFtIHJvdXRlckV2ZW50XG4gKiBAcGFyYW0gZXZlbnRzXG4gKi9cbmZ1bmN0aW9uIGV2ZW50RXhpc3RzKHJvdXRlckV2ZW50OiBSb3V0ZXJFdmVudCwgZXZlbnRzOiBUeXBlPFJvdXRlckV2ZW50PltdKSB7XG4gIGxldCByZXMgPSBmYWxzZTtcbiAgZXZlbnRzLm1hcCgoZXZlbnQ6IFR5cGU8Um91dGVyRXZlbnQ+KSA9PiByZXMgPSByZXMgfHwgcm91dGVyRXZlbnQgaW5zdGFuY2VvZiBldmVudCk7XG4gIHJldHVybiByZXM7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NSb3V0ZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc6IE5nUHJvZ3Jlc3NSb3V0ZXJDb25maWcgPSB7XG4gICAgaWQ6ICdyb290JyxcbiAgICBkZWxheTogMCxcbiAgICBzdGFydEV2ZW50czogW05hdmlnYXRpb25TdGFydF0sXG4gICAgY29tcGxldGVFdmVudHM6IFtOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRXJyb3JdXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MsIHJvdXRlcjogUm91dGVyLCBAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1BST0dSRVNTX1JPVVRFUl9DT05GSUcpIGNvbmZpZzogTmdQcm9ncmVzc1JvdXRlckNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZyA/IHsuLi50aGlzLl9jb25maWcsIC4uLmNvbmZpZ30gOiB0aGlzLl9jb25maWc7XG4gICAgY29uc3QgcHJvZ3Jlc3NSZWYgPSBwcm9ncmVzcy5yZWYodGhpcy5fY29uZmlnLmlkKTtcblxuICAgIGNvbnN0IHN0YXJ0UHJvZ3Jlc3MgPSBvZih7fSkucGlwZShcbiAgICAgIHRhcCgoKSA9PiBwcm9ncmVzc1JlZi5zdGFydCgpKVxuICAgICk7XG5cbiAgICBjb25zdCBjb21wbGV0ZVByb2dyZXNzID0gb2Yoe30pLnBpcGUoXG4gICAgICBkZWxheSh0aGlzLl9jb25maWcuZGVsYXkpLFxuICAgICAgdGFwKCgpID0+IHByb2dyZXNzUmVmLmNvbXBsZXRlKCkpXG4gICAgKTtcblxuICAgIGNvbnN0IGZpbHRlckV2ZW50cyA9IFsuLi50aGlzLl9jb25maWcuc3RhcnRFdmVudHMsIC4uLnRoaXMuX2NvbmZpZy5jb21wbGV0ZUV2ZW50c107XG5cbiAgICByb3V0ZXIuZXZlbnRzLnBpcGUoXG4gICAgICBmaWx0ZXIoKGV2ZW50OiBSb3V0ZXJFdmVudCkgPT4gZXZlbnRFeGlzdHMoZXZlbnQsIGZpbHRlckV2ZW50cykpLFxuICAgICAgc3dpdGNoTWFwKChldmVudDogUm91dGVyRXZlbnQpID0+IGV2ZW50RXhpc3RzKGV2ZW50LCB0aGlzLl9jb25maWcuc3RhcnRFdmVudHMpID8gc3RhcnRQcm9ncmVzcyA6IGNvbXBsZXRlUHJvZ3Jlc3MpXG4gICAgKS5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19