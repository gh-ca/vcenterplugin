import { __decorate, __param } from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { NgProgressRef } from './ng-progress-ref';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as i0 from "@angular/core";
import * as i1 from "./ng-progress.interface";
const ɵ0 = (n) => {
    if (n >= 0 && n < 20)
        return 10;
    if (n >= 20 && n < 50)
        return 4;
    if (n >= 50 && n < 80)
        return 2;
    if (n >= 80 && n < 99)
        return 0.5;
    return 0;
};
const defaultConfig = {
    min: 8,
    max: 100,
    speed: 200,
    debounceTime: 0,
    trickleSpeed: 300,
    fixed: true,
    meteor: true,
    thick: false,
    spinner: true,
    ease: 'linear',
    color: '#1B95E0',
    direction: 'ltr+',
    spinnerPosition: 'right',
    trickleFunc: ɵ0
};
let NgProgress = class NgProgress {
    constructor(config) {
        // Store progress bar instances
        this._instances = new Map();
        this.config = config ? Object.assign(Object.assign({}, defaultConfig), config) : defaultConfig;
    }
    /**
     * Get or Create progress bar by ID
     */
    ref(id = 'root', config) {
        if (this._instances.has(id)) {
            // Get ProgressRef instance
            const progressRef = this._instances.get(id);
            if (config) {
                progressRef.setConfig(Object.assign(Object.assign({}, this.config), config));
            }
            return progressRef;
        }
        else {
            // Create new ProgressRef instance
            const progressRef = new NgProgressRef(Object.assign(Object.assign({}, this.config), config), this.deleteInstance(id));
            return this._instances.set(id, progressRef).get(id);
        }
    }
    /**
     * Destroy all progress bar instances
     */
    destroyAll() {
        this._instances.forEach((ref) => ref.destroy());
    }
    /**
     * A destroyer function for each progress bar instance
     */
    deleteInstance(id) {
        return () => {
            this._instances.delete(id);
        };
    }
};
NgProgress.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_CONFIG,] }] }
];
NgProgress.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgProgress_Factory() { return new NgProgress(i0.ɵɵinject(i1.NG_PROGRESS_CONFIG, 8)); }, token: NgProgress, providedIn: "root" });
NgProgress = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Optional()), __param(0, Inject(NG_PROGRESS_CONFIG))
], NgProgress);
export { NgProgress };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcm9ncmVzc2Jhci8iLCJzb3VyY2VzIjpbImxpYi9uZy1wcm9ncmVzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7O1dBZ0JoRSxDQUFDLENBQVMsRUFBVSxFQUFFO0lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sR0FBRyxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQXBCSCxNQUFNLGFBQWEsR0FBcUI7SUFDdEMsR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsR0FBRztJQUNSLEtBQUssRUFBRSxHQUFHO0lBQ1YsWUFBWSxFQUFFLENBQUM7SUFDZixZQUFZLEVBQUUsR0FBRztJQUNqQixLQUFLLEVBQUUsSUFBSTtJQUNYLE1BQU0sRUFBRSxJQUFJO0lBQ1osS0FBSyxFQUFFLEtBQUs7SUFDWixPQUFPLEVBQUUsSUFBSTtJQUNiLElBQUksRUFBRSxRQUFRO0lBQ2QsS0FBSyxFQUFFLFNBQVM7SUFDaEIsU0FBUyxFQUFFLE1BQU07SUFDakIsZUFBZSxFQUFFLE9BQU87SUFDeEIsV0FBVyxJQU1WO0NBQ0YsQ0FBQztBQUtGLElBQWEsVUFBVSxHQUF2QixNQUFhLFVBQVU7SUFRckIsWUFBb0QsTUFBd0I7UUFONUUsK0JBQStCO1FBQ2QsZUFBVSxHQUFHLElBQUksR0FBRyxFQUF5QixDQUFDO1FBTTdELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsaUNBQUssYUFBYSxHQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7T0FFRztJQUNILEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFLE1BQXlCO1FBQ3hDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDM0IsMkJBQTJCO1lBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLElBQUksTUFBTSxFQUFFO2dCQUNWLFdBQVcsQ0FBQyxTQUFTLGlDQUFLLElBQUksQ0FBQyxNQUFNLEdBQUssTUFBTSxFQUFFLENBQUM7YUFDcEQ7WUFDRCxPQUFPLFdBQVcsQ0FBQztTQUNwQjthQUFNO1lBQ0wsa0NBQWtDO1lBQ2xDLE1BQU0sV0FBVyxHQUFHLElBQUksYUFBYSxpQ0FBSyxJQUFJLENBQUMsTUFBTSxHQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsVUFBVTtRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBa0IsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOztPQUVHO0lBQ0ssY0FBYyxDQUFDLEVBQVU7UUFDL0IsT0FBTyxHQUFHLEVBQUU7WUFDVixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTs7NENBckNjLFFBQVEsWUFBSSxNQUFNLFNBQUMsa0JBQWtCOzs7QUFSdkMsVUFBVTtJQUh0QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0lBU2EsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7R0FSeEMsVUFBVSxDQTZDdEI7U0E3Q1ksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICcuL25nLXByb2dyZXNzLXJlZic7XG5pbXBvcnQgeyBOZ1Byb2dyZXNzQ29uZmlnLCBOR19QUk9HUkVTU19DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLmludGVyZmFjZSc7XG5cbmNvbnN0IGRlZmF1bHRDb25maWc6IE5nUHJvZ3Jlc3NDb25maWcgPSB7XG4gIG1pbjogOCxcbiAgbWF4OiAxMDAsXG4gIHNwZWVkOiAyMDAsXG4gIGRlYm91bmNlVGltZTogMCxcbiAgdHJpY2tsZVNwZWVkOiAzMDAsXG4gIGZpeGVkOiB0cnVlLFxuICBtZXRlb3I6IHRydWUsXG4gIHRoaWNrOiBmYWxzZSxcbiAgc3Bpbm5lcjogdHJ1ZSxcbiAgZWFzZTogJ2xpbmVhcicsXG4gIGNvbG9yOiAnIzFCOTVFMCcsXG4gIGRpcmVjdGlvbjogJ2x0cisnLFxuICBzcGlubmVyUG9zaXRpb246ICdyaWdodCcsXG4gIHRyaWNrbGVGdW5jOiAobjogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICBpZiAobiA+PSAwICYmIG4gPCAyMCkgcmV0dXJuIDEwO1xuICAgIGlmIChuID49IDIwICYmIG4gPCA1MCkgcmV0dXJuIDQ7XG4gICAgaWYgKG4gPj0gNTAgJiYgbiA8IDgwKSByZXR1cm4gMjtcbiAgICBpZiAobiA+PSA4MCAmJiBuIDwgOTkpIHJldHVybiAwLjU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3Mge1xuXG4gIC8vIFN0b3JlIHByb2dyZXNzIGJhciBpbnN0YW5jZXNcbiAgcHJpdmF0ZSByZWFkb25seSBfaW5zdGFuY2VzID0gbmV3IE1hcDxzdHJpbmcsIE5nUHJvZ3Jlc3NSZWY+KCk7XG5cbiAgLy8gR2xvYmFsIGNvbmZpZ1xuICBjb25maWc6IE5nUHJvZ3Jlc3NDb25maWc7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChOR19QUk9HUkVTU19DT05GSUcpIGNvbmZpZzogTmdQcm9ncmVzc0NvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnID8gey4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZ30gOiBkZWZhdWx0Q29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvciBDcmVhdGUgcHJvZ3Jlc3MgYmFyIGJ5IElEXG4gICAqL1xuICByZWYoaWQgPSAncm9vdCcsIGNvbmZpZz86IE5nUHJvZ3Jlc3NDb25maWcpIHtcbiAgICBpZiAodGhpcy5faW5zdGFuY2VzLmhhcyhpZCkpIHtcbiAgICAgIC8vIEdldCBQcm9ncmVzc1JlZiBpbnN0YW5jZVxuICAgICAgY29uc3QgcHJvZ3Jlc3NSZWYgPSB0aGlzLl9pbnN0YW5jZXMuZ2V0KGlkKTtcbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgcHJvZ3Jlc3NSZWYuc2V0Q29uZmlnKHsuLi50aGlzLmNvbmZpZywgLi4uY29uZmlnfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3Jlc3NSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENyZWF0ZSBuZXcgUHJvZ3Jlc3NSZWYgaW5zdGFuY2VcbiAgICAgIGNvbnN0IHByb2dyZXNzUmVmID0gbmV3IE5nUHJvZ3Jlc3NSZWYoey4uLnRoaXMuY29uZmlnLCAuLi5jb25maWd9LCB0aGlzLmRlbGV0ZUluc3RhbmNlKGlkKSk7XG4gICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VzLnNldChpZCwgcHJvZ3Jlc3NSZWYpLmdldChpZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgYWxsIHByb2dyZXNzIGJhciBpbnN0YW5jZXNcbiAgICovXG4gIGRlc3Ryb3lBbGwoKSB7XG4gICAgdGhpcy5faW5zdGFuY2VzLmZvckVhY2goKHJlZjogTmdQcm9ncmVzc1JlZikgPT4gcmVmLmRlc3Ryb3koKSk7XG4gIH1cblxuICAvKipcbiAgICogQSBkZXN0cm95ZXIgZnVuY3Rpb24gZm9yIGVhY2ggcHJvZ3Jlc3MgYmFyIGluc3RhbmNlXG4gICAqL1xuICBwcml2YXRlIGRlbGV0ZUluc3RhbmNlKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy5faW5zdGFuY2VzLmRlbGV0ZShpZCk7XG4gICAgfTtcbiAgfVxufVxuIl19