import { __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, NgModule } from '@angular/core';
import { NavigationStart, NavigationEnd, NavigationCancel, NavigationError, Router } from '@angular/router';
import { of } from 'rxjs';
import { tap, delay, filter, switchMap } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';

const NG_PROGRESS_ROUTER_CONFIG = new InjectionToken('ngProgressRouterConfig');

/**
 * Check if a router event type exists in an array of router event types
 * @param routerEvent
 * @param events
 */
function eventExists(routerEvent, events) {
    let res = false;
    events.map((event) => res = res || routerEvent instanceof event);
    return res;
}
let NgProgressRouter = class NgProgressRouter {
    constructor(progress, router, config) {
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
        const progressRef = progress.ref(this._config.id);
        const startProgress = of({}).pipe(tap(() => progressRef.start()));
        const completeProgress = of({}).pipe(delay(this._config.delay), tap(() => progressRef.complete()));
        const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];
        router.events.pipe(filter((event) => eventExists(event, filterEvents)), switchMap((event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)).subscribe();
    }
};
NgProgressRouter.ctorParameters = () => [
    { type: NgProgress },
    { type: Router },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_ROUTER_CONFIG,] }] }
];
NgProgressRouter.ɵprov = ɵɵdefineInjectable({ factory: function NgProgressRouter_Factory() { return new NgProgressRouter(ɵɵinject(NgProgress), ɵɵinject(Router), ɵɵinject(NG_PROGRESS_ROUTER_CONFIG, 8)); }, token: NgProgressRouter, providedIn: "root" });
NgProgressRouter = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(2, Optional()), __param(2, Inject(NG_PROGRESS_ROUTER_CONFIG))
], NgProgressRouter);

var NgProgressRouterModule_1;
let NgProgressRouterModule = NgProgressRouterModule_1 = class NgProgressRouterModule {
    // Inject the service to activate it
    constructor(ngProgressRouter) {
    }
    static withConfig(config) {
        return {
            ngModule: NgProgressRouterModule_1,
            providers: [
                { provide: NG_PROGRESS_ROUTER_CONFIG, useValue: config }
            ]
        };
    }
};
NgProgressRouterModule.ctorParameters = () => [
    { type: NgProgressRouter }
];
NgProgressRouterModule = NgProgressRouterModule_1 = __decorate([
    NgModule({})
], NgProgressRouterModule);

/**
 * Generated bundle index. Do not edit.
 */

export { NG_PROGRESS_ROUTER_CONFIG, NgProgressRouterModule, NgProgressRouter as ɵa };
//# sourceMappingURL=ngx-progressbar-router.js.map
