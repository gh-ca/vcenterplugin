import { __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Inject, Injectable, NgModule } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { finalize } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';

const NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');

let NgProgressInterceptor = class NgProgressInterceptor {
    constructor(ngProgress, config) {
        this.ngProgress = ngProgress;
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
    }
    intercept(req, next) {
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        this._progressRef = this.ngProgress.ref(this._config.id);
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(() => {
            this._inProgressCount--;
            if (this._inProgressCount === 0) {
                this._progressRef.complete();
            }
        }));
    }
    /**
     * Check if request is silent.
     * @param req request
     */
    checkUrl(req) {
        const url = req.url.toLowerCase();
        const found = this._config.silentApis.find((u) => url.startsWith(u));
        return !!found;
    }
};
NgProgressInterceptor.ctorParameters = () => [
    { type: NgProgress },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
];
NgProgressInterceptor = __decorate([
    Injectable(),
    __param(1, Optional()), __param(1, Inject(NG_PROGRESS_HTTP_CONFIG))
], NgProgressInterceptor);

var NgProgressHttpModule_1;
let NgProgressHttpModule = NgProgressHttpModule_1 = class NgProgressHttpModule {
    static withConfig(config) {
        return {
            ngModule: NgProgressHttpModule_1,
            providers: [
                { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }
            ]
        };
    }
};
NgProgressHttpModule = NgProgressHttpModule_1 = __decorate([
    NgModule({
        providers: [
            { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
        ]
    })
], NgProgressHttpModule);

/**
 * Generated bundle index. Do not edit.
 */

export { NG_PROGRESS_HTTP_CONFIG, NgProgressHttpModule, NgProgressInterceptor as Éµa };
//# sourceMappingURL=ngx-progressbar-http.js.map
