import { __assign, __decorate, __param } from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { NgProgressRef } from './ng-progress-ref';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as i0 from "@angular/core";
import * as i1 from "./ng-progress.interface";
var ɵ0 = function (n) {
    if (n >= 0 && n < 20)
        return 10;
    if (n >= 20 && n < 50)
        return 4;
    if (n >= 50 && n < 80)
        return 2;
    if (n >= 80 && n < 99)
        return 0.5;
    return 0;
};
var defaultConfig = {
    min: 8,
    max: 100,
    speed: 200,
    debounceTime: 0,
    trickleSpeed: 300,
    fixed: true,
    meteor: true,
    thick: false,
    spinner: true,
    ease: 'linear',
    color: '#1B95E0',
    direction: 'ltr+',
    spinnerPosition: 'right',
    trickleFunc: ɵ0
};
var NgProgress = /** @class */ (function () {
    function NgProgress(config) {
        // Store progress bar instances
        this._instances = new Map();
        this.config = config ? __assign(__assign({}, defaultConfig), config) : defaultConfig;
    }
    /**
     * Get or Create progress bar by ID
     */
    NgProgress.prototype.ref = function (id, config) {
        if (id === void 0) { id = 'root'; }
        if (this._instances.has(id)) {
            // Get ProgressRef instance
            var progressRef = this._instances.get(id);
            if (config) {
                progressRef.setConfig(__assign(__assign({}, this.config), config));
            }
            return progressRef;
        }
        else {
            // Create new ProgressRef instance
            var progressRef = new NgProgressRef(__assign(__assign({}, this.config), config), this.deleteInstance(id));
            return this._instances.set(id, progressRef).get(id);
        }
    };
    /**
     * Destroy all progress bar instances
     */
    NgProgress.prototype.destroyAll = function () {
        this._instances.forEach(function (ref) { return ref.destroy(); });
    };
    /**
     * A destroyer function for each progress bar instance
     */
    NgProgress.prototype.deleteInstance = function (id) {
        var _this = this;
        return function () {
            _this._instances.delete(id);
        };
    };
    NgProgress.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_CONFIG,] }] }
    ]; };
    NgProgress.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgProgress_Factory() { return new NgProgress(i0.ɵɵinject(i1.NG_PROGRESS_CONFIG, 8)); }, token: NgProgress, providedIn: "root" });
    NgProgress = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional()), __param(0, Inject(NG_PROGRESS_CONFIG))
    ], NgProgress);
    return NgProgress;
}());
export { NgProgress };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcm9ncmVzc2Jhci8iLCJzb3VyY2VzIjpbImxpYi9uZy1wcm9ncmVzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7O1NBZ0JoRSxVQUFDLENBQVM7SUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFDaEMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUM7SUFDbEMsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBcEJILElBQU0sYUFBYSxHQUFxQjtJQUN0QyxHQUFHLEVBQUUsQ0FBQztJQUNOLEdBQUcsRUFBRSxHQUFHO0lBQ1IsS0FBSyxFQUFFLEdBQUc7SUFDVixZQUFZLEVBQUUsQ0FBQztJQUNmLFlBQVksRUFBRSxHQUFHO0lBQ2pCLEtBQUssRUFBRSxJQUFJO0lBQ1gsTUFBTSxFQUFFLElBQUk7SUFDWixLQUFLLEVBQUUsS0FBSztJQUNaLE9BQU8sRUFBRSxJQUFJO0lBQ2IsSUFBSSxFQUFFLFFBQVE7SUFDZCxLQUFLLEVBQUUsU0FBUztJQUNoQixTQUFTLEVBQUUsTUFBTTtJQUNqQixlQUFlLEVBQUUsT0FBTztJQUN4QixXQUFXLElBTVY7Q0FDRixDQUFDO0FBS0Y7SUFRRSxvQkFBb0QsTUFBd0I7UUFONUUsK0JBQStCO1FBQ2QsZUFBVSxHQUFHLElBQUksR0FBRyxFQUF5QixDQUFDO1FBTTdELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsdUJBQUssYUFBYSxHQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7T0FFRztJQUNILHdCQUFHLEdBQUgsVUFBSSxFQUFXLEVBQUUsTUFBeUI7UUFBdEMsbUJBQUEsRUFBQSxXQUFXO1FBQ2IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMzQiwyQkFBMkI7WUFDM0IsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsV0FBVyxDQUFDLFNBQVMsdUJBQUssSUFBSSxDQUFDLE1BQU0sR0FBSyxNQUFNLEVBQUUsQ0FBQzthQUNwRDtZQUNELE9BQU8sV0FBVyxDQUFDO1NBQ3BCO2FBQU07WUFDTCxrQ0FBa0M7WUFDbEMsSUFBTSxXQUFXLEdBQUcsSUFBSSxhQUFhLHVCQUFLLElBQUksQ0FBQyxNQUFNLEdBQUssTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1RixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckQ7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCwrQkFBVSxHQUFWO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFrQixJQUFLLE9BQUEsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFiLENBQWEsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7T0FFRztJQUNLLG1DQUFjLEdBQXRCLFVBQXVCLEVBQVU7UUFBakMsaUJBSUM7UUFIQyxPQUFPO1lBQ0wsS0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs7Z0RBcENZLFFBQVEsWUFBSSxNQUFNLFNBQUMsa0JBQWtCOzs7SUFSdkMsVUFBVTtRQUh0QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBU2EsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7T0FSeEMsVUFBVSxDQTZDdEI7cUJBM0VEO0NBMkVDLEFBN0NELElBNkNDO1NBN0NZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ1Byb2dyZXNzUmVmIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy1yZWYnO1xuaW1wb3J0IHsgTmdQcm9ncmVzc0NvbmZpZywgTkdfUFJPR1JFU1NfQ09ORklHIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy5pbnRlcmZhY2UnO1xuXG5jb25zdCBkZWZhdWx0Q29uZmlnOiBOZ1Byb2dyZXNzQ29uZmlnID0ge1xuICBtaW46IDgsXG4gIG1heDogMTAwLFxuICBzcGVlZDogMjAwLFxuICBkZWJvdW5jZVRpbWU6IDAsXG4gIHRyaWNrbGVTcGVlZDogMzAwLFxuICBmaXhlZDogdHJ1ZSxcbiAgbWV0ZW9yOiB0cnVlLFxuICB0aGljazogZmFsc2UsXG4gIHNwaW5uZXI6IHRydWUsXG4gIGVhc2U6ICdsaW5lYXInLFxuICBjb2xvcjogJyMxQjk1RTAnLFxuICBkaXJlY3Rpb246ICdsdHIrJyxcbiAgc3Bpbm5lclBvc2l0aW9uOiAncmlnaHQnLFxuICB0cmlja2xlRnVuYzogKG46IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgaWYgKG4gPj0gMCAmJiBuIDwgMjApIHJldHVybiAxMDtcbiAgICBpZiAobiA+PSAyMCAmJiBuIDwgNTApIHJldHVybiA0O1xuICAgIGlmIChuID49IDUwICYmIG4gPCA4MCkgcmV0dXJuIDI7XG4gICAgaWYgKG4gPj0gODAgJiYgbiA8IDk5KSByZXR1cm4gMC41O1xuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzIHtcblxuICAvLyBTdG9yZSBwcm9ncmVzcyBiYXIgaW5zdGFuY2VzXG4gIHByaXZhdGUgcmVhZG9ubHkgX2luc3RhbmNlcyA9IG5ldyBNYXA8c3RyaW5nLCBOZ1Byb2dyZXNzUmVmPigpO1xuXG4gIC8vIEdsb2JhbCBjb25maWdcbiAgY29uZmlnOiBOZ1Byb2dyZXNzQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdfUFJPR1JFU1NfQ09ORklHKSBjb25maWc6IE5nUHJvZ3Jlc3NDb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyA/IHsuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWd9IDogZGVmYXVsdENvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3IgQ3JlYXRlIHByb2dyZXNzIGJhciBieSBJRFxuICAgKi9cbiAgcmVmKGlkID0gJ3Jvb3QnLCBjb25maWc/OiBOZ1Byb2dyZXNzQ29uZmlnKSB7XG4gICAgaWYgKHRoaXMuX2luc3RhbmNlcy5oYXMoaWQpKSB7XG4gICAgICAvLyBHZXQgUHJvZ3Jlc3NSZWYgaW5zdGFuY2VcbiAgICAgIGNvbnN0IHByb2dyZXNzUmVmID0gdGhpcy5faW5zdGFuY2VzLmdldChpZCk7XG4gICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgIHByb2dyZXNzUmVmLnNldENvbmZpZyh7Li4udGhpcy5jb25maWcsIC4uLmNvbmZpZ30pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyZXNzUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgbmV3IFByb2dyZXNzUmVmIGluc3RhbmNlXG4gICAgICBjb25zdCBwcm9ncmVzc1JlZiA9IG5ldyBOZ1Byb2dyZXNzUmVmKHsuLi50aGlzLmNvbmZpZywgLi4uY29uZmlnfSwgdGhpcy5kZWxldGVJbnN0YW5jZShpZCkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlcy5zZXQoaWQsIHByb2dyZXNzUmVmKS5nZXQoaWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IGFsbCBwcm9ncmVzcyBiYXIgaW5zdGFuY2VzXG4gICAqL1xuICBkZXN0cm95QWxsKCkge1xuICAgIHRoaXMuX2luc3RhbmNlcy5mb3JFYWNoKChyZWY6IE5nUHJvZ3Jlc3NSZWYpID0+IHJlZi5kZXN0cm95KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgZGVzdHJveWVyIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyZXNzIGJhciBpbnN0YW5jZVxuICAgKi9cbiAgcHJpdmF0ZSBkZWxldGVJbnN0YW5jZShpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMuX2luc3RhbmNlcy5kZWxldGUoaWQpO1xuICAgIH07XG4gIH1cbn1cbiJdfQ==