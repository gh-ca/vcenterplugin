import { __decorate } from "tslib";
import { Component, Input, Output, ChangeDetectionStrategy, EventEmitter } from '@angular/core';
import { Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { NgProgress } from './ng-progress.service';
import { NgProgressRef } from './ng-progress-ref';
var NgProgressComponent = /** @class */ (function () {
    function NgProgressComponent(_ngProgress) {
        this._ngProgress = _ngProgress;
        this._started = Subscription.EMPTY;
        this._completed = Subscription.EMPTY;
        /** Creates a new instance if id is not already exists */
        this.id = 'root';
        /** Initializes inputs from the global config */
        this.min = this._ngProgress.config.min;
        this.max = this._ngProgress.config.max;
        this.ease = this._ngProgress.config.ease;
        this.color = this._ngProgress.config.color;
        this.speed = this._ngProgress.config.speed;
        this.thick = this._ngProgress.config.thick;
        this.fixed = this._ngProgress.config.fixed;
        this.meteor = this._ngProgress.config.meteor;
        this.spinner = this._ngProgress.config.spinner;
        this.trickleSpeed = this._ngProgress.config.trickleSpeed;
        this.debounceTime = this._ngProgress.config.debounceTime;
        this.trickleFunc = this._ngProgress.config.trickleFunc;
        this.spinnerPosition = this._ngProgress.config.spinnerPosition;
        this.direction = this._ngProgress.config.direction;
        this.started = new EventEmitter();
        this.completed = new EventEmitter();
    }
    Object.defineProperty(NgProgressComponent.prototype, "isStarted", {
        get: function () {
            return this.progressRef.isStarted;
        },
        enumerable: true,
        configurable: true
    });
    NgProgressComponent.prototype.ngOnChanges = function () {
        if (this.progressRef instanceof NgProgressRef) {
            // Update progress bar config when inputs change
            this.progressRef.setConfig({
                max: (this.max > 0 && this.max <= 100) ? this.max : 100,
                min: (this.min < 100 && this.min >= 0) ? this.min : 0,
                speed: this.speed,
                trickleSpeed: this.trickleSpeed,
                trickleFunc: this.trickleFunc,
                debounceTime: this.debounceTime
            });
        }
    };
    NgProgressComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Get progress bar service instance
        this.progressRef = this._ngProgress.ref(this.id, {
            max: this.max,
            min: this.min,
            speed: this.speed,
            trickleSpeed: this.trickleSpeed,
            debounceTime: this.debounceTime
        });
        // Subscribe to progress state
        this.state$ = this.progressRef.state.pipe(map(function (state) { return ({
            active: state.active,
            transform: "translate3d(" + state.value + "%,0,0)"
        }); }));
        // Subscribes to started and completed events on demand
        if (this.started.observers.length) {
            this._started = this.progressRef.started.subscribe(function () { return _this.started.emit(); });
        }
        if (this.completed.observers.length) {
            this._completed = this.progressRef.completed.subscribe(function () { return _this.completed.emit(); });
        }
    };
    NgProgressComponent.prototype.ngOnDestroy = function () {
        this._started.unsubscribe();
        this._completed.unsubscribe();
        if (this.progressRef instanceof NgProgressRef) {
            this.progressRef.destroy();
        }
    };
    NgProgressComponent.prototype.start = function () {
        this.progressRef.start();
    };
    NgProgressComponent.prototype.complete = function () {
        this.progressRef.complete();
    };
    NgProgressComponent.prototype.inc = function (n) {
        this.progressRef.inc(n);
    };
    NgProgressComponent.prototype.set = function (n) {
        this.progressRef.set(n);
    };
    NgProgressComponent.ctorParameters = function () { return [
        { type: NgProgress }
    ]; };
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "min", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "max", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "ease", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "color", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "speed", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "thick", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "fixed", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "meteor", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "spinner", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "trickleSpeed", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "debounceTime", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "trickleFunc", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "spinnerPosition", void 0);
    __decorate([
        Input()
    ], NgProgressComponent.prototype, "direction", void 0);
    __decorate([
        Output()
    ], NgProgressComponent.prototype, "started", void 0);
    __decorate([
        Output()
    ], NgProgressComponent.prototype, "completed", void 0);
    NgProgressComponent = __decorate([
        Component({
            selector: 'ng-progress',
            host: {
                'role': 'progressbar',
                '[attr.spinnerPosition]': 'spinnerPosition',
                '[attr.dir]': 'direction',
                '[attr.thick]': 'thick',
                '[attr.fixed]': 'fixed'
            },
            template: "\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n            [attr.active]=\"state.active\"\n            [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n                [style.transform]=\"state.transform\"\n                [style.backgroundColor]=\"color\"\n                [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n                [style.borderTopColor]=\"color\"\n                [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[dir=\"ltr+\"] .ng-meteor,:host[dir=ltr-] .ng-meteor{transform:rotate(3deg)}:host[dir=\"ltr+\"][thick=true] .ng-meteor,:host[dir=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[dir=\"ltr+\"] .ng-bar,:host[dir=\"rtl+\"] .ng-bar{margin-left:-100%}:host[dir=\"ltr+\"] .ng-meteor,:host[dir=\"rtl+\"] .ng-meteor{right:0}:host[dir=\"ltr+\"] .ng-meteor,:host[dir=rtl-] .ng-meteor{top:-3px}:host[dir=\"ltr+\"][thick=true] .ng-meteor,:host[dir=rtl-][thick=true] .ng-meteor{top:-4px}:host[dir=\"rtl+\"] .ng-meteor,:host[dir=ltr-] .ng-meteor{bottom:-3px}:host[dir=\"rtl+\"][thick=true] .ng-meteor,:host[dir=ltr-][thick=true] .ng-meteor{bottom:-4px}:host[dir=\"rtl+\"] .ng-bar-placeholder,:host[dir=ltr-] .ng-bar-placeholder{transform:rotate(180deg)}:host[dir=\"rtl+\"] .ng-spinner-icon,:host[dir=ltr-] .ng-spinner-icon{animation-direction:reverse}:host[dir=\"rtl+\"] .ng-meteor,:host[dir=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[dir=\"rtl+\"][thick=true] .ng-meteor,:host[dir=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;zoom:1;opacity:0}.ng-progress-bar[active=true]{opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:250ms linear infinite spinner-animation;animation:250ms linear infinite spinner-animation;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}"]
        })
    ], NgProgressComponent);
    return NgProgressComponent;
}());
export { NgProgressComponent };
//# sourceMappingURL=data:application/json;base64,