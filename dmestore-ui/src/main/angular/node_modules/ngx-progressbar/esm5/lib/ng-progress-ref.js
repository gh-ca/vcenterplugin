import { __assign, __read } from "tslib";
import { Subject, BehaviorSubject, timer, of, combineLatest, Subscription, EMPTY } from 'rxjs';
import { tap, delay, debounce, switchMap, takeUntil, finalize, filter } from 'rxjs/operators';
var NgProgressRef = /** @class */ (function () {
    function NgProgressRef(customConfig, _onDestroyCallback) {
        var _this = this;
        this._onDestroyCallback = _onDestroyCallback;
        // Progress start source event (used to cancel finalizing delays)
        this._started = new Subject();
        // Progress start event: stream that emits only when it hasn't already started
        this.started = this._started.pipe(filter(function () { return !_this.isStarted; }));
        // Progress ended source event
        this._completed = new Subject();
        // Progress start event: stream that emits only when it has already started
        this.completed = this._completed.pipe(filter(function () { return _this.isStarted; }));
        // Stream that increments and updates the progress state
        this._trickling = new Subject();
        // Stream that combines "_trickling" and "config" streams
        this._worker = Subscription.EMPTY;
        this._state = new BehaviorSubject({ active: false, value: 0 });
        this._config = new BehaviorSubject(customConfig);
        this.state = this._state.asObservable();
        this.config = this._state.asObservable();
        this._worker = combineLatest(this._trickling, this._config).pipe(debounce(function (_a) {
            var _b = __read(_a, 2), start = _b[0], config = _b[1];
            return timer(start ? config.debounceTime : 0);
        }), switchMap(function (_a) {
            var _b = __read(_a, 2), start = _b[0], config = _b[1];
            return start ? _this.onTrickling(config) : _this.onComplete(config);
        })).subscribe();
    }
    Object.defineProperty(NgProgressRef.prototype, "currState", {
        // Get current progress state
        get: function () {
            return this._state.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgProgressRef.prototype, "isStarted", {
        // Check if progress has started
        get: function () {
            return this.currState.active;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Start the progress
     */
    NgProgressRef.prototype.start = function () {
        this._started.next();
        this._trickling.next(true);
    };
    /**
     * Complete the progress
     */
    NgProgressRef.prototype.complete = function () {
        this._trickling.next(false);
    };
    /**
     * Increment the progress
     */
    NgProgressRef.prototype.inc = function (amount) {
        var n = this.currState.value;
        if (!this.isStarted) {
            this.start();
        }
        else {
            if (typeof amount !== 'number') {
                amount = this._config.value.trickleFunc(n);
            }
            this.set(n + amount);
        }
    };
    /**
     * Set the progress
     */
    NgProgressRef.prototype.set = function (n) {
        this.setState({ value: this.clamp(n), active: true });
    };
    /**
     * Set config
     */
    NgProgressRef.prototype.setConfig = function (config) {
        this._config.next(__assign(__assign({}, this._config.value), config));
    };
    /**
     * Destroy progress reference
     */
    NgProgressRef.prototype.destroy = function () {
        this._worker.unsubscribe();
        this._trickling.complete();
        this._state.complete();
        this._config.complete();
        this._started.complete();
        this._completed.complete();
        this._onDestroyCallback();
    };
    /**
     * Set progress state
     */
    NgProgressRef.prototype.setState = function (state) {
        this._state.next(__assign(__assign({}, this.currState), state));
    };
    /**
     * Clamps a value to be between min and max
     */
    NgProgressRef.prototype.clamp = function (n) {
        return Math.max(this._config.value.min, Math.min(this._config.value.max, n));
    };
    /**
     * Keeps incrementing the progress
     */
    NgProgressRef.prototype.onTrickling = function (config) {
        var _this = this;
        if (!this.isStarted) {
            this.set(this._config.value.min);
        }
        return timer(0, config.trickleSpeed).pipe(tap(function () { return _this.inc(); }));
    };
    /**
     * Completes then resets the progress
     */
    NgProgressRef.prototype.onComplete = function (config) {
        var _this = this;
        this._completed.next();
        return !this.isStarted ? EMPTY : of({}).pipe(
        // Complete the progress
        tap(function () { return _this.setState({ value: 100 }); }), 
        // Deactivate the progress after a tiny delay
        delay(config.speed * 1.7), tap(function () { return _this.setState({ active: false }); }), 
        // Use a tiny delay before resetting
        delay(config.speed), 
        // Force the progress to reset even it got cancelled
        finalize(function () { return _this.setState({ value: 0 }); }), 
        // Cancel any of the finalizing delays if the progress has started again
        takeUntil(this._started));
    };
    return NgProgressRef;
}());
export { NgProgressRef };
//# sourceMappingURL=data:application/json;base64,