import { __assign, __decorate, __param } from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress, NgProgressRef } from 'ngx-progressbar';
// import { NgProgress, NgProgressRef } from '../../src/public-api';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
var NgProgressInterceptor = /** @class */ (function () {
    function NgProgressInterceptor(ngProgress, config) {
        this.ngProgress = ngProgress;
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? __assign(__assign({}, this._config), config) : this._config;
    }
    NgProgressInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        this._progressRef = this.ngProgress.ref(this._config.id);
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(function () {
            _this._inProgressCount--;
            if (_this._inProgressCount === 0) {
                _this._progressRef.complete();
            }
        }));
    };
    /**
     * Check if request is silent.
     * @param req request
     */
    NgProgressInterceptor.prototype.checkUrl = function (req) {
        var url = req.url.toLowerCase();
        var found = this._config.silentApis.find(function (u) { return url.startsWith(u); });
        return !!found;
    };
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: NgProgress },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
    ]; };
    NgProgressInterceptor = __decorate([
        Injectable(),
        __param(1, Optional()), __param(1, Inject(NG_PROGRESS_HTTP_CONFIG))
    ], NgProgressInterceptor);
    return NgProgressInterceptor;
}());
export { NgProgressInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJvZ3Jlc3NiYXIvaHR0cC8iLCJzb3VyY2VzIjpbIm5nLXByb2dyZXNzLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUQsb0VBQW9FO0FBQ3BFLE9BQU8sRUFBd0IsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUc3RjtJQVNFLCtCQUFzQixVQUFzQixFQUErQyxNQUE2QjtRQUFsRyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBUHBDLHFCQUFnQixHQUFHLENBQUMsQ0FBQztRQUVaLFlBQU8sR0FBeUI7WUFDL0MsRUFBRSxFQUFFLE1BQU07WUFDVixVQUFVLEVBQUUsRUFBRTtTQUNmLENBQUM7UUFHQSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLHVCQUFLLElBQUksQ0FBQyxPQUFPLEdBQUssTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RFLENBQUM7SUFFRCx5Q0FBUyxHQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtRQUFsRCxpQkEyQkM7UUF6QkMsNEJBQTRCO1FBQzVCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUN4QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25GO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDM0I7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixRQUFRLENBQUM7WUFDUCxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN4QixJQUFJLEtBQUksQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLEVBQUU7Z0JBQy9CLEtBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDOUI7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNLLHdDQUFRLEdBQWhCLFVBQWlCLEdBQXFCO1FBQ3BDLElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDOztnQkF6Q2lDLFVBQVU7Z0RBQUcsUUFBUSxZQUFJLE1BQU0sU0FBQyx1QkFBdUI7O0lBVDlFLHFCQUFxQjtRQURqQyxVQUFVLEVBQUU7UUFVb0MsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUE7T0FUL0UscUJBQXFCLENBbURqQztJQUFELDRCQUFDO0NBQUEsQUFuREQsSUFtREM7U0FuRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTmdQcm9ncmVzcywgTmdQcm9ncmVzc1JlZiB9IGZyb20gJ25neC1wcm9ncmVzc2Jhcic7XG4vLyBpbXBvcnQgeyBOZ1Byb2dyZXNzLCBOZ1Byb2dyZXNzUmVmIH0gZnJvbSAnLi4vLi4vc3JjL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgTmdQcm9ncmVzc0h0dHBDb25maWcsIE5HX1BST0dSRVNTX0hUVFBfQ09ORklHIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy1odHRwLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIHByaXZhdGUgX2luUHJvZ3Jlc3NDb3VudCA9IDA7XG4gIHByaXZhdGUgX3Byb2dyZXNzUmVmOiBOZ1Byb2dyZXNzUmVmO1xuICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc6IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnID0ge1xuICAgIGlkOiAncm9vdCcsXG4gICAgc2lsZW50QXBpczogW11cbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbmdQcm9ncmVzczogTmdQcm9ncmVzcywgQE9wdGlvbmFsKCkgQEluamVjdChOR19QUk9HUkVTU19IVFRQX0NPTkZJRykgY29uZmlnPzogTmdQcm9ncmVzc0h0dHBDb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWcgPyB7Li4udGhpcy5fY29uZmlnLCAuLi5jb25maWd9IDogdGhpcy5fY29uZmlnO1xuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG5cbiAgICAvLyBJZ25vcmUgYnkgcmVxdWVzdCBoZWFkZXJzXG4gICAgaWYgKHJlcS5oZWFkZXJzLmhhcygnaWdub3JlUHJvZ3Jlc3NCYXInKSkge1xuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcS5jbG9uZSh7aGVhZGVyczogcmVxLmhlYWRlcnMuZGVsZXRlKCdpZ25vcmVQcm9ncmVzc0JhcicpfSkpO1xuICAgIH1cblxuICAgIC8vIElnbm9yZSBzaWxlbnQgYXBpIHJlcXVlc3RzXG4gICAgaWYgKHRoaXMuY2hlY2tVcmwocmVxKSkge1xuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XG4gICAgfVxuXG4gICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50Kys7XG5cbiAgICB0aGlzLl9wcm9ncmVzc1JlZiA9IHRoaXMubmdQcm9ncmVzcy5yZWYodGhpcy5fY29uZmlnLmlkKTtcbiAgICBpZiAoIXRoaXMuX3Byb2dyZXNzUmVmLmlzU3RhcnRlZCkge1xuICAgICAgdGhpcy5fcHJvZ3Jlc3NSZWYuc3RhcnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICB0aGlzLl9pblByb2dyZXNzQ291bnQtLTtcbiAgICAgICAgaWYgKHRoaXMuX2luUHJvZ3Jlc3NDb3VudCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX3Byb2dyZXNzUmVmLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiByZXF1ZXN0IGlzIHNpbGVudC5cbiAgICogQHBhcmFtIHJlcSByZXF1ZXN0XG4gICAqL1xuICBwcml2YXRlIGNoZWNrVXJsKHJlcTogSHR0cFJlcXVlc3Q8YW55Pikge1xuICAgIGNvbnN0IHVybCA9IHJlcS51cmwudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBmb3VuZCA9IHRoaXMuX2NvbmZpZy5zaWxlbnRBcGlzLmZpbmQoKHUpID0+IHVybC5zdGFydHNXaXRoKHUpKTtcbiAgICByZXR1cm4gISFmb3VuZDtcbiAgfVxufVxuIl19