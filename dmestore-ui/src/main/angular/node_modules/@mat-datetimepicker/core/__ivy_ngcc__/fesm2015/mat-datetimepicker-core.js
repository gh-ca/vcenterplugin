import { InjectionToken, Injectable, Optional, Inject, NgModule, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, ElementRef, NgZone, ChangeDetectorRef, ViewChild, ViewContainerRef, forwardRef, Directive } from '@angular/core';
import { DateAdapter, MAT_DATE_LOCALE, NativeDateModule, MatNativeDateModule } from '@angular/material/core';
import { A11yModule } from '@angular/cdk/a11y';
import { OverlayConfig, Overlay, OverlayModule } from '@angular/cdk/overlay';
import { DOCUMENT, CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE } from '@angular/cdk/keycodes';
import { MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY } from '@angular/material/datepicker';
import { first } from 'rxjs/operators';
import { trigger, state, style, transition, animate, keyframes } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ComponentPortal } from '@angular/cdk/portal';
import { Subject, Subscription, of, merge } from 'rxjs';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';
import { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';
import { MatFormField } from '@angular/material/form-field';

/**
 * @fileoverview added by tsickle
 * Generated from: adapter/datetime-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template D
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/datepicker';
import * as ɵngcc4 from '@angular/material/icon';
import * as ɵngcc5 from '@angular/cdk/a11y';
import * as ɵngcc6 from '@angular/material/dialog';
import * as ɵngcc7 from '@angular/cdk/overlay';
import * as ɵngcc8 from '@angular/cdk/bidi';
import * as ɵngcc9 from '@angular/material/form-field';
import * as ɵngcc10 from '@angular/material/button';

const _c0 = ["mat-datetimepicker-calendar-body", ""];
function MatDatetimepickerCalendarBody_tr_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", 2);
    ɵngcc0.ɵɵelementStart(1, "td", 3);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("colspan", ctx_r0.numCols);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.label);
} }
function MatDatetimepickerCalendarBody_tr_1_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("colspan", ctx_r4._firstRowOffset);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4._firstRowOffset >= ctx_r4.labelMinRequiredCells ? ctx_r4.label : "", " ");
} }
function MatDatetimepickerCalendarBody_tr_1_td_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 8);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendarBody_tr_1_td_2_Template_td_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const item_r6 = ctx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8._cellClicked(item_r6); });
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r6 = ctx.$implicit;
    const colIndex_r7 = ctx.index;
    const rowIndex_r3 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("mat-datetimepicker-calendar-body-active", ctx_r5._isActiveCell(rowIndex_r3, colIndex_r7))("mat-datetimepicker-calendar-body-disabled", !item_r6.enabled);
    ɵngcc0.ɵɵattribute("aria-disabled", !item_r6.enabled || null)("aria-label", item_r6.ariaLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("mat-datetimepicker-calendar-body-selected", ctx_r5.selectedValue === item_r6.value)("mat-datetimepicker-calendar-body-today", ctx_r5.todayValue === item_r6.value);
    ɵngcc0.ɵɵattribute("aria-selected", ctx_r5.selectedValue === item_r6.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r6.displayValue, " ");
} }
function MatDatetimepickerCalendarBody_tr_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", 4);
    ɵngcc0.ɵɵtemplate(1, MatDatetimepickerCalendarBody_tr_1_td_1_Template, 2, 2, "td", 5);
    ɵngcc0.ɵɵtemplate(2, MatDatetimepickerCalendarBody_tr_1_td_2_Template, 3, 12, "td", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r2 = ctx.$implicit;
    const rowIndex_r3 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", rowIndex_r3 === 0 && ctx_r1._firstRowOffset);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", row_r2);
} }
function MatDatetimepickerCalendar_div_1_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
} }
function MatDatetimepickerCalendar_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_div_1_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9._yearClicked(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, MatDatetimepickerCalendar_div_1_mat_icon_2_Template, 2, 0, "mat-icon", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r0.currentView === "year" || ctx_r0.currentView === "multi-year");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0._yearLabel, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.multiYearSelector || ctx_r0.type === "year");
} }
function MatDatetimepickerCalendar_span_3_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 12);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_3_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11._dateClicked(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r1.currentView === "month")("not-clickable", ctx_r1.type === "month");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1._dateLabel);
} }
function MatDatetimepickerCalendar_span_4_span_7_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 17);
    ɵngcc0.ɵɵelementStart(1, "span", 18);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_span_7_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14._ampmClicked("AM"); });
    ɵngcc0.ɵɵtext(2, "AM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3, "/");
    ɵngcc0.ɵɵelementStart(4, "span", 18);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_span_7_Template_span_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16._ampmClicked("PM"); });
    ɵngcc0.ɵɵtext(5, "PM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", ctx_r13._AMPM === "AM");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("active", ctx_r13._AMPM === "PM");
} }
function MatDatetimepickerCalendar_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 13);
    ɵngcc0.ɵɵelementStart(1, "span", 14);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17._hoursClicked(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3, ":");
    ɵngcc0.ɵɵelementStart(4, "span", 15);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_Template_span_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19._minutesClicked(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "br");
    ɵngcc0.ɵɵtemplate(7, MatDatetimepickerCalendar_span_4_span_7_Template, 6, 4, "span", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r2.currentView === "clock");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", ctx_r2._clockView == "hour");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2._hoursLabel);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r2._clockView == "minute");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2._minutesLabel);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.twelvehour);
} }
function MatDatetimepickerCalendar_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵelementStart(2, "div", 21);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_div_6_Template_div_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20._previousClicked(); });
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(3, "svg", 22);
    ɵngcc0.ɵɵelement(4, "path", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(5, "div", 24);
    ɵngcc0.ɵɵlistener("@slideCalendar.done", function MatDatetimepickerCalendar_div_6_Template_div_animation_slideCalendar_done_5_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22._calendarStateDone(); });
    ɵngcc0.ɵɵelementStart(6, "strong");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 25);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_div_6_Template_div_click_8_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23._nextClicked(); });
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(9, "svg", 22);
    ɵngcc0.ɵɵelement(10, "path", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r3._previousEnabled());
    ɵngcc0.ɵɵattribute("aria-disabled", !ctx_r3._previousEnabled())("aria-label", ctx_r3._ariaLabelPrev);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("@slideCalendar", ctx_r3._calendarState);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3._monthYearLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r3._nextEnabled());
    ɵngcc0.ɵɵattribute("aria-disabled", !ctx_r3._nextEnabled())("aria-label", ctx_r3._ariaLabelNext);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-month-view", 27);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template_mat_datetimepicker_month_view__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24._userSelected(); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template_mat_datetimepicker_month_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26._dateSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("activeDate", ctx_r4._activeDate)("dateFilter", ctx_r4._dateFilterForViews)("selected", ctx_r4.selected)("type", ctx_r4.type);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-year-view", 27);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template_mat_datetimepicker_year_view__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27._userSelected(); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template_mat_datetimepicker_year_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29._monthSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("activeDate", ctx_r5._activeDate)("dateFilter", ctx_r5._dateFilterForViews)("selected", ctx_r5.selected)("type", ctx_r5.type);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-multi-year-view", 28);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template_mat_datetimepicker_multi_year_view__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30._userSelected(); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template_mat_datetimepicker_multi_year_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32._yearSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("activeDate", ctx_r6._activeDate)("dateFilter", ctx_r6._dateFilterForViews)("maxDate", ctx_r6.maxDate)("minDate", ctx_r6.minDate)("selected", ctx_r6.selected)("type", ctx_r6.type);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-clock", 29);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template_mat_datetimepicker_clock__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33._userSelected(); })("activeDateChange", function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template_mat_datetimepicker_clock_activeDateChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35._onActiveDateChange($event); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template_mat_datetimepicker_clock_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r36 = ɵngcc0.ɵɵnextContext(); return ctx_r36._timeSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dateFilter", ctx_r7.dateFilter)("interval", ctx_r7.timeInterval)("maxDate", ctx_r7.maxDate)("minDate", ctx_r7.minDate)("selected", ctx_r7._activeDate)("startView", ctx_r7._clockView)("twelvehour", ctx_r7.twelvehour);
} }
function MatDatetimepickerClock_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("font-size", item_r2.fontSize)("left", item_r2.left + "%")("top", item_r2.top + "%");
    ɵngcc0.ɵɵclassProp("mat-datetimepicker-clock-cell-disabled", !item_r2.enabled)("mat-datetimepicker-clock-cell-selected", ctx_r0._selectedHour == item_r2.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r2.displayValue);
} }
function MatDatetimepickerClock_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("left", item_r3.left + "%")("top", item_r3.top + "%");
    ɵngcc0.ɵɵclassProp("mat-datetimepicker-clock-cell-disabled", !item_r3.enabled)("mat-datetimepicker-clock-cell-selected", ctx_r1._selectedMinute == item_r3.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r3.displayValue);
} }
function MatDatetimepickerToggle__svg_svg_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 4);
    ɵngcc0.ɵɵelement(1, "path", 5);
    ɵngcc0.ɵɵelementEnd();
} }
function MatDatetimepickerToggle__svg_svg_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 4);
    ɵngcc0.ɵɵelement(1, "path", 6);
    ɵngcc0.ɵɵelementEnd();
} }
function MatDatetimepickerToggle__svg_svg_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 4);
    ɵngcc0.ɵɵelement(1, "path", 7);
    ɵngcc0.ɵɵelement(2, "path", 8);
    ɵngcc0.ɵɵelementEnd();
} }
function MatDatetimepickerMonthView_th_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r1 = ctx.$implicit;
    ɵngcc0.ɵɵattribute("aria-label", day_r1.long);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(day_r1.narrow);
} }
class DatetimeAdapter extends DateAdapter {
    /**
     * @param {?} _delegate
     */
    constructor(_delegate) {
        super();
        this._delegate = _delegate;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    getValidDateOrNull(obj) {
        return (this.isDateInstance(obj) && this.isValid(obj)) ? obj : null;
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    compareDatetime(first, second) {
        return this.compareDate(first, second) ||
            this.getHour(first) - this.getHour(second) ||
            this.getMinute(first) - this.getMinute(second);
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameDatetime(first, second) {
        if (first && second) {
            /** @type {?} */
            const firstValid = this.isValid(first);
            /** @type {?} */
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDatetime(first, second);
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameYear(first, second) {
        return first && second && this.getYear(first) === this.getYear(second);
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameDay(first, second) {
        return first && second && this.getDate(first) === this.getDate(second) && this.sameMonthAndYear(first, second);
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameHour(first, second) {
        return first && second && this.getHour(first) === this.getHour(second) && this.sameDay(first, second);
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameMinute(first, second) {
        return first && second && this.getMinute(first) === this.getMinute(second) && this.sameHour(first, second);
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameMonthAndYear(first, second) {
        if (first && second) {
            /** @type {?} */
            const firstValid = this.isValid(first);
            /** @type {?} */
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !(this.getYear(first) - this.getYear(second) ||
                    this.getMonth(first) - this.getMonth(second));
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    // delegate
    /**
     * @param {?} date
     * @return {?}
     */
    clone(date) {
        return this._delegate.clone(date);
    }
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    addCalendarYears(date, years) {
        return this._delegate.addCalendarYears(date, years);
    }
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    addCalendarMonths(date, months) {
        return this._delegate.addCalendarMonths(date, months);
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    addCalendarDays(date, days) {
        return this._delegate.addCalendarDays(date, days);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getYear(date) {
        return this._delegate.getYear(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getMonth(date) {
        return this._delegate.getMonth(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDate(date) {
        return this._delegate.getDate(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayOfWeek(date) {
        return this._delegate.getDayOfWeek(date);
    }
    /**
     * @param {?} style
     * @return {?}
     */
    getMonthNames(style) {
        return this._delegate.getMonthNames(style);
    }
    /**
     * @return {?}
     */
    getDateNames() {
        return this._delegate.getDateNames();
    }
    /**
     * @param {?} style
     * @return {?}
     */
    getDayOfWeekNames(style) {
        return this._delegate.getDayOfWeekNames(style);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getYearName(date) {
        return this._delegate.getYearName(date);
    }
    /**
     * @return {?}
     */
    getFirstDayOfWeek() {
        return this._delegate.getFirstDayOfWeek();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getNumDaysInMonth(date) {
        return this._delegate.getNumDaysInMonth(date);
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    createDate(year, month, date) {
        return this._delegate.createDate(year, month, date);
    }
    /**
     * @return {?}
     */
    today() {
        return this._delegate.today();
    }
    /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    parse(value, parseFormat) {
        return this._delegate.parse(value, parseFormat);
    }
    /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    format(date, displayFormat) {
        return this._delegate.format(date, displayFormat);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    toIso8601(date) {
        return this._delegate.toIso8601(date);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isDateInstance(obj) {
        return this._delegate.isDateInstance(obj);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isValid(date) {
        return this._delegate.isValid(date);
    }
    /**
     * @return {?}
     */
    invalid() {
        return this._delegate.invalid();
    }
    /**
     * @param {?} date
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    clampDate(date, min, max) {
        if (min && this.compareDatetime(date, min) < 0) {
            return min;
        }
        if (max && this.compareDatetime(date, max) > 0) {
            return max;
        }
        return date;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    DatetimeAdapter.prototype._delegate;
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    DatetimeAdapter.prototype.getHour = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    DatetimeAdapter.prototype.getMinute = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    DatetimeAdapter.prototype.getFirstDateOfMonth = function (date) { };
    /**
     * @abstract
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    DatetimeAdapter.prototype.isInNextMonth = function (startDate, endDate) { };
    /**
     * @abstract
     * @return {?}
     */
    DatetimeAdapter.prototype.getHourNames = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DatetimeAdapter.prototype.getMinuteNames = function () { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    DatetimeAdapter.prototype.addCalendarHours = function (date, months) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    DatetimeAdapter.prototype.addCalendarMinutes = function (date, months) { };
    /**
     * @abstract
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @param {?} hour
     * @param {?} minute
     * @return {?}
     */
    DatetimeAdapter.prototype.createDatetime = function (year, month, date, hour, minute) { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: adapter/datetime-formats.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MatDatetimeFormats() { }
if (false) {
    /** @type {?} */
    MatDatetimeFormats.prototype.parse;
    /** @type {?} */
    MatDatetimeFormats.prototype.display;
}
/** @type {?} */
const MAT_DATETIME_FORMATS = new InjectionToken("mat-datetime-formats");

/**
 * @fileoverview added by tsickle
 * Generated from: adapter/native-datetime-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = /**
 * @param {?} i
 * @return {?}
 */
i => String(i);
/**
 * The default hour names to use if Intl API is not available.
 * @type {?}
 */
const DEFAULT_HOUR_NAMES = range(24, (ɵ0));
const ɵ1 = /**
 * @param {?} i
 * @return {?}
 */
i => String(i);
/**
 * The default minute names to use if Intl API is not available.
 * @type {?}
 */
const DEFAULT_MINUTE_NAMES = range(60, (ɵ1));
/**
 * @template T
 * @param {?} length
 * @param {?} valueFunction
 * @return {?}
 */
function range(length, valueFunction) {
    /** @type {?} */
    const valuesArray = Array(length);
    for (let i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
    }
    return valuesArray;
}
class NativeDatetimeAdapter extends DatetimeAdapter {
    /**
     * @param {?} matDateLocale
     * @param {?} _delegate
     */
    constructor(matDateLocale, _delegate) {
        super(_delegate);
        this.setLocale(matDateLocale);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    clone(date) {
        return this.createDatetime(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHour(date), this.getMinute(date));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getHour(date) {
        return date.getHours();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getMinute(date) {
        return date.getMinutes();
    }
    /**
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    isInNextMonth(startDate, endDate) {
        /** @type {?} */
        const nextMonth = this.getDateInNextMonth(startDate);
        return this.sameMonthAndYear(nextMonth, endDate);
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @param {?} hour
     * @param {?} minute
     * @return {?}
     */
    createDatetime(year, month, date, hour, minute) {
        // Check for invalid month and date (except upper bound on date which we have to check after
        // creating the Date).
        if (month < 0 || month > 11) {
            throw Error(`Invalid month index "${month}". Month index has to be between 0 and 11.`);
        }
        if (date < 1) {
            throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
        }
        if (hour < 0 || hour > 23) {
            throw Error(`Invalid hour "${hour}". Hour has to be between 0 and 23.`);
        }
        if (minute < 0 || minute > 59) {
            throw Error(`Invalid minute "${minute}". Minute has to be between 0 and 59.`);
        }
        /** @type {?} */
        const result = this._createDateWithOverflow(year, month, date, hour, minute);
        // Check that the date wasn't above the upper bound for the month, causing the month to overflow
        if (result.getMonth() !== month) {
            throw Error(`Invalid date "${date}" for month with index "${month}".`);
        }
        return result;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getFirstDateOfMonth(date) {
        /** @type {?} */
        const result = new Date();
        result.setFullYear(date.getFullYear(), date.getMonth(), 1);
        return result;
    }
    /**
     * @return {?}
     */
    getHourNames() {
        return DEFAULT_HOUR_NAMES;
    }
    /**
     * @return {?}
     */
    getMinuteNames() {
        return DEFAULT_MINUTE_NAMES;
    }
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    addCalendarYears(date, years) {
        return this.addCalendarMonths(date, years * 12);
    }
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    addCalendarMonths(date, months) {
        /** @type {?} */
        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date), this.getHour(date), this.getMinute(date));
        // It's possible to wind up in the wrong month if the original month has more days than the new
        // month. In this case we want to go to the last day of the desired month.
        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
        // guarantee this.
        if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {
            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0, this.getHour(date), this.getMinute(date));
        }
        return newDate;
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    addCalendarDays(date, days) {
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days, this.getHour(date), this.getMinute(date));
    }
    /**
     * @param {?} date
     * @param {?} hours
     * @return {?}
     */
    addCalendarHours(date, hours) {
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHour(date) + hours, this.getMinute(date));
    }
    /**
     * @param {?} date
     * @param {?} minutes
     * @return {?}
     */
    addCalendarMinutes(date, minutes) {
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHour(date), this.getMinute(date) + minutes);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    toIso8601(date) {
        return super.toIso8601(date) + "T" + [
            this._2digit(date.getUTCHours()),
            this._2digit(date.getUTCMinutes())
        ].join(":");
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getDateInNextMonth(date) {
        return new Date(date.getFullYear(), date.getMonth() + 1, 1, date.getHours(), date.getMinutes());
    }
    /**
     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
     * other browsers do not. We remove them to make output consistent and because they interfere with
     * date parsing.
     * @private
     * @param {?} str The string to strip direction characters from.
     * @return {?} The stripped string.
     */
    _stripDirectionalityCharacters(str) {
        return str.replace(/[\u200e\u200f]/g, "");
    }
    /**
     * Pads a number to make it two digits.
     * @private
     * @param {?} n The number to pad.
     * @return {?} The padded number.
     */
    _2digit(n) {
        return ("00" + n).slice(-2);
    }
    /**
     * Creates a date but allows the month and date to overflow.
     * @private
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @param {?} hours
     * @param {?} minutes
     * @return {?}
     */
    _createDateWithOverflow(year, month, date, hours, minutes) {
        /** @type {?} */
        const result = new Date(year, month, date, hours, minutes);
        // We need to correct for the fact that JS native Date treats years in range [0, 99] as
        // abbreviations for 19xx.
        if (year >= 0 && year < 100) {
            result.setFullYear(this.getYear(result) - 1900);
        }
        return result;
    }
}
NativeDatetimeAdapter.ɵfac = function NativeDatetimeAdapter_Factory(t) { return new (t || NativeDatetimeAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(ɵngcc1.DateAdapter)); };
NativeDatetimeAdapter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NativeDatetimeAdapter, factory: NativeDatetimeAdapter.ɵfac });
/** @nocollapse */
NativeDatetimeAdapter.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },
    { type: DateAdapter }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeDatetimeAdapter, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATE_LOCALE]
            }] }, { type: ɵngcc1.DateAdapter }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: adapter/native-datetime-formats.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MAT_NATIVE_DATETIME_FORMATS = {
    parse: {},
    display: {
        dateInput: { year: "numeric", month: "2-digit", day: "2-digit" },
        monthInput: { month: "long" },
        datetimeInput: { year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit" },
        timeInput: { hour: "2-digit", minute: "2-digit" },
        monthYearLabel: { year: "numeric", month: "short" },
        dateA11yLabel: { year: "numeric", month: "long", day: "numeric" },
        monthYearA11yLabel: { year: "numeric", month: "long" },
        popupHeaderDateLabel: { weekday: "short", month: "short", day: "2-digit" }
    }
};

/**
 * @fileoverview added by tsickle
 * Generated from: adapter/adapter.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable max-classes-per-file
class NativeDatetimeModule {
}
NativeDatetimeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NativeDatetimeModule });
NativeDatetimeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NativeDatetimeModule_Factory(t) { return new (t || NativeDatetimeModule)(); }, providers: [
        {
            provide: DatetimeAdapter,
            useClass: NativeDatetimeAdapter
        }
    ], imports: [[NativeDateModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NativeDatetimeModule, { imports: function () { return [NativeDateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeDatetimeModule, [{
        type: NgModule,
        args: [{
                imports: [NativeDateModule],
                providers: [
                    {
                        provide: DatetimeAdapter,
                        useClass: NativeDatetimeAdapter
                    }
                ]
            }]
    }], null, null); })();
const ɵ0$1 = MAT_NATIVE_DATETIME_FORMATS;
class MatNativeDatetimeModule {
}
MatNativeDatetimeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatNativeDatetimeModule });
MatNativeDatetimeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatNativeDatetimeModule_Factory(t) { return new (t || MatNativeDatetimeModule)(); }, providers: [{ provide: MAT_DATETIME_FORMATS, useValue: ɵ0$1 }], imports: [[
            NativeDatetimeModule,
            MatNativeDateModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatNativeDatetimeModule, { imports: function () { return [NativeDatetimeModule, MatNativeDateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNativeDatetimeModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NativeDatetimeModule,
                    MatNativeDateModule
                ],
                providers: [{ provide: MAT_DATETIME_FORMATS, useValue: ɵ0$1 }]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: adapter/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/datetimepicker-animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This animation fades in the background color and text content of the
 * select's options. It is time delayed to occur 100ms after the overlay
 * panel has transformed in.
 * @type {?}
 */
const fadeInContent = trigger("fadeInContent", [
    state("showing", style({ opacity: 1 })),
    transition("void => showing", [
        style({ opacity: 0 }),
        animate(`150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)
    ])
]);
/** @type {?} */
const slideCalendar = trigger("slideCalendar", [
    transition("* => left", [
        animate(180, keyframes([
            style({ transform: "translateX(100%)", offset: 0.5 }),
            style({ transform: "translateX(-100%)", offset: 0.51 }),
            style({ transform: "translateX(0)", offset: 1 })
        ]))
    ]),
    transition("* => right", [
        animate(180, keyframes([
            style({ transform: "translateX(-100%)", offset: 0.5 }),
            style({ transform: "translateX(100%)", offset: 0.51 }),
            style({ transform: "translateX(0)", offset: 1 })
        ]))
    ])
]);

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/datetimepicker-errors.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 * @param {?} provider
 * @return {?}
 */
function createMissingDateImplError(provider) {
    return Error(`MatDatetimepicker: No provider found for ${provider}. You must import one of the following ` +
        `modules at your application root: MatNativeDatetimeModule, MatMomentDatetimeModule, or provide a ` +
        `custom implementation.`);
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/datetimepicker-filtertype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const MatDatetimepickerFilterType = {
    DATE: 0, HOUR: 1, MINUTE: 2,
};
MatDatetimepickerFilterType[MatDatetimepickerFilterType.DATE] = 'DATE';
MatDatetimepickerFilterType[MatDatetimepickerFilterType.HOUR] = 'HOUR';
MatDatetimepickerFilterType[MatDatetimepickerFilterType.MINUTE] = 'MINUTE';

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/calendar-body.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An internal class that represents the data corresponding to a single calendar cell.
 * \@docs-private
 */
class MatDatetimepickerCalendarCell {
    /**
     * @param {?} value
     * @param {?} displayValue
     * @param {?} ariaLabel
     * @param {?} enabled
     */
    constructor(value, displayValue, ariaLabel, enabled) {
        this.value = value;
        this.displayValue = displayValue;
        this.ariaLabel = ariaLabel;
        this.enabled = enabled;
    }
}
if (false) {
    /** @type {?} */
    MatDatetimepickerCalendarCell.prototype.value;
    /** @type {?} */
    MatDatetimepickerCalendarCell.prototype.displayValue;
    /** @type {?} */
    MatDatetimepickerCalendarCell.prototype.ariaLabel;
    /** @type {?} */
    MatDatetimepickerCalendarCell.prototype.enabled;
}
/**
 * An internal component used to display calendar data in a table.
 * \@docs-private
 */
class MatDatetimepickerCalendarBody {
    constructor() {
        /**
         * The number of columns in the table.
         */
        this.numCols = 7;
        /**
         * Whether to allow selection of disabled cells.
         */
        this.allowDisabledSelection = false;
        /**
         * The cell number of the active cell in the table.
         */
        this.activeCell = 0;
        /**
         * Emits when a new value is selected.
         */
        this.selectedValueChange = new EventEmitter();
    }
    /**
     * The number of blank cells to put at the beginning for the first row.
     * @return {?}
     */
    get _firstRowOffset() {
        return this.rows && this.rows.length && this.rows[0].length ?
            this.numCols - this.rows[0].length : 0;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    _cellClicked(cell) {
        if (!this.allowDisabledSelection && !cell.enabled) {
            return;
        }
        this.selectedValueChange.emit(cell.value);
    }
    /**
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    _isActiveCell(rowIndex, colIndex) {
        /** @type {?} */
        let cellNumber = rowIndex * this.numCols + colIndex;
        // Account for the fact that the first row may not have as many cells.
        if (rowIndex) {
            cellNumber -= this._firstRowOffset;
        }
        return cellNumber === this.activeCell;
    }
}
MatDatetimepickerCalendarBody.ɵfac = function MatDatetimepickerCalendarBody_Factory(t) { return new (t || MatDatetimepickerCalendarBody)(); };
MatDatetimepickerCalendarBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerCalendarBody, selectors: [["", "mat-datetimepicker-calendar-body", ""]], hostAttrs: [1, "mat-datetimepicker-calendar-body"], inputs: { numCols: "numCols", allowDisabledSelection: "allowDisabledSelection", activeCell: "activeCell", label: "label", rows: "rows", todayValue: "todayValue", selectedValue: "selectedValue", labelMinRequiredCells: "labelMinRequiredCells" }, outputs: { selectedValueChange: "selectedValueChange" }, attrs: _c0, decls: 2, vars: 2, consts: [["aria-hidden", "true", 4, "ngIf"], ["role", "row", 4, "ngFor", "ngForOf"], ["aria-hidden", "true"], [1, "mat-datetimepicker-calendar-body-label"], ["role", "row"], ["aria-hidden", "true", "class", "mat-datetimepicker-calendar-body-label", 4, "ngIf"], ["class", "mat-datetimepicker-calendar-body-cell", "role", "button", 3, "mat-datetimepicker-calendar-body-active", "mat-datetimepicker-calendar-body-disabled", "click", 4, "ngFor", "ngForOf"], ["aria-hidden", "true", 1, "mat-datetimepicker-calendar-body-label"], ["role", "button", 1, "mat-datetimepicker-calendar-body-cell", 3, "click"], [1, "mat-datetimepicker-calendar-body-cell-content"]], template: function MatDatetimepickerCalendarBody_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MatDatetimepickerCalendarBody_tr_0_Template, 3, 2, "tr", 0);
        ɵngcc0.ɵɵtemplate(1, MatDatetimepickerCalendarBody_tr_1_Template, 3, 2, "tr", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx._firstRowOffset < ctx.labelMinRequiredCells);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.rows);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf], styles: [".mat-datetimepicker-calendar-body{font-size:13px;min-width:224px}.mat-datetimepicker-calendar-body-label{color:rgba(0,0,0,.54);height:0;line-height:0;padding:7.1428571429% 0 7.1428571429% 7.1428571429%;text-align:left;transform:translateX(-6px)}.mat-datetimepicker-calendar-body-cell{cursor:pointer;height:0;line-height:0;outline:none;padding:7.1428571429% 0;position:relative;text-align:center;width:14.2857142857%}.mat-datetimepicker-calendar-body-disabled{cursor:default;pointer-events:none}.mat-datetimepicker-calendar-body-cell-content{align-items:center;border:1px solid transparent;border-radius:50px;box-sizing:border-box;color:rgba(0,0,0,.87);display:flex;height:90%;justify-content:center;left:5%;position:absolute;top:5%;width:90%}.mat-datetimepicker-calendar-body-disabled>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected){color:rgba(0,0,0,.38)}.mat-datetimepicker-calendar-body-active>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected),:not(.mat-datetimepicker-calendar-body-disabled):hover>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected){background-color:rgba(0,0,0,.12)}.mat-datetimepicker-calendar-body-disabled>.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected){border-color:rgba(0,0,0,.18)}[dir=rtl] .mat-datetimepicker-calendar-body-label{padding:0 7.1428571429% 0 0;text-align:right;transform:translateX(6px)}"], encapsulation: 2, changeDetection: 0 });
MatDatetimepickerCalendarBody.propDecorators = {
    label: [{ type: Input }],
    rows: [{ type: Input }],
    todayValue: [{ type: Input }],
    selectedValue: [{ type: Input }],
    labelMinRequiredCells: [{ type: Input }],
    numCols: [{ type: Input }],
    allowDisabledSelection: [{ type: Input }],
    activeCell: [{ type: Input }],
    selectedValueChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerCalendarBody, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: "[mat-datetimepicker-calendar-body]",
                template: "<!--\r\n  If there's not enough space in the first row, create a separate label row. We mark this row as\r\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\r\n-->\r\n<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\r\n  <td [attr.colspan]=\"numCols\" class=\"mat-datetimepicker-calendar-body-label\">{{ label }}</td>\r\n</tr>\r\n\r\n<!-- Create the first row separately so we can include a special spacer cell. -->\r\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\r\n  <!--\r\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\r\n  -->\r\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\r\n      [attr.colspan]=\"_firstRowOffset\"\r\n      aria-hidden=\"true\"\r\n      class=\"mat-datetimepicker-calendar-body-label\">\r\n    {{ _firstRowOffset >= labelMinRequiredCells ? label : '' }}\r\n  </td>\r\n  <td (click)=\"_cellClicked(item)\"\r\n      *ngFor=\"let item of row; let colIndex = index\"\r\n      [attr.aria-disabled]=\"!item.enabled || null\"\r\n      [attr.aria-label]=\"item.ariaLabel\"\r\n      [class.mat-datetimepicker-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\r\n      [class.mat-datetimepicker-calendar-body-disabled]=\"!item.enabled\"\r\n      class=\"mat-datetimepicker-calendar-body-cell\"\r\n      role=\"button\">\r\n    <div [attr.aria-selected]=\"selectedValue === item.value\"\r\n         [class.mat-datetimepicker-calendar-body-selected]=\"selectedValue === item.value\"\r\n         [class.mat-datetimepicker-calendar-body-today]=\"todayValue === item.value\"\r\n         class=\"mat-datetimepicker-calendar-body-cell-content\">\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </td>\r\n</tr>\r\n",
                host: {
                    "class": "mat-datetimepicker-calendar-body"
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mat-datetimepicker-calendar-body{font-size:13px;min-width:224px}.mat-datetimepicker-calendar-body-label{color:rgba(0,0,0,.54);height:0;line-height:0;padding:7.1428571429% 0 7.1428571429% 7.1428571429%;text-align:left;transform:translateX(-6px)}.mat-datetimepicker-calendar-body-cell{cursor:pointer;height:0;line-height:0;outline:none;padding:7.1428571429% 0;position:relative;text-align:center;width:14.2857142857%}.mat-datetimepicker-calendar-body-disabled{cursor:default;pointer-events:none}.mat-datetimepicker-calendar-body-cell-content{align-items:center;border:1px solid transparent;border-radius:50px;box-sizing:border-box;color:rgba(0,0,0,.87);display:flex;height:90%;justify-content:center;left:5%;position:absolute;top:5%;width:90%}.mat-datetimepicker-calendar-body-disabled>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected){color:rgba(0,0,0,.38)}.mat-datetimepicker-calendar-body-active>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected),:not(.mat-datetimepicker-calendar-body-disabled):hover>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected){background-color:rgba(0,0,0,.12)}.mat-datetimepicker-calendar-body-disabled>.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected){border-color:rgba(0,0,0,.18)}[dir=rtl] .mat-datetimepicker-calendar-body-label{padding:0 7.1428571429% 0 0;text-align:right;transform:translateX(6px)}"]
            }]
    }], function () { return []; }, { numCols: [{
            type: Input
        }], allowDisabledSelection: [{
            type: Input
        }], activeCell: [{
            type: Input
        }], selectedValueChange: [{
            type: Output
        }], label: [{
            type: Input
        }], rows: [{
            type: Input
        }], todayValue: [{
            type: Input
        }], selectedValue: [{
            type: Input
        }], labelMinRequiredCells: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * The label for the table. (e.g. "Jan 2017").
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.label;
    /**
     * The cells to display in the table.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.rows;
    /**
     * The value in the table that corresponds to today.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.todayValue;
    /**
     * The value in the table that is currently selected.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.selectedValue;
    /**
     * The minimum number of free cells needed to fit the label in the first row.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.labelMinRequiredCells;
    /**
     * The number of columns in the table.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.numCols;
    /**
     * Whether to allow selection of disabled cells.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.allowDisabledSelection;
    /**
     * The cell number of the active cell in the table.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.activeCell;
    /**
     * Emits when a new value is selected.
     * @type {?}
     */
    MatDatetimepickerCalendarBody.prototype.selectedValueChange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/multi-year-view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const yearsPerPage = 24;
/** @type {?} */
const yearsPerRow = 4;
/**
 * An internal component used to display multiple years in the datepicker.
 * \@docs-private
 * @template D
 */
class MatDatetimepickerMultiYearView {
    /**
     * @param {?} _adapter
     * @param {?} _dateFormats
     */
    constructor(_adapter, _dateFormats) {
        this._adapter = _adapter;
        this._dateFormats = _dateFormats;
        this._userSelection = new EventEmitter();
        this.type = "date";
        /**
         * Emits when a new month is selected.
         */
        this.selectedChange = new EventEmitter();
        if (!this._adapter) {
            throw createMissingDateImplError("DatetimeAdapter");
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError("MAT_DATETIME_FORMATS");
        }
        this._activeDate = this._adapter.today();
    }
    /**
     * The date to display in this multi year view
     * @return {?}
     */
    get activeDate() {
        return this._activeDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set activeDate(value) {
        /** @type {?} */
        let oldActiveDate = this._activeDate;
        this._activeDate = value || this._adapter.today();
        if (oldActiveDate && this._activeDate &&
            !isSameMultiYearView(this._adapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {
            this._init();
        }
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = value;
        this._selectedYear = this._selected && this._adapter.getYear(this._selected);
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get minDate() {
        return this._minDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._adapter.deserialize(value));
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._adapter.deserialize(value));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._init();
    }
    /**
     * Handles when a new year is selected.
     * @param {?} year
     * @return {?}
     */
    _yearSelected(year) {
        /** @type {?} */
        const month = this._adapter.getMonth(this.activeDate);
        /** @type {?} */
        const normalizedDate = this._adapter.createDatetime(year, month, 1, 0, 0);
        this.selectedChange.emit(this._adapter.createDatetime(year, month, Math.min(this._adapter.getDate(this.activeDate), this._adapter.getNumDaysInMonth(normalizedDate)), this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate)));
        if (this.type === "year") {
            this._userSelection.emit();
        }
    }
    /**
     * @return {?}
     */
    _getActiveCell() {
        return getActiveOffset(this._adapter, this.activeDate, this.minDate, this.maxDate);
    }
    /**
     * @return {?}
     */
    _calendarStateDone() {
        this._calendarState = "";
    }
    /**
     * Initializes this year view.
     * @private
     * @return {?}
     */
    _init() {
        this._todayYear = this._adapter.getYear(this._adapter.today());
        this._yearLabel = this._adapter.getYearName(this.activeDate);
        /** @type {?} */
        const activeYear = this._adapter.getYear(this.activeDate);
        /** @type {?} */
        const minYearOfPage = activeYear - getActiveOffset(this._adapter, this.activeDate, this.minDate, this.maxDate);
        this._years = [];
        for (let i = 0, row = []; i < yearsPerPage; i++) {
            row.push(minYearOfPage + i);
            if (row.length == yearsPerRow) {
                this._years.push(row.map((/**
                 * @param {?} year
                 * @return {?}
                 */
                year => this._createCellForYear(year))));
                row = [];
            }
        }
    }
    /**
     * Creates an MatDatetimepickerCalendarCell for the given year.
     * @private
     * @param {?} year
     * @return {?}
     */
    _createCellForYear(year) {
        /** @type {?} */
        let yearName = this._adapter.getYearName(this._adapter.createDate(year, 0, 1));
        return new MatDatetimepickerCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));
    }
    /**
     * Whether the given year is enabled.
     * @private
     * @param {?} year
     * @return {?}
     */
    _shouldEnableYear(year) {
        // disable if the year is greater than maxDate lower than minDate
        if (year === undefined || year === null ||
            (this.maxDate && year > this._adapter.getYear(this.maxDate)) ||
            (this.minDate && year < this._adapter.getYear(this.minDate))) {
            return false;
        }
        // enable if it reaches here and there's no filter defined
        if (!this.dateFilter) {
            return true;
        }
        /** @type {?} */
        const firstOfYear = this._adapter.createDate(year, 0, 1);
        // If any date in the year is enabled count the year as enabled.
        for (let date = firstOfYear; this._adapter.getYear(date) == year; date = this._adapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Gets the year in this years range that the given Date falls on.
     * Returns null if the given Date is not in this range.
     * @private
     * @param {?} date
     * @return {?}
     */
    _getYearInCurrentRange(date) {
        /** @type {?} */
        const year = this._adapter.getYear(date);
        return this._isInRange(year) ?
            year : null;
    }
    /**
     * Validate if the current year is in the current range
     * Returns true if is in range else returns false
     * @private
     * @param {?} year
     * @return {?}
     */
    _isInRange(year) {
        return true;
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return (this._adapter.isDateInstance(obj) && this._adapter.isValid(obj)) ? obj : null;
    }
}
MatDatetimepickerMultiYearView.ɵfac = function MatDatetimepickerMultiYearView_Factory(t) { return new (t || MatDatetimepickerMultiYearView)(ɵngcc0.ɵɵdirectiveInject(DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATETIME_FORMATS, 8)); };
MatDatetimepickerMultiYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerMultiYearView, selectors: [["mat-datetimepicker-multi-year-view"]], inputs: { type: "type", activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange" }, decls: 3, vars: 6, consts: [[1, "mat-datetimepicker-calendar-table"], [1, "mat-datetimepicker-calendar-table-header"], ["allowDisabledSelection", "true", "mat-datetimepicker-calendar-body", "", "role", "grid", 3, "activeCell", "numCols", "rows", "selectedValue", "todayValue", "selectedValueChange"]], template: function MatDatetimepickerMultiYearView_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table", 0);
        ɵngcc0.ɵɵelement(1, "thead", 1);
        ɵngcc0.ɵɵelementStart(2, "tbody", 2);
        ɵngcc0.ɵɵlistener("@slideCalendar.done", function MatDatetimepickerMultiYearView_Template_tbody_animation_slideCalendar_done_2_listener() { return ctx._calendarStateDone(); })("selectedValueChange", function MatDatetimepickerMultiYearView_Template_tbody_selectedValueChange_2_listener($event) { return ctx._yearSelected($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("@slideCalendar", ctx._calendarState)("activeCell", ctx._getActiveCell())("numCols", 4)("rows", ctx._years)("selectedValue", ctx._selectedYear)("todayValue", ctx._todayYear);
    } }, directives: [MatDatetimepickerCalendarBody], encapsulation: 2, data: { animation: [slideCalendar] }, changeDetection: 0 });
/** @nocollapse */
MatDatetimepickerMultiYearView.ctorParameters = () => [
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATETIME_FORMATS,] }] }
];
MatDatetimepickerMultiYearView.propDecorators = {
    _userSelection: [{ type: Output }],
    type: [{ type: Input }],
    dateFilter: [{ type: Input }],
    selectedChange: [{ type: Output }],
    activeDate: [{ type: Input }],
    selected: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerMultiYearView, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-multi-year-view",
                template: "<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\"></thead>\r\n  <tbody (@slideCalendar.done)=\"_calendarStateDone()\"\r\n         (selectedValueChange)=\"_yearSelected($event)\"\r\n         [@slideCalendar]=\"_calendarState\"\r\n         [activeCell]=\"_getActiveCell()\"\r\n         [numCols]=\"4\"\r\n         [rows]=\"_years\"\r\n         [selectedValue]=\"_selectedYear\"\r\n         [todayValue]=\"_todayYear\"\r\n         allowDisabledSelection=\"true\"\r\n         mat-datetimepicker-calendar-body\r\n         role=\"grid\"></tbody>\r\n</table>\r\n",
                animations: [slideCalendar],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATETIME_FORMATS]
            }] }]; }, { _userSelection: [{
            type: Output
        }], type: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype._userSelection;
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype.type;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype.dateFilter;
    /**
     * Emits when a new month is selected.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype.selectedChange;
    /**
     * Grid of calendar cells representing the years in the range.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._years;
    /**
     * The label for this year range (e.g. "2000-2020").
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._yearLabel;
    /**
     * The year in this range that today falls on. Null if today is in a different range.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._todayYear;
    /**
     * The year in this range that the selected Date falls on.
     * Null if the selected Date is in a different range.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._selectedYear;
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype._calendarState;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._activeDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._maxDate;
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype._adapter;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._dateFormats;
}
/**
 * @template D
 * @param {?} dateAdapter
 * @param {?} date1
 * @param {?} date2
 * @param {?} minDate
 * @param {?} maxDate
 * @return {?}
 */
function isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {
    /** @type {?} */
    const year1 = dateAdapter.getYear(date1);
    /** @type {?} */
    const year2 = dateAdapter.getYear(date2);
    /** @type {?} */
    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);
    return Math.floor((year1 - startingYear) / yearsPerPage) ===
        Math.floor((year2 - startingYear) / yearsPerPage);
}
/**
 * When the multi-year view is first opened, the active year will be in view.
 * So we compute how many years are between the active year and the *slot* where our
 * "startingYear" will render when paged into view.
 * @template D
 * @param {?} dateAdapter
 * @param {?} activeDate
 * @param {?} minDate
 * @param {?} maxDate
 * @return {?}
 */
function getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {
    /** @type {?} */
    const activeYear = dateAdapter.getYear(activeDate);
    return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)), yearsPerPage);
}
/**
 * We pick a "starting" year such that either the maximum year would be at the end
 * or the minimum year would be at the beginning of a page.
 * @template D
 * @param {?} dateAdapter
 * @param {?} minDate
 * @param {?} maxDate
 * @return {?}
 */
function getStartingYear(dateAdapter, minDate, maxDate) {
    /** @type {?} */
    let startingYear = 0;
    if (maxDate) {
        /** @type {?} */
        const maxYear = dateAdapter.getYear(maxDate);
        startingYear = maxYear - yearsPerPage + 1;
    }
    else if (minDate) {
        startingYear = dateAdapter.getYear(minDate);
    }
    return startingYear;
}
/**
 * Gets remainder that is non-negative, even if first number is negative
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function euclideanModulo(a, b) {
    return (a % b + b) % b;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/calendar.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A calendar that is used as part of the datepicker.
 * \@docs-private
 * @template D
 */
class MatDatetimepickerCalendar {
    /**
     * @param {?} _elementRef
     * @param {?} _intl
     * @param {?} _ngZone
     * @param {?} _adapter
     * @param {?} _dateFormats
     * @param {?} changeDetectorRef
     */
    constructor(_elementRef, _intl, _ngZone, _adapter, _dateFormats, changeDetectorRef) {
        this._elementRef = _elementRef;
        this._intl = _intl;
        this._ngZone = _ngZone;
        this._adapter = _adapter;
        this._dateFormats = _dateFormats;
        this._userSelection = new EventEmitter();
        /**
         * Active multi year view when click on year.
         */
        this.multiYearSelector = false;
        /**
         * Whether the calendar should be started in month or year view.
         */
        this.startView = "month";
        this.twelvehour = false;
        this.timeInterval = 1;
        this.ariaLabel = "Use arrow keys to navigate";
        this.ariaNextMonthLabel = "Next month";
        this.ariaPrevMonthLabel = "Previous month";
        this.ariaNextYearLabel = "Next year";
        this.ariaPrevYearLabel = "Previous year";
        this.ariaNextMultiYearLabel = "Next year range";
        this.ariaPrevMultiYearLabel = "Previous year range";
        /**
         * Emits when the currently selected date changes.
         */
        this.selectedChange = new EventEmitter();
        /**
         * Emits when the view has been changed. *
         */
        this.viewChanged = new EventEmitter();
        this._clockView = "hour";
        this._type = "date";
        /**
         * Date filter for the month and year views.
         */
        this._dateFilterForViews = (/**
         * @param {?} date
         * @return {?}
         */
        (date) => {
            return !!date &&
                (!this.dateFilter || this.dateFilter(date, MatDatetimepickerFilterType.DATE)) &&
                (!this.minDate || this._adapter.compareDate(date, this.minDate) >= 0) &&
                (!this.maxDate || this._adapter.compareDate(date, this.maxDate) <= 0);
        });
        if (!this._adapter) {
            throw createMissingDateImplError("DatetimeAdapter");
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError("MAT_DATETIME_FORMATS");
        }
        this._intlChanges = _intl.changes.subscribe((/**
         * @return {?}
         */
        () => changeDetectorRef.markForCheck()));
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = value || "date";
        if (this.type === "year") {
            this.multiYearSelector = true;
        }
    }
    /**
     * A date representing the period (month or year) to start the calendar in.
     * @return {?}
     */
    get startAt() {
        return this._startAt;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startAt(value) {
        this._startAt = this._adapter.getValidDateOrNull(value);
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = this._adapter.getValidDateOrNull(value);
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get minDate() {
        return this._minDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minDate(value) {
        this._minDate = this._adapter.getValidDateOrNull(value);
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxDate(value) {
        this._maxDate = this._adapter.getValidDateOrNull(value);
    }
    /**
     * The current active date. This determines which time period is shown and which date is
     * highlighted when using keyboard navigation.
     * @return {?}
     */
    get _activeDate() {
        return this._clampedActiveDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _activeDate(value) {
        /** @type {?} */
        const oldActiveDate = this._clampedActiveDate;
        this._clampedActiveDate = this._adapter.clampDate(value, this.minDate, this.maxDate);
        if (oldActiveDate && this._clampedActiveDate && this.currentView === "month" &&
            !this._adapter.sameMonthAndYear(oldActiveDate, this._clampedActiveDate)) {
            if (this._adapter.isInNextMonth(oldActiveDate, this._clampedActiveDate)) {
                this.calendarState("right");
            }
            else {
                this.calendarState("left");
            }
        }
    }
    /**
     * @return {?}
     */
    get currentView() {
        return this._currentView;
    }
    /**
     * @param {?} view
     * @return {?}
     */
    set currentView(view) {
        this._currentView = view;
        this.viewChanged.emit(view);
    }
    /**
     * The label for the current calendar view.
     * @return {?}
     */
    get _yearLabel() {
        return this._adapter.getYearName(this._activeDate);
    }
    /**
     * @return {?}
     */
    get _monthYearLabel() {
        if (this.currentView === "multi-year") {
            // The offset from the active year to the "slot" for the starting year is the
            // *actual* first rendered year in the multi-year view, and the last year is
            // just yearsPerPage - 1 away.
            /** @type {?} */
            const activeYear = this._adapter.getYear(this._activeDate);
            /** @type {?} */
            const minYearOfPage = activeYear - getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate);
            /** @type {?} */
            const maxYearOfPage = minYearOfPage + yearsPerPage - 1;
            /** @type {?} */
            const minYearName = this._adapter.getYearName(this._adapter.createDate(minYearOfPage, 0, 1));
            /** @type {?} */
            const maxYearName = this._adapter.getYearName(this._adapter.createDate(maxYearOfPage, 0, 1));
            return this._intl.formatYearRange(minYearName, maxYearName);
        }
        return this.currentView === "month" ? this._adapter.getMonthNames("long")[this._adapter.getMonth(this._activeDate)] :
            this._adapter.getYearName(this._activeDate);
    }
    /**
     * @return {?}
     */
    get _dateLabel() {
        switch (this.type) {
            case "month":
                return this._adapter.getMonthNames("long")[this._adapter.getMonth(this._activeDate)];
            default:
                return this._adapter.format(this._activeDate, this._dateFormats.display.popupHeaderDateLabel);
        }
    }
    /**
     * @return {?}
     */
    get _hoursLabel() {
        /** @type {?} */
        let hour = this._adapter.getHour(this._activeDate);
        if (!!this.twelvehour) {
            if (hour === 0) {
                hour = 24;
            }
            hour = hour > 12 ? (hour - 12) : hour;
        }
        return this._2digit(hour);
    }
    /**
     * @return {?}
     */
    get _minutesLabel() {
        return this._2digit(this._adapter.getMinute(this._activeDate));
    }
    /**
     * @return {?}
     */
    get _ariaLabelNext() {
        switch (this._currentView) {
            case "month":
                return this.ariaNextMonthLabel;
            case "year":
                return this.ariaNextYearLabel;
            case "multi-year":
                return this.ariaNextMultiYearLabel;
            default:
                return "";
        }
    }
    /**
     * @return {?}
     */
    get _ariaLabelPrev() {
        switch (this._currentView) {
            case "month":
                return this.ariaPrevMonthLabel;
            case "year":
                return this.ariaPrevYearLabel;
            case "multi-year":
                return this.ariaPrevMultiYearLabel;
            default:
                return "";
        }
    }
    /**
     * @return {?}
     */
    _userSelected() {
        this._userSelection.emit();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._activeDate = this.startAt || this._adapter.today();
        this._selectAMPM(this._activeDate);
        this._focusActiveCell();
        if (this.type === "year") {
            this.currentView = "multi-year";
        }
        else if (this.type === "month") {
            this.currentView = "year";
        }
        else if (this.type === "time") {
            this.currentView = "clock";
        }
        else {
            this.currentView = this.startView || "month";
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
    /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    _dateSelected(date) {
        if (this.type === "date") {
            if (!this._adapter.sameDate(date, this.selected)) {
                this.selectedChange.emit(date);
            }
        }
        else {
            this._activeDate = date;
            this.currentView = "clock";
        }
    }
    /**
     * Handles month selection in the year view.
     * @param {?} month
     * @return {?}
     */
    _monthSelected(month) {
        if (this.type === "month") {
            if (!this._adapter.sameMonthAndYear(month, this.selected)) {
                this.selectedChange.emit(this._adapter.getFirstDateOfMonth(month));
            }
        }
        else {
            this._activeDate = month;
            this.currentView = "month";
            this._clockView = "hour";
        }
    }
    /**
     * Handles year selection in the multi year view.
     * @param {?} year
     * @return {?}
     */
    _yearSelected(year) {
        if (this.type === "year") {
            if (!this._adapter.sameYear(year, this.selected)) {
                /** @type {?} */
                const normalizedDate = this._adapter.createDatetime(this._adapter.getYear(year), 0, 1, 0, 0);
                this.selectedChange.emit(normalizedDate);
            }
        }
        else {
            this._activeDate = year;
            this.currentView = "year";
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _timeSelected(date) {
        if (this._clockView !== "minute") {
            this._activeDate = this._updateDate(date);
            this._clockView = "minute";
        }
        else {
            if (!this._adapter.sameDatetime(date, this.selected)) {
                this.selectedChange.emit(date);
            }
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _onActiveDateChange(date) {
        this._activeDate = date;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _updateDate(date) {
        if (!!this.twelvehour) {
            /** @type {?} */
            const HOUR = this._adapter.getHour(date);
            if (HOUR === 12) {
                if (this._AMPM === "AM") {
                    return this._adapter.addCalendarHours(date, -12);
                }
            }
            else if (this._AMPM === "PM") {
                return this._adapter.addCalendarHours(date, 12);
            }
        }
        return date;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _selectAMPM(date) {
        if (this._adapter.getHour(date) > 11) {
            this._AMPM = "PM";
        }
        else {
            this._AMPM = "AM";
        }
    }
    /**
     * @param {?} source
     * @return {?}
     */
    _ampmClicked(source) {
        if (source === this._AMPM) {
            return;
        }
        this._AMPM = source;
        if (this._AMPM === "AM") {
            this._activeDate = this._adapter.addCalendarHours(this._activeDate, -12);
        }
        else {
            this._activeDate = this._adapter.addCalendarHours(this._activeDate, 12);
        }
    }
    /**
     * @return {?}
     */
    _yearClicked() {
        if (this.type === "year" || this.multiYearSelector) {
            this.currentView = "multi-year";
            return;
        }
        this.currentView = "year";
    }
    /**
     * @return {?}
     */
    _dateClicked() {
        if (this.type !== "month") {
            this.currentView = "month";
        }
    }
    /**
     * @return {?}
     */
    _hoursClicked() {
        this.currentView = "clock";
        this._clockView = "hour";
    }
    /**
     * @return {?}
     */
    _minutesClicked() {
        this.currentView = "clock";
        this._clockView = "minute";
    }
    /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    _previousClicked() {
        this._activeDate = this.currentView === "month" ?
            this._adapter.addCalendarMonths(this._activeDate, -1) :
            this._adapter.addCalendarYears(this._activeDate, this.currentView === "year" ? -1 : -yearsPerPage);
    }
    /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    _nextClicked() {
        this._activeDate = this.currentView === "month" ?
            this._adapter.addCalendarMonths(this._activeDate, 1) :
            this._adapter.addCalendarYears(this._activeDate, this.currentView === "year" ? 1 : yearsPerPage);
    }
    /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    _previousEnabled() {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
    }
    /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    _nextEnabled() {
        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
    }
    /**
     * Handles keydown events on the calendar body.
     * @param {?} event
     * @return {?}
     */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        if (this.currentView === "month") {
            this._handleCalendarBodyKeydownInMonthView(event);
        }
        else if (this.currentView === "year") {
            this._handleCalendarBodyKeydownInYearView(event);
        }
        else if (this.currentView === "multi-year") {
            this._handleCalendarBodyKeydownInMultiYearView(event);
        }
        else {
            this._handleCalendarBodyKeydownInClockView(event);
        }
    }
    /**
     * @return {?}
     */
    _focusActiveCell() {
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this._ngZone.onStable.asObservable().pipe(first()).subscribe((/**
             * @return {?}
             */
            () => {
                this._elementRef.nativeElement.focus();
            }));
        }));
    }
    /**
     * @return {?}
     */
    _calendarStateDone() {
        this._calendarState = "";
    }
    /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    _isSameView(date1, date2) {
        if (this.currentView === "month") {
            return this._adapter.getYear(date1) === this._adapter.getYear(date2) &&
                this._adapter.getMonth(date1) === this._adapter.getMonth(date2);
        }
        if (this.currentView === "year") {
            return this._adapter.getYear(date1) === this._adapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return isSameMultiYearView(this._adapter, date1, date2, this.minDate, this.maxDate);
    }
    /**
     * Handles keydown events on the calendar body when calendar is in month view.
     * @private
     * @param {?} event
     * @return {?}
     */
    _handleCalendarBodyKeydownInMonthView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, -7);
                break;
            case DOWN_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 7);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1 - this._adapter.getDate(this._activeDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, (this._adapter.getNumDaysInMonth(this._activeDate) -
                    this._adapter.getDate(this._activeDate)));
                break;
            case PAGE_UP:
                this._activeDate = event.altKey ?
                    this._adapter.addCalendarYears(this._activeDate, -1) :
                    this._adapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this._activeDate = event.altKey ?
                    this._adapter.addCalendarYears(this._activeDate, 1) :
                    this._adapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
                if (this._dateFilterForViews(this._activeDate)) {
                    this._dateSelected(this._activeDate);
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /**
     * Handles keydown events on the calendar body when calendar is in year view.
     * @private
     * @param {?} event
     * @return {?}
     */
    _handleCalendarBodyKeydownInYearView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._prevMonthInSameCol(this._activeDate);
                break;
            case DOWN_ARROW:
                this._activeDate = this._nextMonthInSameCol(this._activeDate);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, -this._adapter.getMonth(this._activeDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 11 - this._adapter.getMonth(this._activeDate));
                break;
            case PAGE_UP:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                break;
            case PAGE_DOWN:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                break;
            case ENTER:
                this._monthSelected(this._activeDate);
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /**
     * Handles keydown events on the calendar body when calendar is in multi-year view.
     * @private
     * @param {?} event
     * @return {?}
     */
    _handleCalendarBodyKeydownInMultiYearView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;
            case DOWN_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate) - 1);
                break;
            case PAGE_UP:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                break;
            case PAGE_DOWN:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                break;
            case ENTER:
                this._yearSelected(this._activeDate);
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
    }
    /**
     * Handles keydown events on the calendar body when calendar is in month view.
     * @private
     * @param {?} event
     * @return {?}
     */
    _handleCalendarBodyKeydownInClockView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case UP_ARROW:
                this._activeDate = this._clockView === "hour" ?
                    this._adapter.addCalendarHours(this._activeDate, 1) :
                    this._adapter.addCalendarMinutes(this._activeDate, 1);
                break;
            case DOWN_ARROW:
                this._activeDate = this._clockView === "hour" ?
                    this._adapter.addCalendarHours(this._activeDate, -1) :
                    this._adapter.addCalendarMinutes(this._activeDate, -1);
                break;
            case ENTER:
                this._timeSelected(this._activeDate);
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /**
     * Determine the date for the month that comes before the given month in the same column in the
     * calendar table.
     * @private
     * @param {?} date
     * @return {?}
     */
    _prevMonthInSameCol(date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        /** @type {?} */
        const increment = this._adapter.getMonth(date) <= 4 ? -5 :
            (this._adapter.getMonth(date) >= 7 ? -7 : -12);
        return this._adapter.addCalendarMonths(date, increment);
    }
    /**
     * Determine the date for the month that comes after the given month in the same column in the
     * calendar table.
     * @private
     * @param {?} date
     * @return {?}
     */
    _nextMonthInSameCol(date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        /** @type {?} */
        const increment = this._adapter.getMonth(date) <= 4 ? 7 :
            (this._adapter.getMonth(date) >= 7 ? 5 : 12);
        return this._adapter.addCalendarMonths(date, increment);
    }
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    calendarState(direction) {
        this._calendarState = direction;
    }
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    _2digit(n) {
        return ("00" + n).slice(-2);
    }
}
MatDatetimepickerCalendar.ɵfac = function MatDatetimepickerCalendar_Factory(t) { return new (t || MatDatetimepickerCalendar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATETIME_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MatDatetimepickerCalendar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerCalendar, selectors: [["mat-datetimepicker-calendar"]], hostAttrs: ["role", "dialog", "tabindex", "0"], hostVars: 3, hostBindings: function MatDatetimepickerCalendar_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function MatDatetimepickerCalendar_keydown_HostBindingHandler($event) { return ctx._handleCalendarBodyKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel);
        ɵngcc0.ɵɵclassProp("mat-datetimepicker-calendar", true);
    } }, inputs: { multiYearSelector: "multiYearSelector", startView: "startView", twelvehour: "twelvehour", timeInterval: "timeInterval", ariaLabel: "ariaLabel", ariaNextMonthLabel: "ariaNextMonthLabel", ariaPrevMonthLabel: "ariaPrevMonthLabel", ariaNextYearLabel: "ariaNextYearLabel", ariaPrevYearLabel: "ariaPrevYearLabel", ariaNextMultiYearLabel: "ariaNextMultiYearLabel", ariaPrevMultiYearLabel: "ariaPrevMultiYearLabel", type: "type", startAt: "startAt", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange", viewChanged: "viewChanged" }, decls: 11, vars: 8, consts: [[1, "mat-datetimepicker-calendar-header"], ["class", "mat-datetimepicker-calendar-header-year", "role", "button", 3, "active", "click", 4, "ngIf"], [1, "mat-datetimepicker-calendar-header-date-time"], ["class", "mat-datetimepicker-calendar-header-date", "role", "button", 3, "active", "not-clickable", "click", 4, "ngIf"], ["class", "mat-datetimepicker-calendar-header-time", 3, "active", 4, "ngIf"], [1, "mat-datetimepicker-calendar-content", 3, "ngSwitch"], ["class", "mat-month-content", 4, "ngIf"], [3, "activeDate", "dateFilter", "selected", "type", "_userSelection", "selectedChange", 4, "ngSwitchCase"], [3, "activeDate", "dateFilter", "maxDate", "minDate", "selected", "type", "_userSelection", "selectedChange", 4, "ngSwitchCase"], [3, "dateFilter", "interval", "maxDate", "minDate", "selected", "startView", "twelvehour", "_userSelection", "activeDateChange", "selectedChange", 4, "ngSwitchDefault"], ["role", "button", 1, "mat-datetimepicker-calendar-header-year", 3, "click"], [4, "ngIf"], ["role", "button", 1, "mat-datetimepicker-calendar-header-date", 3, "click"], [1, "mat-datetimepicker-calendar-header-time"], ["role", "button", 1, "mat-datetimepicker-calendar-header-hours", 3, "click"], ["role", "button", 1, "mat-datetimepicker-calendar-header-minutes", 3, "click"], ["class", "mat-datetimepicker-calendar-header-ampm-container", 4, "ngIf"], [1, "mat-datetimepicker-calendar-header-ampm-container"], [1, "mat-datetimepicker-calendar-header-ampm", 3, "click"], [1, "mat-month-content"], [1, "mat-datetimepicker-calendar-controls"], ["role", "button", 1, "mat-datetimepicker-calendar-previous-button", 3, "click"], ["height", "24", "viewBox", "0 0 24 24", "width", "24"], ["d", "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"], [1, "mat-datetimepicker-calendar-period-button"], ["role", "button", 1, "mat-datetimepicker-calendar-next-button", 3, "click"], ["d", "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"], [3, "activeDate", "dateFilter", "selected", "type", "_userSelection", "selectedChange"], [3, "activeDate", "dateFilter", "maxDate", "minDate", "selected", "type", "_userSelection", "selectedChange"], [3, "dateFilter", "interval", "maxDate", "minDate", "selected", "startView", "twelvehour", "_userSelection", "activeDateChange", "selectedChange"]], template: function MatDatetimepickerCalendar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, MatDatetimepickerCalendar_div_1_Template, 3, 4, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, MatDatetimepickerCalendar_span_3_Template, 2, 5, "span", 3);
        ɵngcc0.ɵɵtemplate(4, MatDatetimepickerCalendar_span_4_Template, 8, 9, "span", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵtemplate(6, MatDatetimepickerCalendar_div_6_Template, 11, 10, "div", 6);
        ɵngcc0.ɵɵtemplate(7, MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template, 1, 4, "mat-datetimepicker-month-view", 7);
        ɵngcc0.ɵɵtemplate(8, MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template, 1, 4, "mat-datetimepicker-year-view", 7);
        ɵngcc0.ɵɵtemplate(9, MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template, 1, 6, "mat-datetimepicker-multi-year-view", 8);
        ɵngcc0.ɵɵtemplate(10, MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template, 1, 7, "mat-datetimepicker-clock", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "time");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "time" && ctx.type !== "year");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type.endsWith("time"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.currentView);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentView === "month" || ctx.currentView === "year" || ctx.currentView === "multi-year");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "month");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "year");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "multi-year");
    } }, directives: function () { return [ɵngcc2.NgIf, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgSwitchDefault, ɵngcc4.MatIcon, MatDatetimepickerMonthView, MatDatetimepickerYearView, MatDatetimepickerMultiYearView, MatDatetimepickerClock]; }, styles: [".mat-datetimepicker-calendar{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;display:block;outline:none;user-select:none}.mat-datetimepicker-calendar[mode=landscape]{display:flex}.mat-datetimepicker-calendar-header{box-sizing:border-box;color:#fff;font-size:14px;padding:16px}[mode=landscape] .mat-datetimepicker-calendar-header{min-width:150px;width:150px}.mat-datetimepicker-calendar-header-date-time,.mat-datetimepicker-calendar-header-year{font-weight:500;white-space:nowrap;width:100%}.mat-datetimepicker-calendar-header-year{font-size:16px}.mat-datetimepicker-calendar-header-year mat-icon{transform:translateY(5px)}.mat-datetimepicker-calendar-header-date-time{font-size:30px;line-height:34px}[mode=landscape] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar-header-ampm-container{font-size:.77em}.mat-datetimepicker-calendar-header-ampm:not(.active),.mat-datetimepicker-calendar-header-date:not(.active),.mat-datetimepicker-calendar-header-hours:not(.active),.mat-datetimepicker-calendar-header-minutes:not(.active),.mat-datetimepicker-calendar-header-year:not(.active){cursor:pointer;opacity:.6}.mat-datetimepicker-calendar-header-ampm.not-clickable,.mat-datetimepicker-calendar-header-date.not-clickable,.mat-datetimepicker-calendar-header-hours.not-clickable,.mat-datetimepicker-calendar-header-minutes.not-clickable,.mat-datetimepicker-calendar-header-year.not-clickable{cursor:auto}.mat-datetimepicker-calendar-header-time{padding-left:8px}.mat-datetimepicker-calendar-header-time:not(.active){opacity:.6}.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-ampm,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-hours,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-minutes{cursor:pointer;opacity:1}[mode=landscape] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar-content{box-sizing:border-box;outline:none;overflow:hidden;padding:0 8px 8px;width:100%}[mode=landscape] .mat-datetimepicker-calendar-content{padding-top:8px}.mat-datetimepicker-calendar-controls{display:flex;justify-content:space-between}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-period-button,.mat-datetimepicker-calendar-previous-button{background:transparent;border:0;box-sizing:border-box;display:inline-block;height:48px;outline:none;padding:12px}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-previous-button{cursor:pointer;width:48px}.mat-datetimepicker-calendar-next-button.disabled,.mat-datetimepicker-calendar-previous-button.disabled{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-calendar-next-button svg,.mat-datetimepicker-calendar-previous-button svg{fill:currentColor;vertical-align:top}.mat-datetimepicker-calendar-table{border-collapse:collapse;border-spacing:0;width:100%}.mat-datetimepicker-calendar-table-header{color:rgba(0,0,0,.38)}.mat-datetimepicker-calendar-table-header th{font-size:11px;padding:0 0 8px;text-align:center}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{display:flex}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header{min-width:150px;width:150px}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-content{padding-top:8px}}"], encapsulation: 2, data: { animation: [slideCalendar] }, changeDetection: 0 });
/** @nocollapse */
MatDatetimepickerCalendar.ctorParameters = () => [
    { type: ElementRef },
    { type: MatDatepickerIntl },
    { type: NgZone },
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATETIME_FORMATS,] }] },
    { type: ChangeDetectorRef }
];
MatDatetimepickerCalendar.propDecorators = {
    _userSelection: [{ type: Output }],
    multiYearSelector: [{ type: Input }],
    startView: [{ type: Input }],
    twelvehour: [{ type: Input }],
    timeInterval: [{ type: Input }],
    dateFilter: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    ariaNextMonthLabel: [{ type: Input }],
    ariaPrevMonthLabel: [{ type: Input }],
    ariaNextYearLabel: [{ type: Input }],
    ariaPrevYearLabel: [{ type: Input }],
    ariaNextMultiYearLabel: [{ type: Input }],
    ariaPrevMultiYearLabel: [{ type: Input }],
    selectedChange: [{ type: Output }],
    viewChanged: [{ type: Output }],
    type: [{ type: Input }],
    startAt: [{ type: Input }],
    selected: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerCalendar, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-calendar",
                template: "<div class=\"mat-datetimepicker-calendar-header\">\r\n  <div (click)=\"_yearClicked()\"\r\n       *ngIf=\"type !== 'time'\"\r\n       [class.active]=\"currentView === 'year' || currentView === 'multi-year'\"\r\n       class=\"mat-datetimepicker-calendar-header-year\"\r\n       role=\"button\">{{ _yearLabel }}\r\n    <mat-icon *ngIf=\"multiYearSelector || type === 'year'\">arrow_drop_down</mat-icon>\r\n  </div>\r\n  <div class=\"mat-datetimepicker-calendar-header-date-time\">\r\n    <span (click)=\"_dateClicked()\" *ngIf=\"type !== 'time' && type !== 'year'\"\r\n          [class.active]=\"currentView === 'month'\"\r\n          [class.not-clickable]=\"type === 'month'\"\r\n          class=\"mat-datetimepicker-calendar-header-date\"\r\n          role=\"button\">{{ _dateLabel }}</span>\r\n    <span *ngIf=\"type.endsWith('time')\"\r\n          [class.active]=\"currentView === 'clock'\"\r\n          class=\"mat-datetimepicker-calendar-header-time\">\r\n      <span (click)=\"_hoursClicked()\"\r\n            [class.active]=\"_clockView == 'hour'\"\r\n            class=\"mat-datetimepicker-calendar-header-hours\"\r\n            role=\"button\">{{ _hoursLabel }}</span>:<span (click)=\"_minutesClicked()\"\r\n                                                                     [class.active]=\"_clockView == 'minute'\"\r\n                                                                     class=\"mat-datetimepicker-calendar-header-minutes\"\r\n                                                                     role=\"button\">{{ _minutesLabel }}</span>\r\n      <br/>\r\n      <span *ngIf=\"twelvehour\"\r\n            class=\"mat-datetimepicker-calendar-header-ampm-container\">\r\n        <span (click)=\"_ampmClicked('AM')\"\r\n              [class.active]=\"_AMPM === 'AM'\"\r\n              class=\"mat-datetimepicker-calendar-header-ampm\">AM</span>/<span (click)=\"_ampmClicked('PM')\"\r\n                                                           [class.active]=\"_AMPM === 'PM'\"\r\n                                                           class=\"mat-datetimepicker-calendar-header-ampm\">PM</span>\r\n      </span>\r\n    </span>\r\n  </div>\r\n</div>\r\n<div [ngSwitch]=\"currentView\" class=\"mat-datetimepicker-calendar-content\">\r\n  <div *ngIf=\"currentView === 'month' || currentView === 'year' || currentView === 'multi-year'\"\r\n       class=\"mat-month-content\">\r\n    <div class=\"mat-datetimepicker-calendar-controls\">\r\n      <div (click)=\"_previousClicked()\"\r\n           [attr.aria-disabled]=\"!_previousEnabled()\"\r\n           [attr.aria-label]=\"_ariaLabelPrev\"\r\n           [class.disabled]=\"!_previousEnabled()\"\r\n           class=\"mat-datetimepicker-calendar-previous-button\"\r\n           role=\"button\">\r\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\r\n        </svg>\r\n      </div>\r\n      <div (@slideCalendar.done)=\"_calendarStateDone()\" [@slideCalendar]=\"_calendarState\"\r\n           class=\"mat-datetimepicker-calendar-period-button\">\r\n        <strong>{{ _monthYearLabel }}</strong>\r\n      </div>\r\n      <div (click)=\"_nextClicked()\"\r\n           [attr.aria-disabled]=\"!_nextEnabled()\"\r\n           [attr.aria-label]=\"_ariaLabelNext\"\r\n           [class.disabled]=\"!_nextEnabled()\"\r\n           class=\"mat-datetimepicker-calendar-next-button\"\r\n           role=\"button\">\r\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <mat-datetimepicker-month-view (_userSelection)=\"_userSelected()\"\r\n                                 (selectedChange)=\"_dateSelected($event)\"\r\n                                 *ngSwitchCase=\"'month'\"\r\n                                 [activeDate]=\"_activeDate\"\r\n                                 [dateFilter]=\"_dateFilterForViews\"\r\n                                 [selected]=\"selected\"\r\n                                 [type]=\"type\">\r\n  </mat-datetimepicker-month-view>\r\n  <mat-datetimepicker-year-view (_userSelection)=\"_userSelected()\"\r\n                                (selectedChange)=\"_monthSelected($event)\"\r\n                                *ngSwitchCase=\"'year'\"\r\n                                [activeDate]=\"_activeDate\"\r\n                                [dateFilter]=\"_dateFilterForViews\"\r\n                                [selected]=\"selected\"\r\n                                [type]=\"type\">\r\n  </mat-datetimepicker-year-view>\r\n  <mat-datetimepicker-multi-year-view (_userSelection)=\"_userSelected()\"\r\n                                      (selectedChange)=\"_yearSelected($event)\"\r\n                                      *ngSwitchCase=\"'multi-year'\"\r\n                                      [activeDate]=\"_activeDate\"\r\n                                      [dateFilter]=\"_dateFilterForViews\"\r\n                                      [maxDate]=\"maxDate\"\r\n                                      [minDate]=\"minDate\"\r\n                                      [selected]=\"selected\"\r\n                                      [type]=\"type\">\r\n  </mat-datetimepicker-multi-year-view>\r\n  <mat-datetimepicker-clock (_userSelection)=\"_userSelected()\"\r\n                            (activeDateChange)=\"_onActiveDateChange($event)\"\r\n                            (selectedChange)=\"_timeSelected($event)\"\r\n                            *ngSwitchDefault\r\n                            [dateFilter]=\"dateFilter\"\r\n                            [interval]=\"timeInterval\"\r\n                            [maxDate]=\"maxDate\"\r\n                            [minDate]=\"minDate\"\r\n                            [selected]=\"_activeDate\"\r\n                            [startView]=\"_clockView\"\r\n                            [twelvehour]=\"twelvehour\">\r\n  </mat-datetimepicker-clock>\r\n</div>\r\n",
                host: {
                    "[class.mat-datetimepicker-calendar]": "true",
                    "[attr.aria-label]": "ariaLabel",
                    "role": "dialog",
                    "tabindex": "0",
                    "(keydown)": "_handleCalendarBodyKeydown($event)"
                },
                animations: [slideCalendar],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mat-datetimepicker-calendar{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;display:block;outline:none;user-select:none}.mat-datetimepicker-calendar[mode=landscape]{display:flex}.mat-datetimepicker-calendar-header{box-sizing:border-box;color:#fff;font-size:14px;padding:16px}[mode=landscape] .mat-datetimepicker-calendar-header{min-width:150px;width:150px}.mat-datetimepicker-calendar-header-date-time,.mat-datetimepicker-calendar-header-year{font-weight:500;white-space:nowrap;width:100%}.mat-datetimepicker-calendar-header-year{font-size:16px}.mat-datetimepicker-calendar-header-year mat-icon{transform:translateY(5px)}.mat-datetimepicker-calendar-header-date-time{font-size:30px;line-height:34px}[mode=landscape] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar-header-ampm-container{font-size:.77em}.mat-datetimepicker-calendar-header-ampm:not(.active),.mat-datetimepicker-calendar-header-date:not(.active),.mat-datetimepicker-calendar-header-hours:not(.active),.mat-datetimepicker-calendar-header-minutes:not(.active),.mat-datetimepicker-calendar-header-year:not(.active){cursor:pointer;opacity:.6}.mat-datetimepicker-calendar-header-ampm.not-clickable,.mat-datetimepicker-calendar-header-date.not-clickable,.mat-datetimepicker-calendar-header-hours.not-clickable,.mat-datetimepicker-calendar-header-minutes.not-clickable,.mat-datetimepicker-calendar-header-year.not-clickable{cursor:auto}.mat-datetimepicker-calendar-header-time{padding-left:8px}.mat-datetimepicker-calendar-header-time:not(.active){opacity:.6}.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-ampm,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-hours,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-minutes{cursor:pointer;opacity:1}[mode=landscape] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar-content{box-sizing:border-box;outline:none;overflow:hidden;padding:0 8px 8px;width:100%}[mode=landscape] .mat-datetimepicker-calendar-content{padding-top:8px}.mat-datetimepicker-calendar-controls{display:flex;justify-content:space-between}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-period-button,.mat-datetimepicker-calendar-previous-button{background:transparent;border:0;box-sizing:border-box;display:inline-block;height:48px;outline:none;padding:12px}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-previous-button{cursor:pointer;width:48px}.mat-datetimepicker-calendar-next-button.disabled,.mat-datetimepicker-calendar-previous-button.disabled{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-calendar-next-button svg,.mat-datetimepicker-calendar-previous-button svg{fill:currentColor;vertical-align:top}.mat-datetimepicker-calendar-table{border-collapse:collapse;border-spacing:0;width:100%}.mat-datetimepicker-calendar-table-header{color:rgba(0,0,0,.38)}.mat-datetimepicker-calendar-table-header th{font-size:11px;padding:0 0 8px;text-align:center}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{display:flex}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header{min-width:150px;width:150px}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-content{padding-top:8px}}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.MatDatepickerIntl }, { type: ɵngcc0.NgZone }, { type: DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATETIME_FORMATS]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _userSelection: [{
            type: Output
        }], multiYearSelector: [{
            type: Input
        }], startView: [{
            type: Input
        }], twelvehour: [{
            type: Input
        }], timeInterval: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaNextMonthLabel: [{
            type: Input
        }], ariaPrevMonthLabel: [{
            type: Input
        }], ariaNextYearLabel: [{
            type: Input
        }], ariaPrevYearLabel: [{
            type: Input
        }], ariaNextMultiYearLabel: [{
            type: Input
        }], ariaPrevMultiYearLabel: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], viewChanged: [{
            type: Output
        }], type: [{
            type: Input
        }], startAt: [{
            type: Input
        }], selected: [{
            type: Input
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerCalendar.prototype._userSelection;
    /**
     * Active multi year view when click on year.
     * @type {?}
     */
    MatDatetimepickerCalendar.prototype.multiYearSelector;
    /**
     * Whether the calendar should be started in month or year view.
     * @type {?}
     */
    MatDatetimepickerCalendar.prototype.startView;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.twelvehour;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.timeInterval;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatDatetimepickerCalendar.prototype.dateFilter;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.ariaLabel;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.ariaNextMonthLabel;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.ariaPrevMonthLabel;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.ariaNextYearLabel;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.ariaPrevYearLabel;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.ariaNextMultiYearLabel;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype.ariaPrevMultiYearLabel;
    /**
     * Emits when the currently selected date changes.
     * @type {?}
     */
    MatDatetimepickerCalendar.prototype.selectedChange;
    /**
     * Emits when the view has been changed. *
     * @type {?}
     */
    MatDatetimepickerCalendar.prototype.viewChanged;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype._AMPM;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype._clockView;
    /** @type {?} */
    MatDatetimepickerCalendar.prototype._calendarState;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._intlChanges;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._clampedActiveDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._type;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._startAt;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._maxDate;
    /**
     * Whether the calendar is in month view.
     * @type {?}
     */
    MatDatetimepickerCalendar.prototype._currentView;
    /**
     * Date filter for the month and year views.
     * @type {?}
     */
    MatDatetimepickerCalendar.prototype._dateFilterForViews;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._adapter;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerCalendar.prototype._dateFormats;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/clock.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CLOCK_RADIUS = 50;
/** @type {?} */
const CLOCK_INNER_RADIUS = 27.5;
/** @type {?} */
const CLOCK_OUTER_RADIUS = 41.25;
/** @type {?} */
const CLOCK_TICK_RADIUS = 7.0833;
/**
 * A clock that is used as part of the datepicker.
 * \@docs-private
 * @template D
 */
class MatDatetimepickerClock {
    /**
     * @param {?} _element
     * @param {?} _adapter
     */
    constructor(_element, _adapter) {
        this._element = _element;
        this._adapter = _adapter;
        this._userSelection = new EventEmitter();
        this.interval = 1;
        this.twelvehour = false;
        /**
         * Emits when the currently selected date changes.
         */
        this.selectedChange = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        /**
         * Hours and Minutes representing the clock view.
         */
        this._hours = [];
        this._minutes = [];
        /**
         * Whether the clock is in hour view.
         */
        this._hourView = true;
        this._timeChanged = false;
        this.mouseMoveListener = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this._handleMousemove(event);
        });
        this.mouseUpListener = (/**
         * @return {?}
         */
        () => {
            this._handleMouseup();
        });
    }
    /**
     * The date to display in this clock view.
     * @return {?}
     */
    get activeDate() {
        return this._activeDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set activeDate(value) {
        /** @type {?} */
        let oldActiveDate = this._activeDate;
        this._activeDate = this._adapter.clampDate(value, this.minDate, this.maxDate);
        if (!this._adapter.sameMinute(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
        if (this._selected) {
            this.activeDate = this._selected;
        }
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get minDate() {
        return this._minDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minDate(value) {
        this._minDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxDate(value) {
        this._maxDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
    }
    /**
     * Whether the clock should be started in hour or minute view.
     * @param {?} value
     * @return {?}
     */
    set startView(value) {
        this._hourView = value != "minute";
    }
    /**
     * @return {?}
     */
    get _hand() {
        /** @type {?} */
        let hour = this._adapter.getHour(this.activeDate);
        if (!!this.twelvehour) {
            if (hour === 0) {
                hour = 24;
            }
            this._selectedHour = hour > 12 ? (hour - 12) : hour;
        }
        else {
            this._selectedHour = hour;
        }
        this._selectedMinute = this._adapter.getMinute(this.activeDate);
        /** @type {?} */
        let deg = 0;
        /** @type {?} */
        let radius = CLOCK_OUTER_RADIUS;
        if (this._hourView) {
            /** @type {?} */
            let outer = this._selectedHour > 0 && this._selectedHour < 13;
            radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
            if (this.twelvehour) {
                radius = CLOCK_OUTER_RADIUS;
            }
            deg = Math.round(this._selectedHour * (360 / (24 / 2)));
        }
        else {
            deg = Math.round(this._selectedMinute * (360 / 60));
        }
        return {
            "transform": `rotate(${deg}deg)`,
            "height": `${radius}%`,
            "margin-top": `${50 - radius}%`
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.activeDate = this._activeDate || this._adapter.today();
        this._init();
    }
    /**
     * Handles mousedown events on the clock body.
     * @param {?} event
     * @return {?}
     */
    _handleMousedown(event) {
        this._timeChanged = false;
        this.setTime(event);
        document.addEventListener("mousemove", this.mouseMoveListener);
        document.addEventListener("touchmove", this.mouseMoveListener);
        document.addEventListener("mouseup", this.mouseUpListener);
        document.addEventListener("touchend", this.mouseUpListener);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleMousemove(event) {
        event.preventDefault();
        this.setTime(event);
    }
    /**
     * @return {?}
     */
    _handleMouseup() {
        document.removeEventListener("mousemove", this.mouseMoveListener);
        document.removeEventListener("touchmove", this.mouseMoveListener);
        document.removeEventListener("mouseup", this.mouseUpListener);
        document.removeEventListener("touchend", this.mouseUpListener);
        if (this._timeChanged) {
            this.selectedChange.emit(this.activeDate);
            if (!this._hourView) {
                this._userSelection.emit();
            }
        }
    }
    /**
     * Initializes this clock view.
     * @private
     * @return {?}
     */
    _init() {
        this._hours.length = 0;
        this._minutes.length = 0;
        /** @type {?} */
        let hourNames = this._adapter.getHourNames();
        /** @type {?} */
        let minuteNames = this._adapter.getMinuteNames();
        if (this.twelvehour) {
            for (let i = 1; i < (hourNames.length / 2) + 1; i++) {
                /** @type {?} */
                let radian = i / 6 * Math.PI;
                /** @type {?} */
                let radius = CLOCK_OUTER_RADIUS;
                /** @type {?} */
                const date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), i + 1, 0);
                /** @type {?} */
                let enabled = (!this.minDate || this._adapter.compareDatetime(date, this.minDate) >= 0) &&
                    (!this.maxDate || this._adapter.compareDatetime(date, this.maxDate) <= 0);
                this._hours.push({
                    value: i,
                    displayValue: i === 0 ? "00" : hourNames[i],
                    enabled: enabled,
                    top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                    left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS
                });
            }
        }
        else {
            for (let i = 0; i < hourNames.length; i++) {
                /** @type {?} */
                let radian = i / 6 * Math.PI;
                /** @type {?} */
                let outer = i > 0 && i < 13;
                /** @type {?} */
                let radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
                /** @type {?} */
                const date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), i, 0);
                /** @type {?} */
                let enabled = (!this.minDate || this._adapter.compareDatetime(date, this.minDate) >= 0) &&
                    (!this.maxDate || this._adapter.compareDatetime(date, this.maxDate) <= 0) &&
                    (!this.dateFilter || this.dateFilter(date, MatDatetimepickerFilterType.HOUR));
                this._hours.push({
                    value: i,
                    displayValue: i === 0 ? "00" : hourNames[i],
                    enabled: enabled,
                    top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                    left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,
                    fontSize: i > 0 && i < 13 ? "" : "80%"
                });
            }
        }
        for (let i = 0; i < minuteNames.length; i += 5) {
            /** @type {?} */
            let radian = i / 30 * Math.PI;
            /** @type {?} */
            const date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), this._adapter.getHour(this.activeDate), i);
            /** @type {?} */
            let enabled = (!this.minDate || this._adapter.compareDatetime(date, this.minDate) >= 0) &&
                (!this.maxDate || this._adapter.compareDatetime(date, this.maxDate) <= 0) &&
                (!this.dateFilter || this.dateFilter(date, MatDatetimepickerFilterType.MINUTE));
            this._minutes.push({
                value: i,
                displayValue: i === 0 ? "00" : minuteNames[i],
                enabled: enabled,
                top: CLOCK_RADIUS - Math.cos(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS,
                left: CLOCK_RADIUS + Math.sin(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS
            });
        }
    }
    /**
     * Set Time
     * @private
     * @param {?} event
     * @return {?}
     */
    setTime(event) {
        /** @type {?} */
        let trigger = this._element.nativeElement;
        /** @type {?} */
        let triggerRect = trigger.getBoundingClientRect();
        /** @type {?} */
        let width = trigger.offsetWidth;
        /** @type {?} */
        let height = trigger.offsetHeight;
        /** @type {?} */
        let pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;
        /** @type {?} */
        let pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;
        /** @type {?} */
        let x = (width / 2) - (pageX - triggerRect.left - window.pageXOffset);
        /** @type {?} */
        let y = (height / 2) - (pageY - triggerRect.top - window.pageYOffset);
        /** @type {?} */
        let radian = Math.atan2(-x, y);
        /** @type {?} */
        let unit = Math.PI / (this._hourView ? 6 : (this.interval ? (30 / this.interval) : 30));
        /** @type {?} */
        let z = Math.sqrt(x * x + y * y);
        /** @type {?} */
        let outer = this._hourView && z > ((width * (CLOCK_OUTER_RADIUS / 100)) +
            (width * (CLOCK_INNER_RADIUS / 100))) / 2;
        if (radian < 0) {
            radian = Math.PI * 2 + radian;
        }
        /** @type {?} */
        let value = Math.round(radian / unit);
        /** @type {?} */
        let date;
        if (this._hourView) {
            if (this.twelvehour) {
                value = value === 0 ? 12 : value;
            }
            else {
                if (value === 12) {
                    value = 0;
                }
                value = outer ? (value === 0 ? 12 : value) : value === 0 ? 0 : value + 12;
            }
            date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), value, this._adapter.getMinute(this.activeDate));
        }
        else {
            if (this.interval) {
                value *= this.interval;
            }
            if (value === 60) {
                value = 0;
            }
            date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), this._adapter.getHour(this.activeDate), value);
        }
        /** @type {?} */
        const clamped = this._adapter.clampDate(date, this.minDate, this.maxDate);
        if (date === clamped) {
            this._timeChanged = true;
            this.activeDate = clamped;
            this.activeDateChange.emit(this.activeDate);
        }
    }
}
MatDatetimepickerClock.ɵfac = function MatDatetimepickerClock_Factory(t) { return new (t || MatDatetimepickerClock)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DatetimeAdapter)); };
MatDatetimepickerClock.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerClock, selectors: [["mat-datetimepicker-clock"]], hostAttrs: ["role", "clock"], hostBindings: function MatDatetimepickerClock_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function MatDatetimepickerClock_mousedown_HostBindingHandler($event) { return ctx._handleMousedown($event); });
    } }, inputs: { interval: "interval", twelvehour: "twelvehour", activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", startView: "startView", dateFilter: "dateFilter" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange", activeDateChange: "activeDateChange" }, decls: 7, vars: 7, consts: [[1, "mat-datetimepicker-clock"], [1, "mat-datetimepicker-clock-center"], [1, "mat-datetimepicker-clock-hand", 3, "ngStyle"], [1, "mat-datetimepicker-clock-hours"], ["class", "mat-datetimepicker-clock-cell", 3, "mat-datetimepicker-clock-cell-disabled", "mat-datetimepicker-clock-cell-selected", "fontSize", "left", "top", 4, "ngFor", "ngForOf"], [1, "mat-datetimepicker-clock-minutes"], ["class", "mat-datetimepicker-clock-cell", 3, "mat-datetimepicker-clock-cell-disabled", "mat-datetimepicker-clock-cell-selected", "left", "top", 4, "ngFor", "ngForOf"], [1, "mat-datetimepicker-clock-cell"]], template: function MatDatetimepickerClock_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, MatDatetimepickerClock_div_4_Template, 2, 11, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵtemplate(6, MatDatetimepickerClock_div_6_Template, 2, 9, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngStyle", ctx._hand);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("active", ctx._hourView);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx._hours);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("active", !ctx._hourView);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx._minutes);
    } }, directives: [ɵngcc2.NgStyle, ɵngcc2.NgForOf], styles: ["[_nghost-%COMP%]{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;box-sizing:border-box;display:block;font-size:14px;margin:8px;min-width:224px;position:relative;user-select:none}.mat-datetimepicker-clock[_ngcontent-%COMP%]{background-color:#e0e0e0;border-radius:50%;height:0;padding-top:100%;position:relative;width:100%}.mat-datetimepicker-clock-center[_ngcontent-%COMP%]{border-radius:50%;height:2%;left:50%;margin:-1%;position:absolute;top:50%;width:2%}.mat-datetimepicker-clock-hand[_ngcontent-%COMP%]{bottom:0;left:0;margin:0 auto;position:absolute;right:0;top:0;transform-origin:bottom;width:1px}.mat-datetimepicker-clock-hand[_ngcontent-%COMP%]:before{border-radius:50%;content:\"\";height:8px;left:-4px;position:absolute;top:-4px;width:8px}.mat-datetimepicker-clock-hours[_ngcontent-%COMP%], .mat-datetimepicker-clock-minutes[_ngcontent-%COMP%]{height:100%;left:0;opacity:0;position:absolute;top:0;transform:scale(1.2);transition:.35s;visibility:hidden;width:100%}.mat-datetimepicker-clock-hours.active[_ngcontent-%COMP%], .mat-datetimepicker-clock-minutes.active[_ngcontent-%COMP%]{opacity:1;transform:scale(1);visibility:visible}.mat-datetimepicker-clock-minutes[_ngcontent-%COMP%]{transform:scale(.8)}.mat-datetimepicker-clock-cell[_ngcontent-%COMP%]{align-items:center;border-radius:50%;box-sizing:border-box;color:rgba(0,0,0,.87);cursor:pointer;display:flex;height:14.1666%;justify-content:center;position:absolute;width:14.1666%}.mat-datetimepicker-clock-cell[_ngcontent-%COMP%]:not(.mat-datetimepicker-clock-cell-selected):not(.mat-datetimepicker-clock-cell-disabled):hover{background-color:rgba(0,0,0,.1)}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-disabled[_ngcontent-%COMP%]{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected[_ngcontent-%COMP%]{color:#fff}"] });
/** @nocollapse */
MatDatetimepickerClock.ctorParameters = () => [
    { type: ElementRef },
    { type: DatetimeAdapter }
];
MatDatetimepickerClock.propDecorators = {
    _userSelection: [{ type: Output }],
    dateFilter: [{ type: Input }],
    interval: [{ type: Input }],
    twelvehour: [{ type: Input }],
    selectedChange: [{ type: Output }],
    activeDateChange: [{ type: Output }],
    activeDate: [{ type: Input }],
    selected: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    startView: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerClock, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-clock",
                template: "<div class=\"mat-datetimepicker-clock\">\r\n  <div class=\"mat-datetimepicker-clock-center\"></div>\r\n  <div [ngStyle]=\"_hand\" class=\"mat-datetimepicker-clock-hand\"></div>\r\n  <div [class.active]=\"_hourView\" class=\"mat-datetimepicker-clock-hours\">\r\n    <div *ngFor=\"let item of _hours\"\r\n         [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n         [class.mat-datetimepicker-clock-cell-selected]=\"_selectedHour == item.value\"\r\n         [style.fontSize]=\"item.fontSize\"\r\n         [style.left]=\"item.left+'%'\"\r\n         [style.top]=\"item.top+'%'\"\r\n         class=\"mat-datetimepicker-clock-cell\">{{ item.displayValue }}</div>\r\n  </div>\r\n  <div [class.active]=\"!_hourView\" class=\"mat-datetimepicker-clock-minutes\">\r\n    <div *ngFor=\"let item of _minutes\"\r\n         [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n         [class.mat-datetimepicker-clock-cell-selected]=\"_selectedMinute == item.value\"\r\n         [style.left]=\"item.left+'%'\"\r\n         [style.top]=\"item.top+'%'\"\r\n         class=\"mat-datetimepicker-clock-cell\">{{ item.displayValue }}</div>\r\n  </div>\r\n</div>\r\n",
                host: {
                    "role": "clock",
                    "(mousedown)": "_handleMousedown($event)"
                },
                styles: [":host{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;box-sizing:border-box;display:block;font-size:14px;margin:8px;min-width:224px;position:relative;user-select:none}.mat-datetimepicker-clock{background-color:#e0e0e0;border-radius:50%;height:0;padding-top:100%;position:relative;width:100%}.mat-datetimepicker-clock-center{border-radius:50%;height:2%;left:50%;margin:-1%;position:absolute;top:50%;width:2%}.mat-datetimepicker-clock-hand{bottom:0;left:0;margin:0 auto;position:absolute;right:0;top:0;transform-origin:bottom;width:1px}.mat-datetimepicker-clock-hand:before{border-radius:50%;content:\"\";height:8px;left:-4px;position:absolute;top:-4px;width:8px}.mat-datetimepicker-clock-hours,.mat-datetimepicker-clock-minutes{height:100%;left:0;opacity:0;position:absolute;top:0;transform:scale(1.2);transition:.35s;visibility:hidden;width:100%}.mat-datetimepicker-clock-hours.active,.mat-datetimepicker-clock-minutes.active{opacity:1;transform:scale(1);visibility:visible}.mat-datetimepicker-clock-minutes{transform:scale(.8)}.mat-datetimepicker-clock-cell{align-items:center;border-radius:50%;box-sizing:border-box;color:rgba(0,0,0,.87);cursor:pointer;display:flex;height:14.1666%;justify-content:center;position:absolute;width:14.1666%}.mat-datetimepicker-clock-cell:not(.mat-datetimepicker-clock-cell-selected):not(.mat-datetimepicker-clock-cell-disabled):hover{background-color:rgba(0,0,0,.1)}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-disabled{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected{color:#fff}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DatetimeAdapter }]; }, { _userSelection: [{
            type: Output
        }], interval: [{
            type: Input
        }], twelvehour: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], activeDateChange: [{
            type: Output
        }], activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], startView: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerClock.prototype._userSelection;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatDatetimepickerClock.prototype.dateFilter;
    /** @type {?} */
    MatDatetimepickerClock.prototype.interval;
    /** @type {?} */
    MatDatetimepickerClock.prototype.twelvehour;
    /**
     * Emits when the currently selected date changes.
     * @type {?}
     */
    MatDatetimepickerClock.prototype.selectedChange;
    /** @type {?} */
    MatDatetimepickerClock.prototype.activeDateChange;
    /**
     * Hours and Minutes representing the clock view.
     * @type {?}
     */
    MatDatetimepickerClock.prototype._hours;
    /** @type {?} */
    MatDatetimepickerClock.prototype._minutes;
    /**
     * Whether the clock is in hour view.
     * @type {?}
     */
    MatDatetimepickerClock.prototype._hourView;
    /** @type {?} */
    MatDatetimepickerClock.prototype._selectedHour;
    /** @type {?} */
    MatDatetimepickerClock.prototype._selectedMinute;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype._timeChanged;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype.mouseMoveListener;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype.mouseUpListener;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype._activeDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype._maxDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype._element;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerClock.prototype._adapter;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/datetimepicker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Used to generate a unique ID for each datepicker instance.
 * @type {?}
 */
let datetimepickerUid = 0;
/**
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * MatCalendar directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 * \@docs-private
 * @template D
 */
class MatDatetimepickerContent {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._calendar._focusActiveCell();
    }
    /**
     * Handles keydown event on datepicker content.
     * @param {?} event The event.
     * @return {?}
     */
    _handleKeydown(event) {
        // tslint:disable-next-line:deprecation
        if (event.keyCode === ESCAPE) {
            this.datetimepicker.close();
            event.preventDefault();
            event.stopPropagation();
        }
    }
}
MatDatetimepickerContent.ɵfac = function MatDatetimepickerContent_Factory(t) { return new (t || MatDatetimepickerContent)(); };
MatDatetimepickerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerContent, selectors: [["mat-datetimepicker-content"]], viewQuery: function MatDatetimepickerContent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(MatDatetimepickerCalendar, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calendar = _t.first);
    } }, hostAttrs: [1, "mat-datetimepicker-content"], hostVars: 2, hostBindings: function MatDatetimepickerContent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function MatDatetimepickerContent_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mat-datetimepicker-content-touch", ctx.datetimepicker == null ? null : ctx.datetimepicker.touchUi);
    } }, decls: 1, vars: 16, consts: [["cdkTrapFocus", "", 1, "mat-typography", 3, "ariaNextMonthLabel", "ariaNextYearLabel", "ariaPrevMonthLabel", "ariaPrevYearLabel", "dateFilter", "id", "maxDate", "minDate", "multiYearSelector", "selected", "startAt", "startView", "timeInterval", "twelvehour", "type", "_userSelection", "selectedChange", "viewChanged"]], template: function MatDatetimepickerContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-calendar", 0);
        ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerContent_Template_mat_datetimepicker_calendar__userSelection_0_listener() { return ctx.datetimepicker.close(); })("selectedChange", function MatDatetimepickerContent_Template_mat_datetimepicker_calendar_selectedChange_0_listener($event) { return ctx.datetimepicker._select($event); })("viewChanged", function MatDatetimepickerContent_Template_mat_datetimepicker_calendar_viewChanged_0_listener($event) { return ctx.datetimepicker._viewChanged($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ariaNextMonthLabel", ctx.datetimepicker.ariaNextMonthLabel)("ariaNextYearLabel", ctx.datetimepicker.ariaNextYearLabel)("ariaPrevMonthLabel", ctx.datetimepicker.ariaPrevMonthLabel)("ariaPrevYearLabel", ctx.datetimepicker.ariaPrevYearLabel)("dateFilter", ctx.datetimepicker._dateFilter)("id", ctx.datetimepicker.id)("maxDate", ctx.datetimepicker._maxDate)("minDate", ctx.datetimepicker._minDate)("multiYearSelector", ctx.datetimepicker.multiYearSelector)("selected", ctx.datetimepicker._selected)("startAt", ctx.datetimepicker.startAt)("startView", ctx.datetimepicker.startView)("timeInterval", ctx.datetimepicker.timeInterval)("twelvehour", ctx.datetimepicker.twelvehour)("type", ctx.datetimepicker.type);
        ɵngcc0.ɵɵattribute("mode", ctx.datetimepicker.mode);
    } }, directives: [MatDatetimepickerCalendar, ɵngcc5.CdkTrapFocus], styles: [".mat-datetimepicker-content{background-color:#fff;border-radius:2px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);display:block;overflow:hidden}.mat-datetimepicker-calendar{height:405px;width:296px}.mat-datetimepicker-calendar[mode=landscape]{height:328px;width:446px}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{height:328px;width:446px}}.mat-datetimepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12);box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block}.cdk-global-overlay-wrapper,.cdk-overlay-container{height:100%;left:0;pointer-events:none;top:0;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{box-sizing:border-box}.cdk-overlay-backdrop,.cdk-overlay-pane{pointer-events:auto;position:absolute;z-index:1000}.cdk-overlay-backdrop{bottom:0;left:0;opacity:0;right:0;top:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.48}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.6)}.mat-datetimepicker-dialog .mat-dialog-container{padding:0}"], encapsulation: 2, changeDetection: 0 });
MatDatetimepickerContent.propDecorators = {
    _calendar: [{ type: ViewChild, args: [MatDatetimepickerCalendar, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerContent, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-content",
                template: "<mat-datetimepicker-calendar (_userSelection)=\"datetimepicker.close()\" (selectedChange)=\"datetimepicker._select($event)\"\r\n                             (viewChanged)=\"datetimepicker._viewChanged($event)\"\r\n                             [ariaNextMonthLabel]=\"datetimepicker.ariaNextMonthLabel\"\r\n                             [ariaNextYearLabel]=\"datetimepicker.ariaNextYearLabel\"\r\n                             [ariaPrevMonthLabel]=\"datetimepicker.ariaPrevMonthLabel\"\r\n                             [ariaPrevYearLabel]=\"datetimepicker.ariaPrevYearLabel\"\r\n                             [attr.mode]=\"datetimepicker.mode\"\r\n                             [dateFilter]=\"datetimepicker._dateFilter\"\r\n                             [id]=\"datetimepicker.id\"\r\n                             [maxDate]=\"datetimepicker._maxDate\"\r\n                             [minDate]=\"datetimepicker._minDate\"\r\n                             [multiYearSelector]=\"datetimepicker.multiYearSelector\"\r\n                             [selected]=\"datetimepicker._selected\"\r\n                             [startAt]=\"datetimepicker.startAt\"\r\n                             [startView]=\"datetimepicker.startView\"\r\n                             [timeInterval]=\"datetimepicker.timeInterval\"\r\n                             [twelvehour]=\"datetimepicker.twelvehour\"\r\n                             [type]=\"datetimepicker.type\"\r\n                             cdkTrapFocus\r\n                             class=\"mat-typography\">\r\n</mat-datetimepicker-calendar>\r\n",
                host: {
                    "class": "mat-datetimepicker-content",
                    "[class.mat-datetimepicker-content-touch]": "datetimepicker?.touchUi",
                    "(keydown)": "_handleKeydown($event)"
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mat-datetimepicker-content{background-color:#fff;border-radius:2px;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);display:block;overflow:hidden}.mat-datetimepicker-calendar{height:405px;width:296px}.mat-datetimepicker-calendar[mode=landscape]{height:328px;width:446px}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{height:328px;width:446px}}.mat-datetimepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12);box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block}.cdk-global-overlay-wrapper,.cdk-overlay-container{height:100%;left:0;pointer-events:none;top:0;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{box-sizing:border-box}.cdk-overlay-backdrop,.cdk-overlay-pane{pointer-events:auto;position:absolute;z-index:1000}.cdk-overlay-backdrop{bottom:0;left:0;opacity:0;right:0;top:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.48}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.6)}.mat-datetimepicker-dialog .mat-dialog-container{padding:0}"]
            }]
    }], null, { _calendar: [{
            type: ViewChild,
            args: [MatDatetimepickerCalendar, { static: true }]
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerContent.prototype.datetimepicker;
    /** @type {?} */
    MatDatetimepickerContent.prototype._calendar;
}
/**
 * @template D
 */
class MatDatetimepicker {
    /**
     * @param {?} _dialog
     * @param {?} _overlay
     * @param {?} _ngZone
     * @param {?} _viewContainerRef
     * @param {?} _scrollStrategy
     * @param {?} _dateAdapter
     * @param {?} _dir
     * @param {?} _document
     */
    constructor(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
        this._dialog = _dialog;
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._scrollStrategy = _scrollStrategy;
        this._dateAdapter = _dateAdapter;
        this._dir = _dir;
        this._document = _document;
        /**
         * Active multi year view when click on year.
         */
        this.multiYearSelector = false;
        /**
         * if true change the clock to 12 hour format.
         */
        this.twelvehour = false;
        /**
         * The view that the calendar should start in.
         */
        this.startView = "month";
        this.mode = "auto";
        this.timeInterval = 1;
        this.ariaNextMonthLabel = "Next month";
        this.ariaPrevMonthLabel = "Previous month";
        this.ariaNextYearLabel = "Next year";
        this.ariaPrevYearLabel = "Previous year";
        /**
         * Emits new selected date when selected date changes.
         * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.
         */
        this.selectedChanged = new EventEmitter();
        /**
         * Emits when the datepicker has been opened.
         */
        // tslint:disable-next-line:no-output-rename
        this.openedStream = new EventEmitter();
        /**
         * Emits when the datepicker has been closed.
         */
        // tslint:disable-next-line:no-output-rename
        this.closedStream = new EventEmitter();
        /**
         * Emits when the view has been changed. *
         */
        this.viewChanged = new EventEmitter();
        /**
         * Whether the calendar is open.
         */
        this.opened = false;
        /**
         * The id for the datepicker calendar.
         */
        this.id = `mat-datetimepicker-${datetimepickerUid++}`;
        /**
         * Emits when the datepicker is disabled.
         */
        this._disabledChange = new Subject();
        this._validSelected = null;
        /**
         * The element that was focused before the datepicker was opened.
         */
        this._focusedElementBeforeOpen = null;
        this._inputSubscription = Subscription.EMPTY;
        this._type = "date";
        this._touchUi = false;
        if (!this._dateAdapter) {
            throw createMissingDateImplError("DateAdapter");
        }
    }
    /**
     * The date to open the calendar to initially.
     * @return {?}
     */
    get startAt() {
        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
        // selected value is.
        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    set startAt(date) {
        this._startAt = this._dateAdapter.getValidDateOrNull(date);
    }
    /**
     * @return {?}
     */
    get openOnFocus() {
        return this._openOnFocus;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set openOnFocus(value) {
        this._openOnFocus = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = value || "date";
    }
    /**
     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
     * than a popup and elements have more padding to allow for bigger touch targets.
     * @return {?}
     */
    get touchUi() {
        return this._touchUi;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set touchUi(value) {
        this._touchUi = coerceBooleanProperty(value);
    }
    /**
     * Whether the datepicker pop-up should be disabled.
     * @return {?}
     */
    get disabled() {
        return this._disabled === undefined && this._datepickerInput ?
            this._datepickerInput.disabled : !!this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._disabledChange.next(newValue);
        }
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get _selected() {
        return this._validSelected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _selected(value) {
        this._validSelected = value;
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get _minDate() {
        return this._datepickerInput && this._datepickerInput.min;
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get _maxDate() {
        return this._datepickerInput && this._datepickerInput.max;
    }
    /**
     * @return {?}
     */
    get _dateFilter() {
        return this._datepickerInput && this._datepickerInput._dateFilter;
    }
    /**
     * @return {?}
     */
    _handleFocus() {
        if (!this.opened && this.openOnFocus) {
            this.open();
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    _viewChanged(type) {
        this.viewChanged.emit(type);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.close();
        this._inputSubscription.unsubscribe();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
        }
    }
    /**
     * Selects the given date
     * @param {?} date
     * @return {?}
     */
    _select(date) {
        /** @type {?} */
        const oldValue = this._selected;
        this._selected = date;
        if (!this._dateAdapter.sameDatetime(oldValue, this._selected)) {
            // tslint:disable-next-line deprecation
            this.selectedChanged.emit(date);
        }
    }
    /**
     * Register an input with this datepicker.
     * @param {?} input The datepicker input to register with this datepicker.
     * @return {?}
     */
    _registerInput(input) {
        if (this._datepickerInput) {
            throw Error("A MatDatepicker can only be associated with a single input.");
        }
        this._datepickerInput = input;
        this._inputSubscription =
            this._datepickerInput._valueChange.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            (value) => this._selected = value));
    }
    /**
     * Open the calendar.
     * @return {?}
     */
    open() {
        if (this.opened || this.disabled) {
            return;
        }
        if (!this._datepickerInput) {
            throw Error("Attempted to open an MatDatepicker with no associated input.");
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this.touchUi ? this._openAsDialog() : this._openAsPopup();
        this.opened = true;
        this.openedStream.emit();
    }
    /**
     * Close the calendar.
     * @return {?}
     */
    close() {
        if (!this.opened) {
            return;
        }
        if (this._popupRef && this._popupRef.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._dialogRef) {
            this._dialogRef.close();
            this._dialogRef = null;
        }
        if (this._calendarPortal && this._calendarPortal.isAttached) {
            this._calendarPortal.detach();
        }
        /** @type {?} */
        const completeClose = (/**
         * @return {?}
         */
        () => {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (this.opened) {
                this.opened = false;
                this.closedStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        });
        if (this._focusedElementBeforeOpen &&
            typeof this._focusedElementBeforeOpen.focus === "function") {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the datepicker as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the datepicker on focus, the user could be stuck with not being
            // able to close the calendar at all. We work around it by making the logic, that marks
            // the datepicker as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    }
    /**
     * Open the calendar as a dialog.
     * @private
     * @return {?}
     */
    _openAsDialog() {
        this._dialogRef = this._dialog.open(MatDatetimepickerContent, {
            direction: this._dir ? this._dir.value : "ltr",
            viewContainerRef: this._viewContainerRef,
            panelClass: "mat-datetimepicker-dialog"
        });
        this._dialogRef.afterClosed().subscribe((/**
         * @return {?}
         */
        () => this.close()));
        this._dialogRef.componentInstance.datetimepicker = this;
    }
    /**
     * Open the calendar as a popup.
     * @private
     * @return {?}
     */
    _openAsPopup() {
        if (!this._calendarPortal) {
            this._calendarPortal = new ComponentPortal(MatDatetimepickerContent, this._viewContainerRef);
        }
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            /** @type {?} */
            const componentRef = this._popupRef.attach(this._calendarPortal);
            componentRef.instance.datetimepicker = this;
            // Update the position once the calendar has rendered.
            this._ngZone.onStable.asObservable().pipe(first()).subscribe((/**
             * @return {?}
             */
            () => {
                this._popupRef.updatePosition();
            }));
        }
        this._popupRef.backdropClick().subscribe((/**
         * @return {?}
         */
        () => this.close()));
    }
    /**
     * Create the popup.
     * @private
     * @return {?}
     */
    _createPopup() {
        /** @type {?} */
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: "mat-overlay-transparent-backdrop",
            direction: this._dir ? this._dir.value : "ltr",
            scrollStrategy: this._scrollStrategy(),
            panelClass: "mat-datetimepicker-popup"
        });
        this._popupRef = this._overlay.create(overlayConfig);
    }
    /**
     * Create the popup PositionStrategy.
     * @private
     * @return {?}
     */
    _createPopupPositionStrategy() {
        return this._overlay.position()
            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn(".mat-datetimepicker-content")
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: "start",
                originY: "bottom",
                overlayX: "start",
                overlayY: "top"
            },
            {
                originX: "start",
                originY: "top",
                overlayX: "start",
                overlayY: "bottom"
            },
            {
                originX: "end",
                originY: "bottom",
                overlayX: "end",
                overlayY: "top"
            },
            {
                originX: "end",
                originY: "top",
                overlayX: "end",
                overlayY: "bottom"
            }
        ]);
    }
}
MatDatetimepicker.ɵfac = function MatDatetimepicker_Factory(t) { return new (t || MatDatetimepicker)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATEPICKER_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };
MatDatetimepicker.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepicker, selectors: [["mat-datetimepicker"]], inputs: { multiYearSelector: "multiYearSelector", twelvehour: "twelvehour", startView: "startView", mode: "mode", timeInterval: "timeInterval", ariaNextMonthLabel: "ariaNextMonthLabel", ariaPrevMonthLabel: "ariaPrevMonthLabel", ariaNextYearLabel: "ariaNextYearLabel", ariaPrevYearLabel: "ariaPrevYearLabel", startAt: "startAt", openOnFocus: "openOnFocus", type: "type", touchUi: "touchUi", disabled: "disabled", panelClass: "panelClass" }, outputs: { selectedChanged: "selectedChanged", openedStream: "opened", closedStream: "closed", viewChanged: "viewChanged" }, exportAs: ["matDatetimepicker"], decls: 0, vars: 0, template: function MatDatetimepicker_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MatDatetimepicker.ctorParameters = () => [
    { type: MatDialog },
    { type: Overlay },
    { type: NgZone },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: Directionality, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
MatDatetimepicker.propDecorators = {
    multiYearSelector: [{ type: Input }],
    twelvehour: [{ type: Input }],
    startView: [{ type: Input }],
    mode: [{ type: Input }],
    timeInterval: [{ type: Input }],
    ariaNextMonthLabel: [{ type: Input }],
    ariaPrevMonthLabel: [{ type: Input }],
    ariaNextYearLabel: [{ type: Input }],
    ariaPrevYearLabel: [{ type: Input }],
    selectedChanged: [{ type: Output }],
    panelClass: [{ type: Input }],
    openedStream: [{ type: Output, args: ["opened",] }],
    closedStream: [{ type: Output, args: ["closed",] }],
    viewChanged: [{ type: Output }],
    startAt: [{ type: Input }],
    openOnFocus: [{ type: Input }],
    type: [{ type: Input }],
    touchUi: [{ type: Input }],
    disabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepicker, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker",
                exportAs: "matDatetimepicker",
                template: "",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false
            }]
    }], function () { return [{ type: ɵngcc6.MatDialog }, { type: ɵngcc7.Overlay }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DATEPICKER_SCROLL_STRATEGY]
            }] }, { type: DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: ɵngcc8.Directionality, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { multiYearSelector: [{
            type: Input
        }], twelvehour: [{
            type: Input
        }], startView: [{
            type: Input
        }], mode: [{
            type: Input
        }], timeInterval: [{
            type: Input
        }], ariaNextMonthLabel: [{
            type: Input
        }], ariaPrevMonthLabel: [{
            type: Input
        }], ariaNextYearLabel: [{
            type: Input
        }], ariaPrevYearLabel: [{
            type: Input
        }], selectedChanged: [{
            type: Output
        }], openedStream: [{
            type: Output,
            args: ["opened"]
        }], closedStream: [{
            type: Output,
            args: ["closed"]
        }], viewChanged: [{
            type: Output
        }], startAt: [{
            type: Input
        }], openOnFocus: [{
            type: Input
        }], type: [{
            type: Input
        }], touchUi: [{
            type: Input
        }], disabled: [{
            type: Input
        }], panelClass: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * Active multi year view when click on year.
     * @type {?}
     */
    MatDatetimepicker.prototype.multiYearSelector;
    /**
     * if true change the clock to 12 hour format.
     * @type {?}
     */
    MatDatetimepicker.prototype.twelvehour;
    /**
     * The view that the calendar should start in.
     * @type {?}
     */
    MatDatetimepicker.prototype.startView;
    /** @type {?} */
    MatDatetimepicker.prototype.mode;
    /** @type {?} */
    MatDatetimepicker.prototype.timeInterval;
    /** @type {?} */
    MatDatetimepicker.prototype.ariaNextMonthLabel;
    /** @type {?} */
    MatDatetimepicker.prototype.ariaPrevMonthLabel;
    /** @type {?} */
    MatDatetimepicker.prototype.ariaNextYearLabel;
    /** @type {?} */
    MatDatetimepicker.prototype.ariaPrevYearLabel;
    /**
     * Emits new selected date when selected date changes.
     * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.
     * @type {?}
     */
    MatDatetimepicker.prototype.selectedChanged;
    /**
     * Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`.
     * @type {?}
     */
    MatDatetimepicker.prototype.panelClass;
    /**
     * Emits when the datepicker has been opened.
     * @type {?}
     */
    MatDatetimepicker.prototype.openedStream;
    /**
     * Emits when the datepicker has been closed.
     * @type {?}
     */
    MatDatetimepicker.prototype.closedStream;
    /**
     * Emits when the view has been changed. *
     * @type {?}
     */
    MatDatetimepicker.prototype.viewChanged;
    /**
     * Whether the calendar is open.
     * @type {?}
     */
    MatDatetimepicker.prototype.opened;
    /**
     * The id for the datepicker calendar.
     * @type {?}
     */
    MatDatetimepicker.prototype.id;
    /**
     * The input element this datepicker is associated with.
     * @type {?}
     */
    MatDatetimepicker.prototype._datepickerInput;
    /**
     * Emits when the datepicker is disabled.
     * @type {?}
     */
    MatDatetimepicker.prototype._disabledChange;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._validSelected;
    /**
     * A reference to the overlay when the calendar is opened as a popup.
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._popupRef;
    /**
     * A reference to the dialog when the calendar is opened as a dialog.
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._dialogRef;
    /**
     * A portal containing the calendar for this datepicker.
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._calendarPortal;
    /**
     * The element that was focused before the datepicker was opened.
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._focusedElementBeforeOpen;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._inputSubscription;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._startAt;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._openOnFocus;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._type;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._touchUi;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._dialog;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._scrollStrategy;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._dir;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepicker.prototype._document;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/datetimepicker-input.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable no-use-before-declare
/** @type {?} */
const MAT_DATETIMEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => MatDatetimepickerInput)),
    multi: true
};
/** @type {?} */
const MAT_DATETIMEPICKER_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => MatDatetimepickerInput)),
    multi: true
};
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.
 * @template D
 */
class MatDatetimepickerInputEvent {
    /**
     * @param {?} target
     * @param {?} targetElement
     */
    constructor(target, targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
if (false) {
    /**
     * The new value for the target datepicker input.
     * @type {?}
     */
    MatDatetimepickerInputEvent.prototype.value;
    /** @type {?} */
    MatDatetimepickerInputEvent.prototype.target;
    /** @type {?} */
    MatDatetimepickerInputEvent.prototype.targetElement;
}
/**
 * Directive used to connect an input to a MatDatepicker.
 * @template D
 */
class MatDatetimepickerInput {
    /**
     * @param {?} _elementRef
     * @param {?} _dateAdapter
     * @param {?} _dateFormats
     * @param {?} _formField
     */
    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {
        this._elementRef = _elementRef;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this._formField = _formField;
        /**
         * Emits when a `change` event is fired on this `<input>`.
         */
        this.dateChange = new EventEmitter();
        /**
         * Emits when an `input` event is fired on this `<input>`.
         */
        this.dateInput = new EventEmitter();
        /**
         * Emits when the value changes (either due to user input or programmatic change).
         */
        this._valueChange = new EventEmitter();
        /**
         * Emits when the disabled state has changed
         */
        this._disabledChange = new EventEmitter();
        this._datepickerSubscription = Subscription.EMPTY;
        this._localeSubscription = Subscription.EMPTY;
        /**
         * Whether the last value set on the input was valid.
         */
        this._lastValueValid = false;
        this._onTouched = (/**
         * @return {?}
         */
        () => {
        });
        this._cvaOnChange = (/**
         * @return {?}
         */
        () => {
        });
        this._validatorOnChange = (/**
         * @return {?}
         */
        () => {
        });
        /**
         * The form control validator for whether the input parses.
         */
        this._parseValidator = (/**
         * @return {?}
         */
        () => {
            return this._lastValueValid ?
                null : { "matDatepickerParse": { "text": this._elementRef.nativeElement.value } };
        });
        /**
         * The form control validator for the min date.
         */
        this._minValidator = (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));
            return (!this.min || !controlValue ||
                this._dateAdapter.compareDatetime(this.min, controlValue) <= 0) ?
                null : { "matDatepickerMin": { "min": this.min, "actual": controlValue } };
        });
        /**
         * The form control validator for the max date.
         */
        this._maxValidator = (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));
            return (!this.max || !controlValue ||
                this._dateAdapter.compareDatetime(this.max, controlValue) >= 0) ?
                null : { "matDatepickerMax": { "max": this.max, "actual": controlValue } };
        });
        /**
         * The form control validator for the date filter.
         */
        this._filterValidator = (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));
            return !this._dateFilter || !controlValue || this._dateFilter(controlValue, MatDatetimepickerFilterType.DATE) ?
                null : { "matDatepickerFilter": true };
        });
        /**
         * The combined form control validator for this input.
         */
        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);
        if (!this._dateAdapter) {
            throw createMissingDateImplError("DatetimeAdapter");
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError("MAT_DATETIME_FORMATS");
        }
        // Update the displayed date when the locale changes.
        this._localeSubscription = _dateAdapter.localeChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this.value = this.value;
        }));
    }
    /**
     * The datepicker that this input is associated with.
     * @param {?} value
     * @return {?}
     */
    set matDatetimepicker(value) {
        this.registerDatepicker(value);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    set matDatepickerFilter(filter) {
        this._dateFilter = filter;
        this._validatorOnChange();
    }
    /**
     * The value of the input.
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        value = this._dateAdapter.deserialize(value);
        this._lastValueValid = !value || this._dateAdapter.isValid(value);
        value = this._dateAdapter.getValidDateOrNull(value);
        /** @type {?} */
        const oldDate = this.value;
        this._value = value;
        this._formatValue(value);
        // use timeout to ensure the datetimepicker is instantiated and we get the correct format
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (!this._dateAdapter.sameDatetime(oldDate, value)) {
                this._valueChange.emit(value);
            }
        }));
    }
    /**
     * The minimum valid date.
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /**
     * The maximum valid date.
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._validatorOnChange();
    }
    /**
     * Whether the datepicker-input is disabled.
     * @return {?}
     */
    get disabled() {
        return !!this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._disabledChange.emit(newValue);
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._datepicker) {
            // tslint:disable-next-line deprecation
            this._datepickerSubscription = this._datepicker.selectedChanged.subscribe((/**
             * @param {?} selected
             * @return {?}
             */
            (selected) => {
                this.value = selected;
                this._cvaOnChange(selected);
                this._onTouched();
                this.dateInput.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));
                this.dateChange.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._datepickerSubscription.unsubscribe();
        this._localeSubscription.unsubscribe();
        this._valueChange.complete();
        this._disabledChange.complete();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this._validatorOnChange = fn;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this._validator ? this._validator(c) : null;
    }
    /**
     * Gets the element that the datepicker popup should be connected to.
     * @return {?} The element to connect the popup to.
     */
    getConnectedOverlayOrigin() {
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
    }
    // Implemented as part of ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    // Implemented as part of ControlValueAccessor
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    // Implemented as part of ControlValueAccessor
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onKeydown(event) {
        // tslint:disable-next-line:deprecation
        if (event.altKey && event.keyCode === DOWN_ARROW) {
            this._datepicker.open();
            event.preventDefault();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _onInput(value) {
        /** @type {?} */
        let date = this._dateAdapter.parse(value, this.getParseFormat());
        this._lastValueValid = !date || this._dateAdapter.isValid(date);
        date = this._dateAdapter.getValidDateOrNull(date);
        this._value = date;
        this._cvaOnChange(date);
        this._valueChange.emit(date);
        this.dateInput.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));
    }
    /**
     * @return {?}
     */
    _onChange() {
        this.dateChange.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));
    }
    /**
     * Handles blur events on the input.
     * @return {?}
     */
    _onBlur() {
        // Reformat the input only if we have a valid value.
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    registerDatepicker(value) {
        if (value) {
            this._datepicker = value;
            this._datepicker._registerInput(this);
        }
    }
    /**
     * @private
     * @return {?}
     */
    getDisplayFormat() {
        switch (this._datepicker.type) {
            case "date":
                return this._dateFormats.display.dateInput;
            case "datetime":
                return this._dateFormats.display.datetimeInput;
            case "time":
                return this._dateFormats.display.timeInput;
            case "month":
                return this._dateFormats.display.monthInput;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getParseFormat() {
        /** @type {?} */
        let parseFormat;
        switch (this._datepicker.type) {
            case "date":
                parseFormat = this._dateFormats.parse.dateInput;
                break;
            case "datetime":
                parseFormat = this._dateFormats.parse.datetimeInput;
                break;
            case "time":
                parseFormat = this._dateFormats.parse.timeInput;
                break;
            case "month":
                parseFormat = this._dateFormats.parse.monthInput;
                break;
        }
        if (!parseFormat) {
            parseFormat = this._dateFormats.parse.dateInput;
        }
        return parseFormat;
    }
    /**
     * Formats a value and sets it on the input element.
     * @private
     * @param {?} value
     * @return {?}
     */
    _formatValue(value) {
        this._elementRef.nativeElement.value =
            value ? this._dateAdapter.format(value, this.getDisplayFormat()) : "";
    }
}
MatDatetimepickerInput.ɵfac = function MatDatetimepickerInput_Factory(t) { return new (t || MatDatetimepickerInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATETIME_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.MatFormField, 8)); };
MatDatetimepickerInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDatetimepickerInput, selectors: [["input", "matDatetimepicker", ""]], hostVars: 5, hostBindings: function MatDatetimepickerInput_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function MatDatetimepickerInput_focus_HostBindingHandler() { return ctx._datepicker._handleFocus(); })("input", function MatDatetimepickerInput_input_HostBindingHandler($event) { return ctx._onInput($event.target.value); })("change", function MatDatetimepickerInput_change_HostBindingHandler() { return ctx._onChange(); })("blur", function MatDatetimepickerInput_blur_HostBindingHandler() { return ctx._onBlur(); })("keydown", function MatDatetimepickerInput_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("aria-haspopup", true)("aria-owns", (ctx._datepicker == null ? null : ctx._datepicker.opened) && ctx._datepicker.id || null)("min", ctx.min ? ctx._dateAdapter.toIso8601(ctx.min) : null)("max", ctx.max ? ctx._dateAdapter.toIso8601(ctx.max) : null);
    } }, inputs: { value: "value", matDatetimepicker: "matDatetimepicker", matDatepickerFilter: "matDatepickerFilter", min: "min", max: "max", disabled: "disabled" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, exportAs: ["matDatepickerInput"], features: [ɵngcc0.ɵɵProvidersFeature([
            MAT_DATETIMEPICKER_VALUE_ACCESSOR,
            MAT_DATETIMEPICKER_VALIDATORS,
            { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatetimepickerInput },
        ])] });
/** @nocollapse */
MatDatetimepickerInput.ctorParameters = () => [
    { type: ElementRef },
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATETIME_FORMATS,] }] },
    { type: MatFormField, decorators: [{ type: Optional }] }
];
MatDatetimepickerInput.propDecorators = {
    dateChange: [{ type: Output }],
    dateInput: [{ type: Output }],
    matDatetimepicker: [{ type: Input }],
    matDatepickerFilter: [{ type: Input }],
    value: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    disabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerInput, [{
        type: Directive,
        args: [{
                selector: "input[matDatetimepicker]",
                providers: [
                    MAT_DATETIMEPICKER_VALUE_ACCESSOR,
                    MAT_DATETIMEPICKER_VALIDATORS,
                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatetimepickerInput },
                ],
                host: {
                    "[attr.aria-haspopup]": "true",
                    "[attr.aria-owns]": "(_datepicker?.opened && _datepicker.id) || null",
                    "[attr.min]": "min ? _dateAdapter.toIso8601(min) : null",
                    "[attr.max]": "max ? _dateAdapter.toIso8601(max) : null",
                    "[disabled]": "disabled",
                    "(focus)": "_datepicker._handleFocus()",
                    "(input)": "_onInput($event.target.value)",
                    "(change)": "_onChange()",
                    "(blur)": "_onBlur()",
                    "(keydown)": "_onKeydown($event)"
                },
                exportAs: "matDatepickerInput"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATETIME_FORMATS]
            }] }, { type: ɵngcc9.MatFormField, decorators: [{
                type: Optional
            }] }]; }, { dateChange: [{
            type: Output
        }], dateInput: [{
            type: Output
        }], value: [{
            type: Input
        }], matDatetimepicker: [{
            type: Input
        }], matDatepickerFilter: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerInput.prototype._datepicker;
    /** @type {?} */
    MatDatetimepickerInput.prototype._dateFilter;
    /**
     * Emits when a `change` event is fired on this `<input>`.
     * @type {?}
     */
    MatDatetimepickerInput.prototype.dateChange;
    /**
     * Emits when an `input` event is fired on this `<input>`.
     * @type {?}
     */
    MatDatetimepickerInput.prototype.dateInput;
    /**
     * Emits when the value changes (either due to user input or programmatic change).
     * @type {?}
     */
    MatDatetimepickerInput.prototype._valueChange;
    /**
     * Emits when the disabled state has changed
     * @type {?}
     */
    MatDatetimepickerInput.prototype._disabledChange;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._datepickerSubscription;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._localeSubscription;
    /**
     * Whether the last value set on the input was valid.
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._lastValueValid;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._value;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._min;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._max;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._disabled;
    /** @type {?} */
    MatDatetimepickerInput.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._cvaOnChange;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._validatorOnChange;
    /**
     * The form control validator for whether the input parses.
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._parseValidator;
    /**
     * The form control validator for the min date.
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._minValidator;
    /**
     * The form control validator for the max date.
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._maxValidator;
    /**
     * The form control validator for the date filter.
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._filterValidator;
    /**
     * The combined form control validator for this input.
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._validator;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._elementRef;
    /** @type {?} */
    MatDatetimepickerInput.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._dateFormats;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerInput.prototype._formField;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/datetimepicker-toggle.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template D
 */
class MatDatetimepickerToggle {
    /**
     * @param {?} _intl
     * @param {?} _changeDetectorRef
     */
    constructor(_intl, _changeDetectorRef) {
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._stateChanges = Subscription.EMPTY;
    }
    /**
     * Whether the toggle button is disabled.
     * @return {?}
     */
    get disabled() {
        return this._disabled === undefined ? this.datetimepicker.disabled : !!this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.datepicker) {
            this._watchStateChanges();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._watchStateChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _open(event) {
        if (this.datetimepicker && !this.disabled) {
            this.datetimepicker.open();
            event.stopPropagation();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _watchStateChanges() {
        /** @type {?} */
        const datepickerDisabled = this.datetimepicker ? this.datetimepicker._disabledChange : of();
        /** @type {?} */
        const inputDisabled = this.datetimepicker && this.datetimepicker._datepickerInput ?
            this.datetimepicker._datepickerInput._disabledChange : of();
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)
            .subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
    }
}
MatDatetimepickerToggle.ɵfac = function MatDatetimepickerToggle_Factory(t) { return new (t || MatDatetimepickerToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MatDatetimepickerToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerToggle, selectors: [["mat-datetimepicker-toggle"]], hostAttrs: [1, "mat-datetimepicker-toggle"], inputs: { disabled: "disabled", datetimepicker: ["for", "datetimepicker"] }, exportAs: ["matDatetimepickerToggle"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 5, consts: [["mat-icon-button", "", "type", "button", 3, "disabled", "click"], [3, "ngSwitch"], ["fill", "currentColor", "focusable", "false", "height", "100%", "style", "vertical-align: top", "viewBox", "0 0 24 24", "width", "100%", 4, "ngSwitchCase"], ["fill", "currentColor", "focusable", "false", "height", "100%", "style", "vertical-align: top", "viewBox", "0 0 24 24", "width", "100%", 4, "ngSwitchDefault"], ["fill", "currentColor", "focusable", "false", "height", "100%", "viewBox", "0 0 24 24", "width", "100%", 2, "vertical-align", "top"], ["d", "M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z"], ["d", "M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z"], ["d", "M0 0h24v24H0z", "fill", "none"], ["d", "M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"]], template: function MatDatetimepickerToggle_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function MatDatetimepickerToggle_Template_button_click_0_listener($event) { return ctx._open($event); });
        ɵngcc0.ɵɵelementStart(1, "mat-icon", 1);
        ɵngcc0.ɵɵtemplate(2, MatDatetimepickerToggle__svg_svg_2_Template, 2, 0, "svg", 2);
        ɵngcc0.ɵɵtemplate(3, MatDatetimepickerToggle__svg_svg_3_Template, 2, 0, "svg", 2);
        ɵngcc0.ɵɵtemplate(4, MatDatetimepickerToggle__svg_svg_4_Template, 3, 0, "svg", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("aria-label", ctx._intl.openCalendarLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.datetimepicker.type);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "time");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "datetime");
    } }, directives: [ɵngcc10.MatButton, ɵngcc4.MatIcon, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgSwitchDefault], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
MatDatetimepickerToggle.ctorParameters = () => [
    { type: MatDatepickerIntl },
    { type: ChangeDetectorRef }
];
MatDatetimepickerToggle.propDecorators = {
    datetimepicker: [{ type: Input, args: ["for",] }],
    disabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerToggle, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-toggle",
                template: "<button (click)=\"_open($event)\" [attr.aria-label]=\"_intl.openCalendarLabel\" [disabled]=\"disabled\"\r\n        mat-icon-button type=\"button\">\r\n  <mat-icon [ngSwitch]=\"datetimepicker.type\">\r\n    <svg *ngSwitchCase=\"'time'\" fill=\"currentColor\" focusable=\"false\" height=\"100%\" style=\"vertical-align: top\"\r\n         viewBox=\"0 0 24 24\" width=\"100%\">\r\n      <path\r\n        d=\"M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z\"></path>\r\n    </svg>\r\n    <svg *ngSwitchCase=\"'datetime'\" fill=\"currentColor\" focusable=\"false\" height=\"100%\" style=\"vertical-align: top\"\r\n         viewBox=\"0 0 24 24\" width=\"100%\">\r\n      <path\r\n        d=\"M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z\"></path>\r\n    </svg>\r\n    <svg *ngSwitchDefault fill=\"currentColor\" focusable=\"false\" height=\"100%\" style=\"vertical-align: top\"\r\n         viewBox=\"0 0 24 24\" width=\"100%\">\r\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n      <path\r\n        d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\r\n    </svg>\r\n  </mat-icon>\r\n</button>\r\n",
                host: {
                    "class": "mat-datetimepicker-toggle"
                },
                exportAs: "matDatetimepickerToggle",
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc3.MatDatepickerIntl }, { type: ɵngcc0.ChangeDetectorRef }]; }, { disabled: [{
            type: Input
        }], datetimepicker: [{
            type: Input,
            args: ["for"]
        }] }); })();
if (false) {
    /**
     * Datepicker instance that the button will toggle.
     * @type {?}
     */
    MatDatetimepickerToggle.prototype.datetimepicker;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerToggle.prototype._stateChanges;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerToggle.prototype._disabled;
    /** @type {?} */
    MatDatetimepickerToggle.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerToggle.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/month-view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DAYS_PER_WEEK = 7;
/**
 * An internal component used to display a single month in the datepicker.
 * \@docs-private
 * @template D
 */
class MatDatetimepickerMonthView {
    /**
     * @param {?} _adapter
     * @param {?} _dateFormats
     */
    constructor(_adapter, _dateFormats) {
        this._adapter = _adapter;
        this._dateFormats = _dateFormats;
        this.type = "date";
        this._userSelection = new EventEmitter();
        /**
         * Emits when a new date is selected.
         */
        this.selectedChange = new EventEmitter();
        if (!this._adapter) {
            throw createMissingDateImplError("DatetimeAdapter");
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError("MAT_DATETIME_FORMATS");
        }
        /** @type {?} */
        const firstDayOfWeek = this._adapter.getFirstDayOfWeek();
        /** @type {?} */
        const narrowWeekdays = this._adapter.getDayOfWeekNames("narrow");
        /** @type {?} */
        const longWeekdays = this._adapter.getDayOfWeekNames("long");
        // Rotate the labels for days of the week based on the configured first day of the week.
        /** @type {?} */
        let weekdays = longWeekdays.map((/**
         * @param {?} long
         * @param {?} i
         * @return {?}
         */
        (long, i) => {
            return { long, narrow: narrowWeekdays[i] };
        }));
        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
        this._activeDate = this._adapter.today();
    }
    /**
     * The date to display in this month view (everything other than the month and year is ignored).
     * @return {?}
     */
    get activeDate() {
        return this._activeDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set activeDate(value) {
        /** @type {?} */
        let oldActiveDate = this._activeDate;
        this._activeDate = value || this._adapter.today();
        if (oldActiveDate && this._activeDate &&
            !this._adapter.sameMonthAndYear(oldActiveDate, this._activeDate)) {
            this._init();
            if (this._adapter.isInNextMonth(oldActiveDate, this._activeDate)) {
                this.calendarState("right");
            }
            else {
                this.calendarState("left");
            }
        }
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = value;
        this._selectedDate = this._getDateInCurrentMonth(this.selected);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._init();
    }
    /**
     * Handles when a new date is selected.
     * @param {?} date
     * @return {?}
     */
    _dateSelected(date) {
        this.selectedChange.emit(this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), date, this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate)));
        if (this.type === "date") {
            this._userSelection.emit();
        }
    }
    /**
     * @return {?}
     */
    _calendarStateDone() {
        this._calendarState = "";
    }
    /**
     * Initializes this month view.
     * @private
     * @return {?}
     */
    _init() {
        this._selectedDate = this._getDateInCurrentMonth(this.selected);
        this._todayDate = this._getDateInCurrentMonth(this._adapter.today());
        /** @type {?} */
        let firstOfMonth = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), 1, this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate));
        this._firstWeekOffset =
            (DAYS_PER_WEEK + this._adapter.getDayOfWeek(firstOfMonth) -
                this._adapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
        this._createWeekCells();
    }
    /**
     * Creates MdCalendarCells for the dates in this month.
     * @private
     * @return {?}
     */
    _createWeekCells() {
        /** @type {?} */
        let daysInMonth = this._adapter.getNumDaysInMonth(this.activeDate);
        /** @type {?} */
        let dateNames = this._adapter.getDateNames();
        this._weeks = [[]];
        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
            if (cell == DAYS_PER_WEEK) {
                this._weeks.push([]);
                cell = 0;
            }
            /** @type {?} */
            let date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), i + 1, this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate));
            /** @type {?} */
            let enabled = !this.dateFilter ||
                this.dateFilter(date);
            /** @type {?} */
            let ariaLabel = this._adapter.format(date, this._dateFormats.display.dateA11yLabel);
            this._weeks[this._weeks.length - 1]
                .push(new MatDatetimepickerCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
        }
    }
    /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     * @private
     * @param {?} date
     * @return {?}
     */
    _getDateInCurrentMonth(date) {
        return this._adapter.sameMonthAndYear(date, this.activeDate) ?
            this._adapter.getDate(date) : null;
    }
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    calendarState(direction) {
        this._calendarState = direction;
    }
}
MatDatetimepickerMonthView.ɵfac = function MatDatetimepickerMonthView_Factory(t) { return new (t || MatDatetimepickerMonthView)(ɵngcc0.ɵɵdirectiveInject(DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATETIME_FORMATS, 8)); };
MatDatetimepickerMonthView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerMonthView, selectors: [["mat-datetimepicker-month-view"]], inputs: { type: "type", activeDate: "activeDate", selected: "selected", dateFilter: "dateFilter" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange" }, decls: 5, vars: 6, consts: [[1, "mat-datetimepicker-calendar-table"], [1, "mat-datetimepicker-calendar-table-header"], [4, "ngFor", "ngForOf"], ["mat-datetimepicker-calendar-body", "", "role", "grid", 3, "activeCell", "rows", "selectedValue", "todayValue", "selectedValueChange"]], template: function MatDatetimepickerMonthView_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table", 0);
        ɵngcc0.ɵɵelementStart(1, "thead", 1);
        ɵngcc0.ɵɵelementStart(2, "tr");
        ɵngcc0.ɵɵtemplate(3, MatDatetimepickerMonthView_th_3_Template, 2, 2, "th", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "tbody", 3);
        ɵngcc0.ɵɵlistener("@slideCalendar.done", function MatDatetimepickerMonthView_Template_tbody_animation_slideCalendar_done_4_listener() { return ctx._calendarStateDone(); })("selectedValueChange", function MatDatetimepickerMonthView_Template_tbody_selectedValueChange_4_listener($event) { return ctx._dateSelected($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx._weekdays);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@slideCalendar", ctx._calendarState)("activeCell", ctx._adapter.getDate(ctx.activeDate) - 1)("rows", ctx._weeks)("selectedValue", ctx._selectedDate)("todayValue", ctx._todayDate);
    } }, directives: [ɵngcc2.NgForOf, MatDatetimepickerCalendarBody], encapsulation: 2, data: { animation: [slideCalendar] }, changeDetection: 0 });
/** @nocollapse */
MatDatetimepickerMonthView.ctorParameters = () => [
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATETIME_FORMATS,] }] }
];
MatDatetimepickerMonthView.propDecorators = {
    type: [{ type: Input }],
    _userSelection: [{ type: Output }],
    dateFilter: [{ type: Input }],
    selectedChange: [{ type: Output }],
    activeDate: [{ type: Input }],
    selected: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerMonthView, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-month-view",
                template: "<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\">\r\n  <tr>\r\n    <th *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody (@slideCalendar.done)=\"_calendarStateDone()\"\r\n         (selectedValueChange)=\"_dateSelected($event)\"\r\n         [@slideCalendar]=\"_calendarState\"\r\n         [activeCell]=\"_adapter.getDate(activeDate) - 1\"\r\n         [rows]=\"_weeks\"\r\n         [selectedValue]=\"_selectedDate\"\r\n         [todayValue]=\"_todayDate\"\r\n         mat-datetimepicker-calendar-body\r\n         role=\"grid\"></tbody>\r\n</table>\r\n",
                animations: [slideCalendar],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATETIME_FORMATS]
            }] }]; }, { type: [{
            type: Input
        }], _userSelection: [{
            type: Output
        }], selectedChange: [{
            type: Output
        }], activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerMonthView.prototype.type;
    /** @type {?} */
    MatDatetimepickerMonthView.prototype._userSelection;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatDatetimepickerMonthView.prototype.dateFilter;
    /**
     * Emits when a new date is selected.
     * @type {?}
     */
    MatDatetimepickerMonthView.prototype.selectedChange;
    /**
     * Grid of calendar cells representing the dates of the month.
     * @type {?}
     */
    MatDatetimepickerMonthView.prototype._weeks;
    /**
     * The number of blank cells in the first row before the 1st of the month.
     * @type {?}
     */
    MatDatetimepickerMonthView.prototype._firstWeekOffset;
    /**
     * The date of the month that the currently selected Date falls on.
     * Null if the currently selected Date is in another month.
     * @type {?}
     */
    MatDatetimepickerMonthView.prototype._selectedDate;
    /**
     * The date of the month that today falls on. Null if today is in another month.
     * @type {?}
     */
    MatDatetimepickerMonthView.prototype._todayDate;
    /**
     * The names of the weekdays.
     * @type {?}
     */
    MatDatetimepickerMonthView.prototype._weekdays;
    /** @type {?} */
    MatDatetimepickerMonthView.prototype._calendarState;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMonthView.prototype._activeDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMonthView.prototype._selected;
    /** @type {?} */
    MatDatetimepickerMonthView.prototype._adapter;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMonthView.prototype._dateFormats;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/year-view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An internal component used to display a single year in the datepicker.
 * \@docs-private
 * @template D
 */
class MatDatetimepickerYearView {
    /**
     * @param {?} _adapter
     * @param {?} _dateFormats
     */
    constructor(_adapter, _dateFormats) {
        this._adapter = _adapter;
        this._dateFormats = _dateFormats;
        this._userSelection = new EventEmitter();
        this.type = "date";
        /**
         * Emits when a new month is selected.
         */
        this.selectedChange = new EventEmitter();
        if (!this._adapter) {
            throw createMissingDateImplError("DatetimeAdapter");
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError("MAT_DATETIME_FORMATS");
        }
        this._activeDate = this._adapter.today();
    }
    /**
     * The date to display in this year view (everything other than the year is ignored).
     * @return {?}
     */
    get activeDate() {
        return this._activeDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set activeDate(value) {
        /** @type {?} */
        let oldActiveDate = this._activeDate;
        this._activeDate = value || this._adapter.today();
        if (oldActiveDate && this._activeDate &&
            !this._adapter.sameYear(oldActiveDate, this._activeDate)) {
            this._init();
            // if (oldActiveDate < this._activeDate) {
            //  this.calendarState('right');
            // } else {
            //  this.calendarState('left');
            // }
        }
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = value;
        this._selectedMonth = this._getMonthInCurrentYear(this.selected);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._init();
    }
    /**
     * Handles when a new month is selected.
     * @param {?} month
     * @return {?}
     */
    _monthSelected(month) {
        /** @type {?} */
        const normalizedDate = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), month, 1, 0, 0);
        this.selectedChange.emit(this._adapter.createDatetime(this._adapter.getYear(this.activeDate), month, Math.min(this._adapter.getDate(this.activeDate), this._adapter.getNumDaysInMonth(normalizedDate)), this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate)));
        if (this.type === "month") {
            this._userSelection.emit();
        }
    }
    /**
     * @return {?}
     */
    _calendarStateDone() {
        this._calendarState = "";
    }
    /**
     * Initializes this month view.
     * @private
     * @return {?}
     */
    _init() {
        this._selectedMonth = this._getMonthInCurrentYear(this.selected);
        this._todayMonth = this._getMonthInCurrentYear(this._adapter.today());
        this._yearLabel = this._adapter.getYearName(this.activeDate);
        /** @type {?} */
        let monthNames = this._adapter.getMonthNames("short");
        // First row of months only contains 5 elements so we can fit the year label on the same row.
        this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map((/**
         * @param {?} row
         * @return {?}
         */
        row => row.map((/**
         * @param {?} month
         * @return {?}
         */
        month => this._createCellForMonth(month, monthNames[month])))));
    }
    /**
     * Gets the month in this year that the given Date falls on.
     * Returns null if the given Date is in another year.
     * @private
     * @param {?} date
     * @return {?}
     */
    _getMonthInCurrentYear(date) {
        return this._adapter.sameYear(date, this.activeDate) ?
            this._adapter.getMonth(date) : null;
    }
    /**
     * Creates an MdCalendarCell for the given month.
     * @private
     * @param {?} month
     * @param {?} monthName
     * @return {?}
     */
    _createCellForMonth(month, monthName) {
        /** @type {?} */
        let ariaLabel = this._adapter.format(this._adapter.createDatetime(this._adapter.getYear(this.activeDate), month, 1, this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate)), this._dateFormats.display.monthYearA11yLabel);
        return new MatDatetimepickerCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));
    }
    // private calendarState(direction: string): void {
    //   this._calendarState = direction;
    // }
    /**
     * Whether the given month is enabled.
     * @private
     * @param {?} month
     * @return {?}
     */
    _isMonthEnabled(month) {
        if (!this.dateFilter) {
            return true;
        }
        /** @type {?} */
        let firstOfMonth = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), month, 1, this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate));
        // If any date in the month is enabled count the month as enabled.
        for (let date = firstOfMonth; this._adapter.getMonth(date) == month; date = this._adapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
}
MatDatetimepickerYearView.ɵfac = function MatDatetimepickerYearView_Factory(t) { return new (t || MatDatetimepickerYearView)(ɵngcc0.ɵɵdirectiveInject(DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATETIME_FORMATS, 8)); };
MatDatetimepickerYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerYearView, selectors: [["mat-datetimepicker-year-view"]], inputs: { type: "type", activeDate: "activeDate", selected: "selected", dateFilter: "dateFilter" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange" }, decls: 3, vars: 7, consts: [[1, "mat-datetimepicker-calendar-table"], [1, "mat-datetimepicker-calendar-table-header"], ["allowDisabledSelection", "true", "mat-datetimepicker-calendar-body", "", "role", "grid", 3, "activeCell", "labelMinRequiredCells", "label", "rows", "selectedValue", "todayValue", "selectedValueChange"]], template: function MatDatetimepickerYearView_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table", 0);
        ɵngcc0.ɵɵelement(1, "thead", 1);
        ɵngcc0.ɵɵelementStart(2, "tbody", 2);
        ɵngcc0.ɵɵlistener("@slideCalendar.done", function MatDatetimepickerYearView_Template_tbody_animation_slideCalendar_done_2_listener() { return ctx._calendarStateDone(); })("selectedValueChange", function MatDatetimepickerYearView_Template_tbody_selectedValueChange_2_listener($event) { return ctx._monthSelected($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("@slideCalendar", ctx._calendarState)("activeCell", ctx._adapter.getMonth(ctx.activeDate))("labelMinRequiredCells", 2)("label", ctx._yearLabel)("rows", ctx._months)("selectedValue", ctx._selectedMonth)("todayValue", ctx._todayMonth);
    } }, directives: [MatDatetimepickerCalendarBody], encapsulation: 2, data: { animation: [slideCalendar] }, changeDetection: 0 });
/** @nocollapse */
MatDatetimepickerYearView.ctorParameters = () => [
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATETIME_FORMATS,] }] }
];
MatDatetimepickerYearView.propDecorators = {
    _userSelection: [{ type: Output }],
    type: [{ type: Input }],
    dateFilter: [{ type: Input }],
    selectedChange: [{ type: Output }],
    activeDate: [{ type: Input }],
    selected: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerYearView, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-year-view",
                template: "<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\"></thead>\r\n  <tbody (@slideCalendar.done)=\"_calendarStateDone()\"\r\n         (selectedValueChange)=\"_monthSelected($event)\"\r\n         [@slideCalendar]=\"_calendarState\"\r\n         [activeCell]=\"_adapter.getMonth(activeDate)\"\r\n         [labelMinRequiredCells]=\"2\"\r\n         [label]=\"_yearLabel\"\r\n         [rows]=\"_months\"\r\n         [selectedValue]=\"_selectedMonth\"\r\n         [todayValue]=\"_todayMonth\"\r\n         allowDisabledSelection=\"true\"\r\n         mat-datetimepicker-calendar-body\r\n         role=\"grid\"></tbody>\r\n</table>\r\n",
                animations: [slideCalendar],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATETIME_FORMATS]
            }] }]; }, { _userSelection: [{
            type: Output
        }], type: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerYearView.prototype._userSelection;
    /** @type {?} */
    MatDatetimepickerYearView.prototype.type;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatDatetimepickerYearView.prototype.dateFilter;
    /**
     * Emits when a new month is selected.
     * @type {?}
     */
    MatDatetimepickerYearView.prototype.selectedChange;
    /**
     * Grid of calendar cells representing the months of the year.
     * @type {?}
     */
    MatDatetimepickerYearView.prototype._months;
    /**
     * The label for this year (e.g. "2017").
     * @type {?}
     */
    MatDatetimepickerYearView.prototype._yearLabel;
    /**
     * The month in this year that today falls on. Null if today is in a different year.
     * @type {?}
     */
    MatDatetimepickerYearView.prototype._todayMonth;
    /**
     * The month in this year that the selected Date falls on.
     * Null if the selected Date is in a different year.
     * @type {?}
     */
    MatDatetimepickerYearView.prototype._selectedMonth;
    /** @type {?} */
    MatDatetimepickerYearView.prototype._calendarState;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerYearView.prototype._activeDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerYearView.prototype._selected;
    /** @type {?} */
    MatDatetimepickerYearView.prototype._adapter;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerYearView.prototype._dateFormats;
}

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/datetimepicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatDatetimepickerModule {
}
MatDatetimepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDatetimepickerModule });
MatDatetimepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDatetimepickerModule_Factory(t) { return new (t || MatDatetimepickerModule)(); }, imports: [[
            CommonModule,
            MatButtonModule,
            MatDialogModule,
            MatIconModule,
            OverlayModule,
            A11yModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDatetimepickerModule, { declarations: function () { return [MatDatetimepickerCalendar, MatDatetimepickerCalendarBody, MatDatetimepickerClock, MatDatetimepicker, MatDatetimepickerToggle, MatDatetimepickerInput, MatDatetimepickerContent, MatDatetimepickerMonthView, MatDatetimepickerYearView, MatDatetimepickerMultiYearView]; }, imports: function () { return [CommonModule,
        MatButtonModule,
        MatDialogModule,
        MatIconModule,
        OverlayModule,
        A11yModule]; }, exports: function () { return [MatDatetimepickerCalendar, MatDatetimepickerCalendarBody, MatDatetimepickerClock, MatDatetimepicker, MatDatetimepickerToggle, MatDatetimepickerInput, MatDatetimepickerContent, MatDatetimepickerMonthView, MatDatetimepickerYearView, MatDatetimepickerMultiYearView]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MatButtonModule,
                    MatDialogModule,
                    MatIconModule,
                    OverlayModule,
                    A11yModule
                ],
                entryComponents: [
                    MatDatetimepickerContent
                ],
                declarations: [
                    MatDatetimepickerCalendar,
                    MatDatetimepickerCalendarBody,
                    MatDatetimepickerClock,
                    MatDatetimepicker,
                    MatDatetimepickerToggle,
                    MatDatetimepickerInput,
                    MatDatetimepickerContent,
                    MatDatetimepickerMonthView,
                    MatDatetimepickerYearView,
                    MatDatetimepickerMultiYearView
                ],
                exports: [
                    MatDatetimepickerCalendar,
                    MatDatetimepickerCalendarBody,
                    MatDatetimepickerClock,
                    MatDatetimepicker,
                    MatDatetimepickerToggle,
                    MatDatetimepickerInput,
                    MatDatetimepickerContent,
                    MatDatetimepickerMonthView,
                    MatDatetimepickerYearView,
                    MatDatetimepickerMultiYearView
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: mat-datetimepicker-core.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CLOCK_INNER_RADIUS, CLOCK_OUTER_RADIUS, CLOCK_RADIUS, CLOCK_TICK_RADIUS, DatetimeAdapter, MAT_DATETIMEPICKER_VALIDATORS, MAT_DATETIMEPICKER_VALUE_ACCESSOR, MAT_DATETIME_FORMATS, MAT_NATIVE_DATETIME_FORMATS, MatDatetimepicker, MatDatetimepickerCalendar, MatDatetimepickerCalendarBody, MatDatetimepickerCalendarCell, MatDatetimepickerClock, MatDatetimepickerContent, MatDatetimepickerFilterType, MatDatetimepickerInput, MatDatetimepickerInputEvent, MatDatetimepickerModule, MatDatetimepickerMonthView, MatDatetimepickerToggle, MatDatetimepickerYearView, MatNativeDatetimeModule, NativeDatetimeAdapter, NativeDatetimeModule, slideCalendar as ɵa, MatDatetimepickerMultiYearView as ɵb };

//# sourceMappingURL=mat-datetimepicker-core.js.map