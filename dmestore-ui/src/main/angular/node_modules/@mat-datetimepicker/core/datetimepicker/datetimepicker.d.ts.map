{"version":3,"file":"datetimepicker.d.ts","sources":["datetimepicker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Directionality } from \"@angular/cdk/bidi\";\r\nimport { Overlay } from \"@angular/cdk/overlay\";\r\nimport { AfterContentInit, EventEmitter, NgZone, OnDestroy, ViewContainerRef } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { Subject } from \"rxjs\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nimport { MatCalendarView, MatDatetimepickerCalendar } from \"./calendar\";\r\nimport { MatDatetimepickerFilterType } from \"./datetimepicker-filtertype\";\r\nimport { MatDatetimepickerInput } from \"./datetimepicker-input\";\r\nexport declare type MatDatetimepickerType = \"date\" | \"time\" | \"month\" | \"year\" | \"datetime\";\r\nexport declare type MatDatetimepickerMode = \"auto\" | \"portrait\" | \"landscape\";\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\nexport declare class MatDatetimepickerContent<D> implements AfterContentInit {\r\n    datetimepicker: MatDatetimepicker<D>;\r\n    _calendar: MatDatetimepickerCalendar<D>;\r\n    ngAfterContentInit(): void;\r\n    /**\r\n     * Handles keydown event on datepicker content.\r\n     * @param event The event.\r\n     */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n}\r\nexport declare class MatDatetimepicker<D> implements OnDestroy {\r\n    private _dialog;\r\n    private _overlay;\r\n    private _ngZone;\r\n    private _viewContainerRef;\r\n    private _scrollStrategy;\r\n    private _dateAdapter;\r\n    private _dir;\r\n    private _document;\r\n    /** Active multi year view when click on year. */\r\n    multiYearSelector: boolean;\r\n    /** if true change the clock to 12 hour format. */\r\n    twelvehour: boolean;\r\n    /** The view that the calendar should start in. */\r\n    startView: MatCalendarView;\r\n    mode: MatDatetimepickerMode;\r\n    timeInterval: number;\r\n    ariaNextMonthLabel: string;\r\n    ariaPrevMonthLabel: string;\r\n    ariaNextYearLabel: string;\r\n    ariaPrevYearLabel: string;\r\n    /**\r\n     * Emits new selected date when selected date changes.\r\n     * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\r\n     */\r\n    selectedChanged: EventEmitter<D>;\r\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n    panelClass: string | string[];\r\n    /** Emits when the datepicker has been opened. */\r\n    openedStream: EventEmitter<void>;\r\n    /** Emits when the datepicker has been closed. */\r\n    closedStream: EventEmitter<void>;\r\n    /** Emits when the view has been changed. **/\r\n    viewChanged: EventEmitter<MatCalendarView>;\r\n    /** Whether the calendar is open. */\r\n    opened: boolean;\r\n    /** The id for the datepicker calendar. */\r\n    id: string;\r\n    /** The input element this datepicker is associated with. */\r\n    _datepickerInput: MatDatetimepickerInput<D>;\r\n    /** Emits when the datepicker is disabled. */\r\n    _disabledChange: Subject<boolean>;\r\n    private _validSelected;\r\n    /** A reference to the overlay when the calendar is opened as a popup. */\r\n    private _popupRef;\r\n    /** A reference to the dialog when the calendar is opened as a dialog. */\r\n    private _dialogRef;\r\n    /** A portal containing the calendar for this datepicker. */\r\n    private _calendarPortal;\r\n    /** The element that was focused before the datepicker was opened. */\r\n    private _focusedElementBeforeOpen;\r\n    private _inputSubscription;\r\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, _scrollStrategy: any, _dateAdapter: DatetimeAdapter<D>, _dir: Directionality, _document: any);\r\n    private _startAt;\r\n    /** The date to open the calendar to initially. */\r\n    get startAt(): D | null;\r\n    set startAt(date: D | null);\r\n    private _openOnFocus;\r\n    get openOnFocus(): boolean;\r\n    set openOnFocus(value: boolean);\r\n    private _type;\r\n    get type(): MatDatetimepickerType;\r\n    set type(value: MatDatetimepickerType);\r\n    private _touchUi;\r\n    /**\r\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n     * than a popup and elements have more padding to allow for bigger touch targets.\r\n     */\r\n    get touchUi(): boolean;\r\n    set touchUi(value: boolean);\r\n    private _disabled;\r\n    /** Whether the datepicker pop-up should be disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    /** The currently selected date. */\r\n    get _selected(): D | null;\r\n    set _selected(value: D | null);\r\n    /** The minimum selectable date. */\r\n    get _minDate(): D | null;\r\n    /** The maximum selectable date. */\r\n    get _maxDate(): D | null;\r\n    get _dateFilter(): (date: D | null, type: MatDatetimepickerFilterType) => boolean;\r\n    _handleFocus(): void;\r\n    _viewChanged(type: MatCalendarView): void;\r\n    ngOnDestroy(): void;\r\n    /** Selects the given date */\r\n    _select(date: D): void;\r\n    /**\r\n     * Register an input with this datepicker.\r\n     * @param input The datepicker input to register with this datepicker.\r\n     */\r\n    _registerInput(input: MatDatetimepickerInput<D>): void;\r\n    /** Open the calendar. */\r\n    open(): void;\r\n    /** Close the calendar. */\r\n    close(): void;\r\n    /** Open the calendar as a dialog. */\r\n    private _openAsDialog;\r\n    /** Open the calendar as a popup. */\r\n    private _openAsPopup;\r\n    /** Create the popup. */\r\n    private _createPopup;\r\n    /** Create the popup PositionStrategy. */\r\n    private _createPopupPositionStrategy;\r\n}\r\n"]}