{"version":3,"file":"clock.d.ts","sources":["clock.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef, EventEmitter } from \"@angular/core\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nimport { MatDatetimepickerFilterType } from \"./datetimepicker-filtertype\";\r\nexport declare const CLOCK_RADIUS = 50;\r\nexport declare const CLOCK_INNER_RADIUS = 27.5;\r\nexport declare const CLOCK_OUTER_RADIUS = 41.25;\r\nexport declare const CLOCK_TICK_RADIUS = 7.0833;\r\nexport declare type MatClockView = \"hour\" | \"minute\";\r\n/**\r\n * A clock that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\nexport declare class MatDatetimepickerClock<D> implements AfterContentInit {\r\n    private _element;\r\n    private _adapter;\r\n    _userSelection: EventEmitter<void>;\r\n    /** A function used to filter which dates are selectable. */\r\n    dateFilter: (date: D, type: MatDatetimepickerFilterType) => boolean;\r\n    interval: number;\r\n    twelvehour: boolean;\r\n    /** Emits when the currently selected date changes. */\r\n    selectedChange: EventEmitter<D>;\r\n    activeDateChange: EventEmitter<D>;\r\n    /** Hours and Minutes representing the clock view. */\r\n    _hours: Array<Object>;\r\n    _minutes: Array<Object>;\r\n    /** Whether the clock is in hour view. */\r\n    _hourView: boolean;\r\n    _selectedHour: number;\r\n    _selectedMinute: number;\r\n    private _timeChanged;\r\n    private mouseMoveListener;\r\n    private mouseUpListener;\r\n    constructor(_element: ElementRef, _adapter: DatetimeAdapter<D>);\r\n    private _activeDate;\r\n    /**\r\n     * The date to display in this clock view.\r\n     */\r\n    get activeDate(): D;\r\n    set activeDate(value: D);\r\n    private _selected;\r\n    /** The currently selected date. */\r\n    get selected(): D | null;\r\n    set selected(value: D | null);\r\n    private _minDate;\r\n    /** The minimum selectable date. */\r\n    get minDate(): D | null;\r\n    set minDate(value: D | null);\r\n    private _maxDate;\r\n    /** The maximum selectable date. */\r\n    get maxDate(): D | null;\r\n    set maxDate(value: D | null);\r\n    /** Whether the clock should be started in hour or minute view. */\r\n    set startView(value: MatClockView);\r\n    get _hand(): any;\r\n    ngAfterContentInit(): void;\r\n    /** Handles mousedown events on the clock body. */\r\n    _handleMousedown(event: any): void;\r\n    _handleMousemove(event: any): void;\r\n    _handleMouseup(): void;\r\n    /** Initializes this clock view. */\r\n    private _init;\r\n    /**\r\n     * Set Time\r\n     * @param event\r\n     */\r\n    private setTime;\r\n}\r\n"]}