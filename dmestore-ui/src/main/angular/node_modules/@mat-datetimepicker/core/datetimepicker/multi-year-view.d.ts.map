{"version":3,"file":"multi-year-view.d.ts","sources":["multi-year-view.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { AfterContentInit, EventEmitter } from \"@angular/core\";\r\nimport { MatDatetimepickerType } from \"./datetimepicker\";\r\nimport { MatDatetimepickerCalendarCell } from \"./calendar-body\";\r\nimport { MatDatetimeFormats } from \"../adapter/datetime-formats\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nexport declare const yearsPerPage = 24;\r\nexport declare const yearsPerRow = 4;\r\n/**\r\n * An internal component used to display multiple years in the datepicker.\r\n * @docs-private\r\n */\r\nexport declare class MatDatetimepickerMultiYearView<D> implements AfterContentInit {\r\n    _adapter: DatetimeAdapter<D>;\r\n    private _dateFormats;\r\n    _userSelection: EventEmitter<void>;\r\n    type: MatDatetimepickerType;\r\n    /** A function used to filter which dates are selectable. */\r\n    dateFilter: (date: D) => boolean;\r\n    /** Emits when a new month is selected. */\r\n    selectedChange: EventEmitter<D>;\r\n    /** Grid of calendar cells representing the years in the range. */\r\n    _years: MatDatetimepickerCalendarCell[][];\r\n    /** The label for this year range (e.g. \"2000-2020\"). */\r\n    _yearLabel: string;\r\n    /** The year in this range that today falls on. Null if today is in a different range. */\r\n    _todayYear: number;\r\n    /**\r\n     * The year in this range that the selected Date falls on.\r\n     * Null if the selected Date is in a different range.\r\n     */\r\n    _selectedYear: number | null;\r\n    _calendarState: string;\r\n    constructor(_adapter: DatetimeAdapter<D>, _dateFormats: MatDatetimeFormats);\r\n    private _activeDate;\r\n    /** The date to display in this multi year view*/\r\n    get activeDate(): D;\r\n    set activeDate(value: D);\r\n    private _selected;\r\n    /** The currently selected date. */\r\n    get selected(): D;\r\n    set selected(value: D);\r\n    private _minDate;\r\n    /** The minimum selectable date. */\r\n    get minDate(): D | null;\r\n    set minDate(value: D | null);\r\n    private _maxDate;\r\n    /** The maximum selectable date. */\r\n    get maxDate(): D | null;\r\n    set maxDate(value: D | null);\r\n    ngAfterContentInit(): void;\r\n    /** Handles when a new year is selected. */\r\n    _yearSelected(year: number): void;\r\n    _getActiveCell(): number;\r\n    _calendarStateDone(): void;\r\n    /** Initializes this year view. */\r\n    private _init;\r\n    /** Creates an MatDatetimepickerCalendarCell for the given year. */\r\n    private _createCellForYear;\r\n    /** Whether the given year is enabled. */\r\n    private _shouldEnableYear;\r\n    /**\r\n     * Gets the year in this years range that the given Date falls on.\r\n     * Returns null if the given Date is not in this range.\r\n     */\r\n    private _getYearInCurrentRange;\r\n    /**\r\n     * Validate if the current year is in the current range\r\n     * Returns true if is in range else returns false\r\n     */\r\n    private _isInRange;\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull;\r\n}\r\nexport declare function isSameMultiYearView<D>(dateAdapter: DatetimeAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean;\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nexport declare function getActiveOffset<D>(dateAdapter: DatetimeAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number;\r\n"]}