{"version":3,"file":"datetimepicker-input.d.ts","sources":["datetimepicker-input.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef, EventEmitter, OnDestroy } from \"@angular/core\";\r\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from \"@angular/forms\";\r\nimport { MatFormField } from \"@angular/material/form-field\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nimport { MatDatetimeFormats } from \"../adapter/datetime-formats\";\r\nimport { MatDatetimepicker } from \"./datetimepicker\";\r\nimport { MatDatetimepickerFilterType } from \"./datetimepicker-filtertype\";\r\nexport declare const MAT_DATETIMEPICKER_VALUE_ACCESSOR: any;\r\nexport declare const MAT_DATETIMEPICKER_VALIDATORS: any;\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport declare class MatDatetimepickerInputEvent<D> {\r\n    target: MatDatetimepickerInput<D>;\r\n    targetElement: HTMLElement;\r\n    /** The new value for the target datepicker input. */\r\n    value: D | null;\r\n    constructor(target: MatDatetimepickerInput<D>, targetElement: HTMLElement);\r\n}\r\n/** Directive used to connect an input to a MatDatepicker. */\r\nexport declare class MatDatetimepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator {\r\n    private _elementRef;\r\n    _dateAdapter: DatetimeAdapter<D>;\r\n    private _dateFormats;\r\n    private _formField;\r\n    _datepicker: MatDatetimepicker<D>;\r\n    _dateFilter: (date: D | null, type: MatDatetimepickerFilterType) => boolean;\r\n    /** Emits when a `change` event is fired on this `<input>`. */\r\n    dateChange: EventEmitter<MatDatetimepickerInputEvent<D>>;\r\n    /** Emits when an `input` event is fired on this `<input>`. */\r\n    dateInput: EventEmitter<MatDatetimepickerInputEvent<D>>;\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    _valueChange: EventEmitter<D>;\r\n    /** Emits when the disabled state has changed */\r\n    _disabledChange: EventEmitter<boolean>;\r\n    private _datepickerSubscription;\r\n    private _localeSubscription;\r\n    /** Whether the last value set on the input was valid. */\r\n    private _lastValueValid;\r\n    constructor(_elementRef: ElementRef, _dateAdapter: DatetimeAdapter<D>, _dateFormats: MatDatetimeFormats, _formField: MatFormField);\r\n    /** The datepicker that this input is associated with. */\r\n    set matDatetimepicker(value: MatDatetimepicker<D>);\r\n    set matDatepickerFilter(filter: (date: D | null, type: MatDatetimepickerFilterType) => boolean);\r\n    private _value;\r\n    /** The value of the input. */\r\n    get value(): D | null;\r\n    set value(value: D | null);\r\n    private _min;\r\n    /** The minimum valid date. */\r\n    get min(): D | null;\r\n    set min(value: D | null);\r\n    private _max;\r\n    /** The maximum valid date. */\r\n    get max(): D | null;\r\n    set max(value: D | null);\r\n    private _disabled;\r\n    /** Whether the datepicker-input is disabled. */\r\n    get disabled(): any;\r\n    set disabled(value: any);\r\n    _onTouched: () => void;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    validate(c: AbstractControl): ValidationErrors | null;\r\n    /**\r\n     * Gets the element that the datepicker popup should be connected to.\r\n     * @return The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin(): ElementRef;\r\n    writeValue(value: D): void;\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    setDisabledState(disabled: boolean): void;\r\n    _onKeydown(event: KeyboardEvent): void;\r\n    _onInput(value: string): void;\r\n    _onChange(): void;\r\n    /** Handles blur events on the input. */\r\n    _onBlur(): void;\r\n    private registerDatepicker;\r\n    private getDisplayFormat;\r\n    private getParseFormat;\r\n    private _cvaOnChange;\r\n    private _validatorOnChange;\r\n    /** The form control validator for whether the input parses. */\r\n    private _parseValidator;\r\n    /** The form control validator for the min date. */\r\n    private _minValidator;\r\n    /** The form control validator for the max date. */\r\n    private _maxValidator;\r\n    /** The form control validator for the date filter. */\r\n    private _filterValidator;\r\n    /** The combined form control validator for this input. */\r\n    private _validator;\r\n    /** Formats a value and sets it on the input element. */\r\n    private _formatValue;\r\n}\r\n"]}