{"version":3,"file":"mat-datetimepicker-moment.js","sources":["../../../projects/moment/src/adapter/moment-datetime-adapter.ts","../../../projects/moment/src/adapter/moment-datetime-formats.ts","../../../projects/moment/src/adapter/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Injectable, Optional} from \"@angular/core\";\r\nimport {DateAdapter, MAT_DATE_LOCALE} from \"@angular/material/core\";\r\nimport {MAT_MOMENT_DATE_ADAPTER_OPTIONS, MatMomentDateAdapterOptions} from \"@angular/material-moment-adapter\";\r\nimport {DatetimeAdapter} from \"@mat-datetimepicker/core\";\r\n\r\nimport * as moment_ from \"moment\";\r\nimport {Moment} from \"moment\";\r\n\r\nconst moment = moment_;\r\n\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n@Injectable()\r\nexport class MomentDatetimeAdapter extends DatetimeAdapter<Moment> {\r\n\r\n  private _localeData: {\r\n    firstDayOfWeek: number,\r\n    longMonths: string[],\r\n    shortMonths: string[],\r\n    dates: string[],\r\n    hours: string[],\r\n    minutes: string[],\r\n    longDaysOfWeek: string[],\r\n    shortDaysOfWeek: string[],\r\n    narrowDaysOfWeek: string[]\r\n  };\r\n\r\n  private _useUtc = false;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string,\r\n              @Optional() @Inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS) matMomentAdapterOptions: MatMomentDateAdapterOptions,\r\n              _delegate: DateAdapter<Moment>) {\r\n    super(_delegate);\r\n    this.setLocale(matDateLocale || moment.locale());\r\n    this._useUtc = matMomentAdapterOptions.useUtc;\r\n  }\r\n\r\n  setLocale(locale: string) {\r\n    super.setLocale(locale);\r\n\r\n    const momentLocaleData = moment.localeData(locale);\r\n    this._localeData = {\r\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\r\n      longMonths: momentLocaleData.months(),\r\n      shortMonths: momentLocaleData.monthsShort(),\r\n      dates: range(31, (i) => super.createDate(2017, 0, i + 1).format(\"D\")),\r\n      hours: range(24, (i) => this.createDatetime(2017, 0, 1, i, 0).format(\"H\")),\r\n      minutes: range(60, (i) => this.createDatetime(2017, 0, 1, 1, i).format(\"m\")),\r\n      longDaysOfWeek: momentLocaleData.weekdays(),\r\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\r\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\r\n    };\r\n  }\r\n\r\n  getHour(date: Moment): number {\r\n    return super.clone(date).hour();\r\n  }\r\n\r\n  getMinute(date: Moment): number {\r\n    return super.clone(date).minute();\r\n  }\r\n\r\n  isInNextMonth(startDate: Moment, endDate: Moment): boolean {\r\n    const nextMonth = this.getDateInNextMonth(startDate);\r\n    return super.sameMonthAndYear(nextMonth, endDate);\r\n  }\r\n\r\n  createDatetime(year: number, month: number, date: number, hour: number, minute: number): Moment {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    if (hour < 0 || hour > 23) {\r\n      throw Error(`Invalid hour \"${hour}\". Hour has to be between 0 and 23.`);\r\n    }\r\n\r\n    if (minute < 0 || minute > 59) {\r\n      throw Error(`Invalid minute \"${minute}\". Minute has to be between 0 and 59.`);\r\n    }\r\n\r\n    // const result = moment({year, month, date, hour, minute}).locale(this.locale);\r\n    let result = moment({year, month, date, hour, minute});\r\n    if (this._useUtc) {\r\n      result = result.utc();\r\n    }\r\n\r\n    // If the result isn't valid, the date must have been out of bounds for this month.\r\n    if (!result.isValid()) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  getFirstDateOfMonth(date: Moment): Moment {\r\n    return super.clone(date).startOf(\"month\");\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    return this._localeData.hours;\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    return this._localeData.minutes;\r\n  }\r\n\r\n  addCalendarHours(date: Moment, hours: number): Moment {\r\n    return super.clone(date).add({hours});\r\n  }\r\n\r\n  addCalendarMinutes(date: Moment, minutes: number): Moment {\r\n    return super.clone(date).add({minutes});\r\n  }\r\n\r\n  deserialize(value: any): Moment | null {\r\n    return this._delegate.deserialize(value);\r\n  }\r\n\r\n  private getDateInNextMonth(date: Moment) {\r\n    return super.clone(date).date(1).add({month: 1});\r\n  }\r\n}\r\n","import {MatDatetimeFormats} from \"@mat-datetimepicker/core\";\r\n\r\nexport const MAT_MOMENT_DATETIME_FORMATS: MatDatetimeFormats = {\r\n  parse: {\r\n    dateInput: \"L\",\r\n    monthInput: \"MMMM\",\r\n    timeInput: \"LT\",\r\n    datetimeInput: \"L LT\"\r\n  },\r\n  display: {\r\n    dateInput: \"L\",\r\n    monthInput: \"MMMM\",\r\n    datetimeInput: \"L LT\",\r\n    timeInput: \"LT\",\r\n    monthYearLabel: \"MMM YYYY\",\r\n    dateA11yLabel: \"LL\",\r\n    monthYearA11yLabel: \"MMMM YYYY\",\r\n    popupHeaderDateLabel: \"ddd, DD MMM\"\r\n  }\r\n};\r\n","import {NgModule} from \"@angular/core\";\r\nimport {MatMomentDateModule, MomentDateModule} from \"@angular/material-moment-adapter\";\r\nimport {DatetimeAdapter, MAT_DATETIME_FORMATS} from \"@mat-datetimepicker/core\";\r\nimport {MomentDatetimeAdapter} from \"./moment-datetime-adapter\";\r\nimport {MAT_MOMENT_DATETIME_FORMATS} from \"./moment-datetime-formats\";\r\n\r\nexport * from \"./moment-datetime-adapter\";\r\nexport * from \"./moment-datetime-formats\";\r\n\r\n@NgModule({\r\n  imports: [MomentDateModule],\r\n  providers: [\r\n    {\r\n      provide: DatetimeAdapter,\r\n      useClass: MomentDatetimeAdapter\r\n    }\r\n  ]\r\n})\r\nexport class MomentDatetimeModule {\r\n}\r\n\r\n@NgModule({\r\n  imports: [MomentDatetimeModule, MatMomentDateModule],\r\n  providers: [{provide: MAT_DATETIME_FORMATS, useValue: MAT_MOMENT_DATETIME_FORMATS}]\r\n})\r\nexport class MatMomentDatetimeModule {\r\n}\r\n"]}