{"version":3,"file":"radio.element.js","sourceRoot":"","sources":["../../../src/radio/radio.element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,gBAAgB,EAAE,wBAAwB,EAAE,MAAM,oBAAoB,CAAC;AAChF,OAAO,EAAE,wBAAwB,EAAE,MAAM,iBAAiB,CAAC;AAC3D,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,OAAO,QAAS,SAAQ,wBAAwB;IAAtD;;QACgE,YAAO,GAAG,KAAK,CAAC;IAYhF,CAAC;IAVC,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,YAAY,CAAC,KAAuB;QAClC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QACtF,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC5G,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;IACpH,CAAC;CACF;AAZqD;IAAnD,gBAAgB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;yCAA2B","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { internalProperty, listenForAttributeChange } from '@clr/core/internal';\nimport { CdsInternalControlInline } from '@clr/core/forms';\nimport { styles } from './radio.element.css.js';\n\n/**\n * Radio\n *\n * ```typescript\n * import '@clr/core/radio/register.js';\n * ```\n *\n * ```html\n * <cds-radio>\n *   <label>Test</label>\n *   <input type=\"radio\" />\n * </cds-radio>\n * ```\n *\n * @element cds-radio\n * @slot - For projecting radio input\n * @cssprop --width\n * @cssprop --height\n * @cssprop --border\n * @cssprop --fill-box-shadow\n */\nexport class CdsRadio extends CdsInternalControlInline {\n  @internalProperty({ type: Boolean, reflect: true }) protected checked = false;\n\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n    this.checked = this.inputControl.hasAttribute('checked') || this.inputControl.checked;\n    this.checked ? this.inputControl.setAttribute('checked', '') : this.inputControl.removeAttribute('checked');\n    this.observers.push(listenForAttributeChange(this.inputControl, 'checked', val => (this.checked = val !== null)));\n  }\n}\n"]}