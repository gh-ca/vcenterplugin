{"version":3,"file":"icon.element.js","sourceRoot":"","sources":["../../../src/icon/icon.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n  baseStyles,\n  Directions,\n  hasStringPropertyChanged,\n  hasStringPropertyChangedAndNotNil,\n  Orientations,\n  property,\n  internalProperty,\n  StatusTypes,\n  id,\n} from '@clr/core/internal';\nimport { html, LitElement, query } from 'lit-element';\nimport { styles } from './icon.element.css.js';\nimport { ClarityIcons } from './icon.service.js';\nimport { updateIconSizeStyleOrClassnames } from './utils/icon.classnames.js';\nimport { hasIcon } from './utils/icon.service-helpers.js';\n\n/**\n * Icon component that renders svg shapes that can be customized.\n * To load an icon, import the icon with the icon service.\n *\n * ```typescript\n * import '@clr/core/icon/register.js';\n * import { ClarityIcons, userIcon } from '@clr/core/icon';\n *\n * ClarityIcons.addIcons(userIcon);\n * ```\n *\n * ```html\n * <cds-icon shape=\"user\"></cds-icon>\n * ```\n *\n * @element cds-icon\n * @cssprop --color\n * @cssprop --badge-color\n */\nexport class CdsIcon extends LitElement {\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  private _shape: string;\n  private _size: string;\n\n  @property({ type: String })\n  get shape() {\n    return hasIcon(this._shape, ClarityIcons.registry) ? this._shape : 'unknown';\n  }\n\n  /**\n   * Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\n   * the specified icon cannot be found in the icon registry.\n   */\n  set shape(val: string) {\n    if (hasStringPropertyChangedAndNotNil(val, this._shape)) {\n      const oldVal = this._shape;\n      this._shape = val;\n      this.requestUpdate('shape', oldVal);\n    }\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  /**\n   * @type {string | sm | md | lg | xl | xxl}\n   * Apply numerical width-height or a t-shirt-sized CSS classname\n   */\n  @property({ type: String })\n  set size(val: string) {\n    if (hasStringPropertyChanged(val, this._size)) {\n      const oldVal = this._size;\n      this._size = val;\n      updateIconSizeStyleOrClassnames(this, val);\n      this.requestUpdate('size', oldVal);\n    }\n  }\n\n  /** If present, customizes the aria-label for the icon for accessibility. */\n  @property({ type: String })\n  title: string;\n\n  /**\n   * @deprecated\n   * Takes a directional value (up|down|left|right) that rotates the icon 90° with the\n   * top of the icon pointing in the specified direction.\n   *\n   * Deprecated in 3.0. Use `direction` instead. `dir` will be removed in 4.0!\n   */\n  @property({ type: String })\n  dir: Directions;\n\n  /**\n   * @type {up | down | left | right}\n   * Takes a directional value that rotates the icon 90° with the\n   * top of the icon pointing in the specified direction.\n   */\n  @property({ type: String })\n  direction: Directions;\n\n  /**\n   * @type {horizontal | vertical}\n   * Takes an orientation value that reverses the orientation of the icon vertically or horizontally'\n   */\n  @property({ type: String })\n  flip: Orientations;\n\n  /**\n   * Displays most icons in their \"filled\" version if set to `true`.\n   */\n  @property({ type: Boolean })\n  solid = false;\n\n  /**\n   * @type {info | success | warning | danger | highlight}\n   * Changes color of icon fills and outlines\n   */\n  @property({ type: String })\n  status: StatusTypes | 'highlight' | '' = '';\n\n  /**\n   * Inverts color of icon fills and outlines if `true`.\n   * Useful for displaying icons on a dark background.\n   */\n  @property({ type: Boolean })\n  inverse = false;\n\n  /**\n   * @type {info | success | warning | danger | inherit | warning-triangle | inherit-triangle}\n   * Sets the color of the icon decoration that appears in the top-right corner\n   * of the glyph. The icon decoration is derived from the following predefined types.\n   *\n   * The color of the badge can change according to the following\n   * list of statuses:\n   * 'info'  -> blue dot\n   * 'success' -> green dot\n   * 'warning' -> yellow dot\n   * 'danger' -> red dot\n   * 'inherit' -> dot inherits color of full icon glyph\n   * 'warning-triangle' -> yellow triangle\n   * 'inherit-triangle' -> triangle inherits color of full icon glyph\n   * unrecognized value, empty string, or true -> red dot\n   *\n   * By default, the badge displays a 'danger' dot (a red-colored dot).\n   *\n   * Setting the badge to 'false' or removing the attribute will remove the default icon badge.\n   */\n  @property({ type: String })\n  badge: StatusTypes | 'inherit' | 'warning-triangle' | 'inherit-triangle' | true | false;\n\n  /**\n   * @private\n   * given a pixel value offset any surrounding whitespace within the svg\n   */\n  @internalProperty({ type: Number, reflect: true })\n  innerOffset = 0;\n\n  @query('svg') private svg: SVGElement;\n\n  @id()\n  private idForAriaLabel: string;\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n    this.updateSVGAriaLabel();\n  }\n\n  updated(props: Map<string, any>) {\n    if (props.has('title')) {\n      this.updateSVGAriaLabel();\n    }\n\n    if (props.has('innerOffset') && this.innerOffset > 0) {\n      const dimension = `calc(100% + ${this.innerOffset * 2}px)`;\n      this.svg.style.width = dimension;\n      this.svg.style.height = dimension;\n      this.svg.style.margin = `-${this.innerOffset} 0 0 -${this.innerOffset}`;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute('role', 'none');\n  }\n\n  protected render() {\n    return html`\n      <span .innerHTML=\"${ClarityIcons.registry[this.shape]}\"></span>\n      ${this.title\n        ? html`<span id=\"${this.idForAriaLabel}\" cds-layout=\"display:screen-reader-only\">${this.title}</span>`\n        : ''}\n    `;\n  }\n\n  private updateSVGAriaLabel() {\n    if (this.title) {\n      this.svg.removeAttribute('aria-label'); // remove empty label that makes icon decorative by default\n      this.svg.setAttribute('aria-labelledby', this.idForAriaLabel); // use labelledby for better SR support\n    } else {\n      this.svg.removeAttribute('aria-labelledby');\n    }\n  }\n}\n"]}