{"version":3,"file":"icon.service.js","sourceRoot":"","sources":["../../../src/icon/icon.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AASH,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAElD,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAE1G,MAAM,YAAY,GAAiB;IACjC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAW;CAClC,CAAC;AAEF;;;;;;;;;;GAUG;AACH,WAAW;AACX,MAAM,OAAO,YAAY;IACvB;;;;OAIG;IACH,MAAM,KAAK,QAAQ;QACjB,yBAAY,YAAY,EAAG;IAC7B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAwB;QACzC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,GAAG,OAAoB;QACvC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,CAAC,oBAAoB,CAAC,SAAyB;QACnD,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;IAED,6BAA6B;IAC7B,MAAM,CAAC,GAAG,CAAC,SAAkB;QAC3B,OAAO,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,mBAAM,YAAY,CAAE,CAAC;IAC5E,CAAC;IAED,6BAA6B;IAC7B,MAAM,CAAC,GAAG,CAAC,MAAwB;QACjC,KAAK,MAAM,SAAS,IAAI,MAAM,EAAE;YAC9B,iDAAiD;YACjD,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;gBACpC,OAAO,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,CAAmB,EAAE,YAAY,CAAC,CAAC;aACzE;SACF;IACH,CAAC;IAED,6BAA6B;IAC7B,MAAM,CAAC,KAAK,CAAC,KAA4B;QACvC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IACnC,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n  IconAlias,\n  IconAliasLegacyObject,\n  IconRegistry,\n  IconShapeSources,\n  IconShapeTuple,\n} from './interfaces/icon.interfaces.js';\nimport { unknownIcon } from './shapes/unknown.js';\n\nimport { addIcon, addIcons, getIcon, legacyAlias, setIconAliases } from './utils/icon.service-helpers.js';\n\nconst iconRegistry: IconRegistry = {\n  unknown: unknownIcon[1] as string,\n};\n\n/**\n * ClarityIcons is a static class that gives users the ability to interact with\n * the icon registry. This includes capabilities to add, retrieve, or alias icons\n * in the registry.\n *\n * @privateRemarks\n *\n * The icon registry is private to the module. There is no way to access it directly\n * outside of the module.\n *\n */\n// @dynamic\nexport class ClarityIcons {\n  /**\n   * registry() returns a clone of the icon registry, not the actual registry itself.\n   * Performing actions on the return value of registry() will not be reflected in the\n   * actual iconsRegistry\n   */\n  static get registry(): IconRegistry {\n    return { ...iconRegistry };\n  }\n\n  static addIcons(...shapes: IconShapeTuple[]) {\n    addIcons(shapes, iconRegistry);\n  }\n\n  static addAliases(...aliases: IconAlias[]) {\n    aliases.forEach(alias => setIconAliases(alias, iconRegistry));\n  }\n\n  static getIconNameFromShape(iconShape: IconShapeTuple) {\n    return iconShape[0];\n  }\n\n  /** @deprecated legacy API */\n  static get(shapeName?: string): string | IconRegistry {\n    return shapeName ? getIcon(shapeName, iconRegistry) : { ...iconRegistry };\n  }\n\n  /** @deprecated legacy API */\n  static add(shapes: IconShapeSources) {\n    for (const shapeName in shapes) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (shapes.hasOwnProperty(shapeName)) {\n        addIcon([shapeName, shapes[shapeName]] as IconShapeTuple, iconRegistry);\n      }\n    }\n  }\n\n  /** @deprecated legacy API */\n  static alias(alias: IconAliasLegacyObject) {\n    legacyAlias(alias, iconRegistry);\n  }\n}\n"]}