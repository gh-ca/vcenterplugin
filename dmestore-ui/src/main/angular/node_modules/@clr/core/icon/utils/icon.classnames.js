/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { getEnumValues, isString, transformToSpacedString, updateElementStyles, removeClassnames, addClassnames, removeClassnamesUnless, } from '@clr/core/internal';
import isNil from 'ramda/es/isNil';
import { iconHasAlertedShapes, iconHasBadgedShapes, iconHasSolidShapes } from './icon.has-shape.js';
export var IconSvgClassnames;
(function (IconSvgClassnames) {
    IconSvgClassnames["Badged"] = "can-badge";
    IconSvgClassnames["Alerted"] = "can-alert";
    IconSvgClassnames["Solid"] = "has-solid";
})(IconSvgClassnames || (IconSvgClassnames = {}));
export var IconDecorationClassnames;
(function (IconDecorationClassnames) {
    IconDecorationClassnames["Badge"] = "clr-i-badge";
    IconDecorationClassnames["Alert"] = "clr-i-alert";
})(IconDecorationClassnames || (IconDecorationClassnames = {}));
export var IconShapeClassnames;
(function (IconShapeClassnames) {
    IconShapeClassnames["Outline"] = "outline";
    IconShapeClassnames["Solid"] = "solid";
    IconShapeClassnames["OutlineBadged"] = "outline--badged";
    IconShapeClassnames["OutlineAlerted"] = "outline--alerted";
    IconShapeClassnames["SolidBadged"] = "solid--badged";
    IconShapeClassnames["SolidAlerted"] = "solid--alerted";
})(IconShapeClassnames || (IconShapeClassnames = {}));
export function getShapeClassname(shapeType) {
    const classNamePrefix = 'clr-i-';
    let className;
    switch (shapeType) {
        case 'solid':
            className = `${classNamePrefix}${IconShapeClassnames.Solid}`;
            break;
        case 'outlineBadged':
            className = `${classNamePrefix}${IconShapeClassnames.OutlineBadged}`;
            break;
        case 'outlineAlerted':
            className = `${classNamePrefix}${IconShapeClassnames.OutlineAlerted}`;
            break;
        case 'solidBadged':
            className = `${classNamePrefix}${IconShapeClassnames.SolidBadged}`;
            break;
        case 'solidAlerted':
            className = `${classNamePrefix}${IconShapeClassnames.SolidAlerted}`;
            break;
        default:
            className = `${classNamePrefix}${IconShapeClassnames.Outline}`;
            break;
    }
    return className;
}
export var IconTshirtSizes;
(function (IconTshirtSizes) {
    IconTshirtSizes["ExtraSmall"] = "xs";
    IconTshirtSizes["Small"] = "sm";
    IconTshirtSizes["Medium"] = "md";
    IconTshirtSizes["Large"] = "lg";
    IconTshirtSizes["ExtraLarge"] = "xl";
    IconTshirtSizes["ExtraExtraLarge"] = "xxl";
})(IconTshirtSizes || (IconTshirtSizes = {}));
export const iconTshirtSizeClassnamePrefix = 'clr-i-size-';
export function getIconTshirtSizeClassname(sizeToLookup, prefix = iconTshirtSizeClassnamePrefix, sizes = IconTshirtSizes) {
    const tshirtSizesVals = getEnumValues(sizes);
    const indexOfSize = tshirtSizesVals.indexOf(sizeToLookup);
    if (indexOfSize > -1) {
        return prefix + tshirtSizesVals[indexOfSize];
    }
    return '';
}
export function getAllIconTshirtSizeClassnames(prefix = iconTshirtSizeClassnamePrefix, sizes = IconTshirtSizes) {
    return getEnumValues(sizes).map(sz => prefix + sz);
}
export function isIconTshirtSizeClassname(classname, sizes = IconTshirtSizes) {
    return getEnumValues(sizes).indexOf(classname) > -1;
}
export function getIconSvgClasses(icon) {
    const testSolid = (i) => (iconHasSolidShapes(i) ? IconSvgClassnames.Solid : '');
    const testBadged = (i) => (iconHasBadgedShapes(i) ? IconSvgClassnames.Badged : '');
    const testAlerted = (i) => (iconHasAlertedShapes(i) ? IconSvgClassnames.Alerted : '');
    const tests = [testSolid, testBadged, testAlerted];
    return transformToSpacedString(tests, icon);
}
export var SizeUpdateStrategies;
(function (SizeUpdateStrategies) {
    SizeUpdateStrategies["BadSizeValue"] = "bad-value";
    SizeUpdateStrategies["ValidSizeString"] = "value-is-string";
    SizeUpdateStrategies["ValidNumericString"] = "value-is-numeric";
    SizeUpdateStrategies["NilSizeValue"] = "value-is-nil";
})(SizeUpdateStrategies || (SizeUpdateStrategies = {}));
export function getUpdateSizeStrategy(size) {
    if (isNil(size) || size === '') {
        return SizeUpdateStrategies.NilSizeValue;
    }
    if (isString(size) && isIconTshirtSizeClassname(size)) {
        return SizeUpdateStrategies.ValidSizeString;
    }
    if (!isNaN(parseInt(size, 10))) {
        return SizeUpdateStrategies.ValidNumericString;
    }
    return SizeUpdateStrategies.BadSizeValue;
}
export function updateIconSizeStyleOrClassnames(el, size) {
    const updateStrategy = getUpdateSizeStrategy(size);
    const newTshirtSize = getIconTshirtSizeClassname(size);
    switch (updateStrategy) {
        case SizeUpdateStrategies.ValidNumericString:
            updateElementStyles(el, ['width', `${size}px`], ['height', `${size}px`]);
            removeClassnames(el, ...getAllIconTshirtSizeClassnames());
            return;
        case SizeUpdateStrategies.ValidSizeString:
            addClassnames(el, newTshirtSize);
            removeClassnamesUnless(el, getAllIconTshirtSizeClassnames(), [newTshirtSize]);
            updateElementStyles(el, ['width', ''], ['height', '']);
            return;
        case SizeUpdateStrategies.NilSizeValue: // nil values empty out all sizing
            removeClassnames(el, ...getAllIconTshirtSizeClassnames());
            updateElementStyles(el, ['width', ''], ['height', '']);
            return;
        case SizeUpdateStrategies.BadSizeValue:
            // bad-value is ignored
            return;
        default:
            return;
    }
}
//# sourceMappingURL=icon.classnames.js.map