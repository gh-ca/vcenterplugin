{"version":3,"file":"icon.service-helpers.js","sourceRoot":"","sources":["../../../../src/icon/utils/icon.service-helpers.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,GAAG,MAAM,cAAc,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAGjD,MAAM,UAAU,QAAQ,CAAC,MAAwB,EAAE,QAAsB;IACvE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACjB,mEAAmE;QACnE,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,SAAiB,EAAE,QAAsB;IAC/D,OAAO,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,SAAiB,EAAE,QAAsB;IAC/D,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAE,QAAQ,CAAC,SAAS,CAAY,CAAC,CAAC,CAAE,QAAQ,CAAC,OAAkB,CAAC;AAC9F,CAAC;AAED,SAAS,iBAAiB,CAAC,KAAqB,EAAE,QAAsB;IACtE,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC;IACpC,QAAQ,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,KAAqB,EAAE,QAAsB;IACnE,MAAM,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;IAC1B,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE;QACjC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KACpC;AACH,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,SAAiB,EAAE,SAAiB,EAAE,QAAsB;IACvF,IAAI,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,EAAE;QACnC,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE;YACzC,GAAG,EAAE,GAAG,EAAE;gBACR,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC7B,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;KACJ;AACH,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,SAAoB,EAAE,QAAsB;IACzE,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;QAC1B,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACvB,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;KACJ;AACH,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,OAA8B,EAAE,QAAsB;IAChF,KAAK,MAAM,YAAY,IAAI,OAAO,EAAE;QAClC,iDAAiD;QACjD,IAAI,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;YACxC,iDAAiD;YACjD,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;gBACzC,cAAc,CAAC,CAAC,YAAY,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;aACjE;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,YAAY,YAAY,oEAAoE,CAAC,CAAC;aAC/G;SACF;KACF;AACH,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { existsIn } from '@clr/core/internal';\nimport has from 'ramda/es/has';\nimport { renderIcon } from '../icon.renderer.js';\nimport { IconAlias, IconAliasLegacyObject, IconRegistry, IconShapeTuple } from '../interfaces/icon.interfaces.js';\n\nexport function addIcons(shapes: IconShapeTuple[], registry: IconRegistry) {\n  shapes.forEach(s => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    addIcon(s, registry);\n  });\n}\n\nexport function hasIcon(shapeName: string, registry: IconRegistry): boolean {\n  return has(shapeName, registry);\n}\n\nexport function getIcon(shapeName: string, registry: IconRegistry): string {\n  return registry[shapeName] ? (registry[shapeName] as string) : (registry.unknown as string);\n}\n\nfunction addIconToRegistry(shape: IconShapeTuple, registry: IconRegistry) {\n  const [shapeName, template] = shape;\n  registry[shapeName] = renderIcon(template);\n}\n\nexport function addIcon(shape: IconShapeTuple, registry: IconRegistry) {\n  const [shapeName] = shape;\n  if (!hasIcon(shapeName, registry)) {\n    addIconToRegistry(shape, registry);\n  }\n}\n\nexport function setIconAlias(shapeName: string, aliasName: string, registry: IconRegistry) {\n  if (existsIn([shapeName], registry)) {\n    Object.defineProperty(registry, aliasName, {\n      get: () => {\n        return registry[shapeName];\n      },\n      enumerable: true,\n      configurable: true,\n    });\n  }\n}\n\nexport function setIconAliases(iconAlias: IconAlias, registry: IconRegistry) {\n  if (registry[iconAlias[0]]) {\n    iconAlias[1].forEach(a => {\n      setIconAlias(iconAlias[0], a, registry);\n    });\n  }\n}\n\nexport function legacyAlias(aliases: IconAliasLegacyObject, registry: IconRegistry) {\n  for (const shapeNameKey in aliases) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (aliases.hasOwnProperty(shapeNameKey)) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (registry.hasOwnProperty(shapeNameKey)) {\n        setIconAliases([shapeNameKey, aliases[shapeNameKey]], registry);\n      } else {\n        throw new Error(`An icon \"${shapeNameKey}\" you are trying to set aliases to doesn't exist in Clarity Icons.`);\n      }\n    }\n  }\n}\n"]}