{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../src/forms/utils/validate.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAmBH,MAAM,UAAU,mBAAmB,CAAC,OAAmB,EAAE,QAA6B;IACpF,QAAQ;SACL,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACpC,OAAO,CAAC,CAAC,CAAC,EAAE;QACX,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IACrB,CAAC,CAAC,CAAC;IAEL,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC,CAAC;IAE1F,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE;;QACpD,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;QAChE,MAAA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,0CAAE,eAAe,CAAC,QAAQ,EAAE;QAClG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;QAClD,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;QAElF,QAAQ;aACL,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACtG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { CdsControlMessage } from '../control-message/control-message.element';\nimport { CdsControl } from '../control/control.element';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\nexport type ValidityStateKey =\n  | 'valueMissing'\n  | 'badInput'\n  | 'customError'\n  | 'patternMismatch'\n  | 'rangeOverflow'\n  | 'rangeUnderflow'\n  | 'stepMismatch'\n  | 'tooLong'\n  | 'tooShort'\n  | 'typeMismatch'\n  | 'valid';\n\nexport function syncHTML5Validation(control: CdsControl, messages: CdsControlMessage[]) {\n  messages\n    .filter(m => m.hasAttribute('error'))\n    .forEach(m => {\n      m.setAttribute('hidden', '');\n      m.status = 'error';\n    });\n\n  control.inputControl.addEventListener('blur', () => control.inputControl.checkValidity());\n\n  control.inputControl.addEventListener('invalid', () => {\n    messages.forEach(message => message.setAttribute('hidden', ''));\n    messages.find(message => control.inputControl.validity[message.error])?.removeAttribute('hidden');\n    control.status = 'error';\n  });\n\n  control.inputControl.addEventListener('input', () => {\n    control.status = control.inputControl.validity.valid ? 'neutral' : control.status;\n\n    messages\n      .filter(m => control.inputControl.validity.valid && m.error && !control.inputControl.validity[m.error])\n      .forEach(message => message.setAttribute('hidden', ''));\n  });\n}\n"]}