{"version":3,"file":"alert.element.js","sourceRoot":"","sources":["../../../src/alert/alert.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { html, LitElement } from 'lit-element';\nimport {\n  baseStyles,\n  CommonStringsService,\n  event,\n  EventEmitter,\n  property,\n  querySlot,\n  querySlotAll,\n  setAttributes,\n  syncDefinedProps,\n  internalProperty,\n  id,\n} from '@clr/core/internal';\nimport { CdsIcon } from '@clr/core/icon/icon.element.js';\nimport { ClarityIcons } from '@clr/core/icon/icon.service.js';\nimport { infoStandardIcon } from '@clr/core/icon/shapes/info-standard.js';\nimport { successStandardIcon } from '@clr/core/icon/shapes/success-standard.js';\nimport { warningStandardIcon } from '@clr/core/icon/shapes/warning-standard.js';\nimport { errorStandardIcon } from '@clr/core/icon/shapes/error-standard.js';\nimport { helpIcon } from '@clr/core/icon/shapes/help.js';\nimport { AlertGroupTypes, AlertStatusTypes, AlertSizes } from './alert.interfaces.js';\nimport { CdsAlertActions } from './alert-actions.element.js';\nimport { CdsAlertGroup } from './alert-group.element.js';\nimport { styles } from './alert.element.css.js';\n\nexport function getIconStatusTuple(status: string): [string, string] {\n  const commonstrings = CommonStringsService.keys;\n\n  const statusIcons: { [key: string]: [string, string] } = {\n    info: [ClarityIcons.getIconNameFromShape(infoStandardIcon), commonstrings.info],\n    success: [ClarityIcons.getIconNameFromShape(successStandardIcon), commonstrings.success],\n    warning: [ClarityIcons.getIconNameFromShape(warningStandardIcon), commonstrings.warning],\n    danger: [ClarityIcons.getIconNameFromShape(errorStandardIcon), commonstrings.danger],\n    unknown: [ClarityIcons.getIconNameFromShape(helpIcon), commonstrings.info],\n    loading: ['loading', commonstrings.loading],\n  };\n\n  return statusIcons[status] ? statusIcons[status] : statusIcons.info;\n}\n\nexport function iconShapeIsAlertStatusType(shape: string): boolean {\n  const statusShapes = ['info', 'success', 'warning', 'danger', 'unknown'].map(s => {\n    return getIconStatusShape(s);\n  });\n  return statusShapes.indexOf(shape) > -1;\n}\n\nexport function iconTitleIsAlertStatusLabel(shape: string): boolean {\n  const statusLabels = ['info', 'success', 'warning', 'danger', 'unknown'].map(s => {\n    return getIconStatusLabel(s);\n  });\n  return statusLabels.indexOf(shape) > -1;\n}\n\nexport function getIconStatusShape(status: string): string {\n  return getIconStatusTuple(status)[0];\n}\n\nexport function getIconStatusLabel(status: string): string {\n  return getIconStatusTuple(status)[1];\n}\n\nexport function getAlertContentLayout(\n  containerType: 'wrapper' | 'content' | 'actions',\n  alertGroupType: AlertGroupTypes,\n  alertGroupHasPager: boolean\n) {\n  const fillLayoutValue = 'align:stretch';\n\n  switch (alertGroupType) {\n    case 'light':\n      return '';\n    case 'banner':\n      switch (containerType) {\n        case 'wrapper':\n          return alertGroupHasPager ? fillLayoutValue : '';\n        case 'content':\n          return 'align:shrink';\n        case 'actions':\n          return alertGroupHasPager ? fillLayoutValue : '';\n        default:\n          return '';\n      }\n    default:\n      switch (containerType) {\n        case 'wrapper':\n          return fillLayoutValue;\n        case 'content':\n          return fillLayoutValue;\n        case 'actions':\n          return 'align:shrink';\n        default:\n          return '';\n      }\n  }\n}\n\n/**\n * Alerts are banners that communicate a message with a severity attached to it.\n * They grab the userâ€™s attention to provide critical information needed in context.\n *\n * Alerts outside of a cds-alert-group or cds-app-alert-group component will be\n * displayed as a \"lightweight alert\". Lightweight alerts, by default, provide no\n * close button component and they inherit no status (a.k.a. success, danger, etc.).\n *\n * Alerts inside a cds-alert-group component inherit their status from the containing\n * alert group.\n *\n * Alerts inside a cds-app-alert-group component inherit their status as a default from\n * the containing app-alert group, although it can be overridden on individual alerts.\n *\n * ```typescript\n * import '@clr/core/alert/register.js';\n * ```\n *\n * ```html\n *   <cds-alert>\n *     Single Alert\n *     <cds-alert-actions>\n *       buttons, links\n *     </cds-alert-actions>\n *   </cds-alert>\n * ```\n *\n * @element cds-alert\n * @slot - Content slot for inside the alert\n * @event closeChange - notify when the user has clicked the dismiss button\n * @cssprop --color\n * @cssprop --background\n * @cssprop --border-radius\n * @cssprop --border-color\n * @cssprop --icon-color\n * @cssprop --close-icon-color\n * @cssprop --close-icon-color-hover\n */\nexport class CdsAlert extends LitElement {\n  @event() private closeChange: EventEmitter<boolean>;\n\n  /**\n   * @type {default | sm}\n   * Sets the overall height and width of the alert and icon based on value\n   */\n  @property({ type: String })\n  size: AlertSizes = 'default';\n\n  /**\n   * Sets up the buttons, layouts, close-button and other properties based on the alert group container\n   * Internal Use Only\n   * @private\n   */\n  @internalProperty({ type: String, reflect: true })\n  type: AlertGroupTypes = 'light';\n\n  @id()\n  private idForAriaDescriber: string;\n\n  /**\n   * If false, the alert will not render the close button.\n   *\n   * Lightweight alerts do not display close buttons\n   */\n  @property({ type: Boolean })\n  closable = false;\n\n  /**\n   * @type {default | info | success | warning | danger | unknown | loading}\n   * Sets the color of the alert from a predefined list of statuses\n   */\n  @property({ type: String })\n  status: AlertStatusTypes = 'default';\n\n  @property({ type: String })\n  closeIconTitle = CommonStringsService.keys.alertCloseButtonAriaLabel;\n\n  @querySlot('cds-alert-actions') private alertActions: CdsAlertActions;\n\n  @querySlotAll('cds-icon', { assign: 'alert-icon' }) protected alertIcons: NodeListOf<CdsIcon>;\n\n  @querySlot('cds-internal-close-button', { assign: 'close-button' }) protected closeButton: HTMLElement;\n\n  connectedCallback() {\n    super.connectedCallback();\n    setAttributes(this, ['aria-describedby', this.idForAriaDescriber], ['role', 'region']);\n  }\n\n  updated(props: Map<string, any>) {\n    super.updated(props);\n    syncDefinedProps(props, this, [this.alertActions]);\n  }\n\n  private get parentGroupHasPager(): boolean {\n    return this.type === 'banner' && !!(this.parentElement as CdsAlertGroup).pager;\n  }\n\n  render() {\n    return html`\n      <div\n        class=\"private-host\"\n        cds-layout=\"${this.type === 'banner'\n          ? 'horizontal wrap:none gap:sm align:vertical-center align:horizontal-center'\n          : 'horizontal wrap:none gap:xs'}\"\n      >\n        ${this.type === 'banner' && !this.parentGroupHasPager\n          ? html`<span class=\"alert-spacer\" cds-layout=\"align:stretch\">&nbsp;</span>`\n          : html``}\n        <span class=\"alert-icon-wrapper\" aria-hidden=\"true\" cds-layout=\"horizontal\">\n          ${this.status === 'loading'\n            ? html`<span\n                class=\"${this.type === 'banner'\n                  ? 'spinner spinner-inline spinner-neutral-0'\n                  : 'spinner spinner-inline'}\"\n                aria-hidden=\"true\"\n                cds-layout=\"align:horizontal-center\"\n              ></span>`\n            : html`<slot name=\"alert-icon\"\n                ><cds-icon\n                  class=\"alert-status-icon\"\n                  shape=\"${getIconStatusShape(this.status)}\"\n                  title=\"${getIconStatusLabel(this.status)}\"\n                  aria-hidden=\"true\"\n                  cds-layout=\"align:horizontal-center\"\n                ></cds-icon\n              ></slot>`}\n        </span>\n        <span\n          class=\"alert-content-wrapper\"\n          cds-layout=\"horizontal wrap:none ${getAlertContentLayout('wrapper', this.type, this.parentGroupHasPager)}\"\n        >\n          <span\n            id=\"${this.idForAriaDescriber}\"\n            role=\"status\"\n            class=\"alert-content\"\n            cds-layout=\"${getAlertContentLayout('content', this.type, this.parentGroupHasPager)}\"\n          >\n            <slot></slot>\n            ${this.type === 'light' ? html`<slot name=\"actions\"></slot>` : html``}\n          </span>\n          ${this.type === 'light'\n            ? html``\n            : html`<span\n                class=\"alert-actions-wrapper\"\n                cds-layout=\"${this.alertActions ? 'p-l:md' : ''} ${getAlertContentLayout(\n                  'actions',\n                  this.type,\n                  this.parentGroupHasPager\n                )}\"\n                ><slot name=\"actions\"></slot\n              ></span>`}\n        </span>\n\n        ${this.type === 'banner' && !this.parentGroupHasPager\n          ? html`<span class=\"alert-spacer\" cds-layout=\"align:stretch\">&nbsp;</span>`\n          : html``}\n        ${this.type !== 'light' && this.closable\n          ? html`<span class=\"alert-close-wrapper\"\n              ><slot name=\"close-button\"\n                ><cds-internal-close-button\n                  icon-size=\"${this.type === 'banner' ? '20' : '16'}\"\n                  @click=\"${() => this.closeAlert()}\"\n                  aria-label=\"${this.closeIconTitle}\"\n                ></cds-internal-close-button></slot\n            ></span>`\n          : html``}\n      </div>\n    `;\n  }\n\n  constructor() {\n    super();\n    ClarityIcons.addIcons(infoStandardIcon, errorStandardIcon, successStandardIcon, warningStandardIcon, helpIcon);\n  }\n\n  private closeAlert() {\n    this.closeChange.emit(true);\n  }\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n}\n"]}