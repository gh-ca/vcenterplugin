{"version":3,"file":"tag.element.js","sourceRoot":"","sources":["../../../src/tag/tag.element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,gCAAgC,CAAC;AAC3D,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAe,MAAM,oBAAoB,CAAC;AACvG,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAE9C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,OAAO,MAAO,SAAQ,aAAa;IAyDvC;QACE,KAAK,EAAE,CAAC;QA5CV;;;;;;WAMG;QAEH,aAAQ,GAAG,KAAK,CAAC;QAqCf,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAlDD,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAYD,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,OAAO,CAAC,KAAuD;QAC7D,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAErB,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;YAC3D,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvB;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;YACtD,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;SAC/D;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;UAEL,IAAI,CAAC,IAAI;YACT,CAAC,CAAC,IAAI,CAAA,6DAA6D;YACnE,CAAC,CAAC,IAAI,CAAA,sCAAsC;;UAE5C,IAAI,CAAC,KAAK;YACV,CAAC,CAAC,IAAI,CAAA,+DAA+D;YACrE,CAAC,CAAC,IAAI,CAAA,uCAAuC;UAC7C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAA,yEAAyE,CAAC,CAAC,CAAC,IAAI,CAAA,EAAE;;QAExG,IAAI,CAAC,oBAAoB;KAC5B,CAAC;IACJ,CAAC;CAMF;AAxDC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sCACP;AAIpB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;qCACiC;AAa5D;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;wCACX","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { ClarityIcons } from '@clr/core/icon/icon.service.js';\nimport { timesIcon } from '@clr/core/icon/shapes/times.js';\nimport { assignSlotNames, baseStyles, CdsBaseButton, property, StatusTypes } from '@clr/core/internal';\nimport { html } from 'lit-element';\nimport { styles } from './tag.element.css.js';\n\n/**\n * Tags show concise metadata in a compact format.\n * Tags are visually styled to differentiate them from buttons.\n *\n * ```typescript\n * import '@clr/core/tag/register.js';\n * ```\n *\n * ```html\n * <cds-tag status=\"info\">Info</cds-tag>\n * ```\n *\n * @beta\n * @element cds-tag\n * @slot - Content slot for inside the tag\n * @cssprop --background\n * @cssprop --border-color\n * @cssprop --border-radius\n * @cssprop --border-width\n * @cssprop --color\n * @cssprop --font-size\n * @cssprop --padding\n * @cssprop --size\n */\nexport class CdsTag extends CdsBaseButton {\n  /** Sets the color of the tag (and badge if present) from the following predefined list of statuses:\n   *  'info', 'success', 'warning', 'danger'\n   */\n  @property({ type: String })\n  status: StatusTypes;\n\n  /** Sets the color of the tag (and badge if present) from a predefined list of choices */\n  @property({ type: String })\n  color: 'gray' | 'purple' | 'blue' | 'orange' | 'light-blue';\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  /** If present, shows a close icon to one side of the tag.\n   *  Note that applications must wire up the action to remove the tag on click and also\n   *  that you cannot have a clickable AND closable tag. The closable attribute-property\n   *  shows the close icon. What happens when the tag is clicked is for application developers\n   *  to decide.\n   *  If closable is present, the tag will be considered \"clickable\".\n   */\n  @property({ type: Boolean })\n  closable = false;\n\n  connectedCallback() {\n    super.connectedCallback();\n    assignSlotNames([this.icon, 'tag-icon'], [this.badge, 'tag-badge']);\n  }\n\n  updated(props: Map<string, string | boolean | null | undefined>) {\n    super.updated(props);\n\n    if (props.has('closable') && props.get('closable') === true) {\n      this.readonly = false;\n    }\n\n    if (!this.readonly && !this.getAttribute('aria-label')) {\n      console.warn('Clickable and closable tags need aria-labels.');\n    }\n  }\n\n  render() {\n    return html`\n      <div class=\"private-host\" cds-layout=\"horizontal\">\n        ${this.icon\n          ? html`<span class=\"tag-icon\"><slot name=\"tag-icon\"></slot></span>`\n          : html`<span class=\"tag-icon empty\"></span>`}\n        <span class=\"tag-content\"><slot></slot></span>\n        ${this.badge\n          ? html`<span class=\"tag-badge\"><slot name=\"tag-badge\"></slot></span>`\n          : html`<span class=\"tag-badge empty\"></span>`}\n        ${this.closable ? html`<span class=\"tag-close-icon\"><cds-icon shape=\"times\"></cds-icon></span>` : html``}\n      </div>\n      ${this.hiddenButtonTemplate}\n    `;\n  }\n\n  constructor() {\n    super();\n    ClarityIcons.addIcons(timesIcon);\n  }\n}\n"]}