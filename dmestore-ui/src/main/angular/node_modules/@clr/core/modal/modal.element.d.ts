import { CdsBaseFocusTrap } from '@clr/core/internal';
/**
 * Web component modal.
 *
 * ```typescript
 * import '@clr/core/modal/register.js';
 * ```
 *
 * ```html
 * <cds-modal>
 *   <cds-modal-header>
 *      <h3 cds-text="title">My Modal</h3>
 *   </cds-modal-header>
 *   <cds-modal-content>
 *     <p>Lorem Ipsum</p>
 *   </cds-modal-content>
 *   <cds-modal-actions>
 *       <cds-button>Ok</cds-button>
 *   </cds-modal-actions>
 * </cds-modal>
 * ```
 *
 * @element cds-modal
 * @slot
 * @slot cds-modal-content
 * @slot cds-modal-header
 * @slot cds-modal-actions
 * @event closeChange - notify when the user has clicked the close button
 * @cssprop --backdrop-opacity
 * @cssprop --backdrop-background
 * @cssprop --box-shadow-color
 * @cssprop --border-radius
 * @cssprop --border
 * @cssprop --background
 * @cssprop --close-icon-color
 * @cssprop --close-icon-color-hover
 * @cssprop --content-box-shadow-color
 * @cssprop --width
 */
export declare class CdsModal extends CdsBaseFocusTrap {
    static get styles(): import("lit-element").CSSResult[];
    private closeChange;
    /** If false, the modal will not render the close button.  */
    closable: boolean;
    /** Sets the overall height and width of the modal and icon based on value */
    size: 'default' | 'sm' | 'lg' | 'xl';
    private idForAriaLabel;
    render(): import("lit-element").TemplateResult;
    connectedCallback(): void;
    disconnectedCallback(): void;
    closeModal(): void;
    private fireEventOnEscape;
}
