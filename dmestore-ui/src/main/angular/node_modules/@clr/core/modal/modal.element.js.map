{"version":3,"file":"modal.element.js","sourceRoot":"","sources":["../../../src/modal/modal.element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EACL,UAAU,EACV,oBAAoB,EACpB,KAAK,EAEL,KAAK,EACL,QAAQ,EACR,EAAE,EACF,gBAAgB,GACjB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH,MAAM,OAAO,QAAS,SAAQ,gBAAgB;IAA9C;;QAOE,6DAA6D;QAE7D,aAAQ,GAAG,IAAI,CAAC;QA6DR,sBAAiB,GAAG,CAAC,CAAgB,EAAE,EAAE;YAC/C,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE;gBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IA1EC,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAeD,MAAM;QACJ,OAAO,IAAI,CAAA;;qFAEsE,IAAI,CAAC,cAAc;yDAC/C,oBAAoB,CAAC,IAAI,CAAC,iBAAiB;;;yBAG3E,IAAI,CAAC,cAAc;;;;;;gBAM5B,IAAI,CAAC,QAAQ;YACb,CAAC,CAAC,IAAI,CAAA;;;gCAGU,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE;oCACnB,oBAAoB,CAAC,IAAI,CAAC,yBAAyB;mCACpD,IAAI;;mBAEpB;YACH,CAAC,CAAC,IAAI,CAAA,EAAE;;;;;;;;;yDASiC,oBAAoB,CAAC,IAAI,CAAC,eAAe;;;;KAI7F,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7D,CAAC;IAED,oBAAoB;QAClB,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAChE,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;CAOF;AAtEU;IAAR,KAAK,EAAE;6CAA4C;AAIpD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;0CACZ;AAIhB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sCACU;AAGrC;IADC,EAAE,EAAE;gDAC0B","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { html } from 'lit-element';\nimport {\n  baseStyles,\n  CommonStringsService,\n  event,\n  EventEmitter,\n  onKey,\n  property,\n  id,\n  CdsBaseFocusTrap,\n} from '@clr/core/internal';\nimport { styles } from './modal.element.css.js';\n\n/**\n * Web component modal.\n *\n * ```typescript\n * import '@clr/core/modal/register.js';\n * ```\n *\n * ```html\n * <cds-modal>\n *   <cds-modal-header>\n *      <h3 cds-text=\"title\">My Modal</h3>\n *   </cds-modal-header>\n *   <cds-modal-content>\n *     <p>Lorem Ipsum</p>\n *   </cds-modal-content>\n *   <cds-modal-actions>\n *       <cds-button>Ok</cds-button>\n *   </cds-modal-actions>\n * </cds-modal>\n * ```\n *\n * @element cds-modal\n * @slot\n * @slot cds-modal-content\n * @slot cds-modal-header\n * @slot cds-modal-actions\n * @event closeChange - notify when the user has clicked the close button\n * @cssprop --backdrop-opacity\n * @cssprop --backdrop-background\n * @cssprop --box-shadow-color\n * @cssprop --border-radius\n * @cssprop --border\n * @cssprop --background\n * @cssprop --close-icon-color\n * @cssprop --close-icon-color-hover\n * @cssprop --content-box-shadow-color\n * @cssprop --width\n */\nexport class CdsModal extends CdsBaseFocusTrap {\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  @event() private closeChange: EventEmitter<boolean>;\n\n  /** If false, the modal will not render the close button.  */\n  @property({ type: Boolean })\n  closable = true;\n\n  /** Sets the overall height and width of the modal and icon based on value */\n  @property({ type: String })\n  size: 'default' | 'sm' | 'lg' | 'xl';\n\n  @id()\n  private idForAriaLabel: string;\n\n  render() {\n    return html`\n      <div class=\"private-host\" cds-layout=\"horizontal p:md p@md:xl align:center\">\n        <div class=\"modal-dialog\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"${this.idForAriaLabel}\">\n          <div cds-layout=\"display:screen-reader-only\">${CommonStringsService.keys.modalContentStart}</div>\n          <div class=\"modal-content\" cds-layout=\"vertical gap:md gap@md:lg align:stretch p:lg\">\n            <div cds-layout=\"horizontal gap:md wrap:none align:vertical-center\">\n              <div id=\"${this.idForAriaLabel}\">\n                <slot name=\"modal-header\"></slot>\n              </div>\n              <div cds-layout=\"align:right\">\n                <slot name=\"modal-header-actions\"></slot>\n              </div>\n              ${this.closable\n                ? html`\n                    <cds-internal-close-button\n                      cds-layout=\"align:top\"\n                      @click=\"${() => this.closeModal()}\"\n                      aria-label=\"${CommonStringsService.keys.modalCloseButtonAriaLabel}\"\n                      .iconSize=\"${'24'}\"\n                    ></cds-internal-close-button>\n                  `\n                : html``}\n            </div>\n            <div class=\"modal-body\">\n              <slot></slot>\n            </div>\n            <div cds-layout=\"align-stretch\">\n              <slot name=\"modal-actions\"></slot>\n            </div>\n          </div>\n          <div cds-layout=\"display:screen-reader-only\">${CommonStringsService.keys.modalContentEnd}</div>\n        </div>\n        <div class=\"modal-backdrop\" aria-hidden=\"true\"></div>\n      </div>\n    `;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('keydown', this.fireEventOnEscape);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener('keydown', this.fireEventOnEscape);\n  }\n\n  closeModal() {\n    this.closeChange.emit(true);\n  }\n\n  private fireEventOnEscape = (e: KeyboardEvent) => {\n    onKey('escape', e, () => {\n      this.closeModal();\n    });\n  };\n}\n"]}