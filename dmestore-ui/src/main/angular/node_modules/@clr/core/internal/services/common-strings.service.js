/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { commonStringsDefault } from './common-strings.default.js';
export class CommonStringsServiceInternal {
    constructor() {
        this.strings = commonStringsDefault;
    }
    /**
     * Access to all of the keys as strings
     */
    get keys() {
        return this.strings;
    }
    /**
     * Allows you to pass in new overrides for localization
     */
    localize(overrides) {
        this.strings = Object.assign(Object.assign({}, this.strings), overrides);
    }
    /**
     * Parse a string with a set of tokens to replace
     */
    parse(source, tokens = {}) {
        const names = Object.keys(tokens);
        let output = source;
        if (names.length) {
            names.forEach(name => {
                output = output.replace(`{${name}}`, tokens[name]);
            });
        }
        return output;
    }
}
// typically for core we would use a Static class with a instance object but for
// clr-angular support we keep this a Class instance.
/**
 * I18n service for updating internalized component strings
 *
 * ```typescript
 * import { CommonStringsService } from '@clr/core';
 *
 * CommonStringsService.keys.success // 'success'
 * ```
 */
export const CommonStringsService = new CommonStringsServiceInternal();
//# sourceMappingURL=common-strings.service.js.map