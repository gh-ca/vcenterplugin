{"version":3,"file":"query-slot.js","sourceRoot":"","sources":["../../../../src/internal/decorators/query-slot.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { LitElement } from 'lit-element';\nimport { LogService } from '../services/log.service.js';\n\n// Slot Query decorators are similar to the query decorator in lit-element.\n// Instead of querying the component template they query the content slot of the component.\n\nconst legacyQuery = (descriptor: PropertyDescriptor, proto: {}, name: PropertyKey) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: any) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\nexport interface QuerySlotConfig {\n  required?: 'error' | 'warning';\n  requiredMessage?: string;\n  /** auto assign found element to a particular slot */\n  assign?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\nexport function querySlot(selector: string, config?: QuerySlotConfig) {\n  return (protoOrDescriptor: {} | any, name?: PropertyKey): any => {\n    const targetFirstUpdated: () => void = protoOrDescriptor.firstUpdated;\n\n    function firstUpdated(this: any): void {\n      const ref = this.querySelector(selector);\n\n      if (!ref && config?.required) {\n        const message =\n          config.requiredMessage ||\n          `The <${selector}> element is required to use <${this.tagName.toLocaleLowerCase()}>`;\n        if (config.required === 'error') {\n          throw new Error(message);\n        } else {\n          LogService.warn(message, this);\n        }\n      }\n\n      if (config?.assign && ref?.hasAttribute('slot') === false) {\n        ref.setAttribute('slot', config.assign);\n      }\n\n      if (targetFirstUpdated) {\n        targetFirstUpdated.apply(this);\n      }\n    }\n\n    protoOrDescriptor.firstUpdated = firstUpdated;\n\n    const descriptor = {\n      get(this: LitElement) {\n        return this.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return name !== undefined\n      ? legacyQuery(descriptor, protoOrDescriptor as {}, name)\n      : standardQuery(descriptor, protoOrDescriptor as any);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\nexport function querySlotAll(selector: string, config?: QuerySlotConfig) {\n  return (protoOrDescriptor: {} | any, name?: PropertyKey): any => {\n    const targetFirstUpdated: () => void = protoOrDescriptor.firstUpdated;\n\n    function firstUpdated(this: any, props: Map<string, any>): void {\n      if (config?.assign) {\n        Array.from(this.querySelectorAll(selector))\n          .filter((i: any) => !i.hasAttribute('slot'))\n          .forEach((i: any) => i.setAttribute('slot', config.assign as string));\n      }\n\n      if (targetFirstUpdated) {\n        targetFirstUpdated.apply(this, [props]);\n      }\n    }\n\n    protoOrDescriptor.firstUpdated = firstUpdated;\n\n    const descriptor = {\n      get(this: LitElement) {\n        return this.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return name !== undefined\n      ? legacyQuery(descriptor, protoOrDescriptor as {}, name)\n      : standardQuery(descriptor, protoOrDescriptor as any);\n  };\n}\n"]}