{"version":3,"file":"identity.js","sourceRoot":"","sources":["../../../../src/internal/utils/identity.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,MAAM,aAAa,CAAC;AAC7B,OAAO,OAAO,MAAM,kBAAkB,CAAC;AACvC,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,MAAM,UAAU,YAAY,CAAC,GAAQ;IACnC,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,GAAQ;IAC/B,OAAO,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,GAAQ;IACpC,OAAO,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,GAAQ;IAC/C,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,GAAQ;IAC/B,OAAO,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,KAAK,CAAC,GAAQ;IAC5B,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,GAAQ;IAC/C,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,GAAQ,EAAE,MAAW;IACtD,OAAO,GAAG,KAAK,MAAM,CAAC;AACxB,CAAC;AAED,8DAA8D;AAC9D,MAAM,UAAU,wBAAwB,CAAC,GAA8B,EAAE,MAAc;IACrF,OAAO,aAAa,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAC/D,CAAC;AAED,+CAA+C;AAC/C,MAAM,UAAU,iCAAiC,CAAC,GAA8B,EAAE,MAAc;IAC9F,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,WAAgB;IAC5C,OAAO,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,QAAQ;IACtB,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;AACvD,CAAC;AAED,iDAAiD;AACjD,SAAS,QAAQ,CAAC,EAAiB;IACjC,MAAM,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC5B,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE;QAC3B,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;YACd,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;aAAM;YACL,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SACzB;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,GAAQ;IAChC,gGAAgG;IAChG,6EAA6E;IAE7E,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AACtE,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport is from 'ramda/es/is';\nimport isEmpty from 'ramda/es/isEmpty';\nimport isNil from 'ramda/es/isNil';\n\nexport function isNilOrEmpty(val: any): boolean {\n  return isNil(val) || isEmpty(val);\n}\n\nexport function isString(val: any): boolean {\n  return is(String, val);\n}\n\nexport function isStringOrNil(val: any): boolean {\n  return is(String, val) || isNil(val);\n}\n\nexport function isStringAndNotNilOrEmpty(val: any) {\n  return isString(val) && !isNil(val) && !isEmpty(val);\n}\n\nexport function isObject(val: any) {\n  return is(Object, val);\n}\n\nexport function isMap(val: any) {\n  return is(Map, val);\n}\n\nexport function isObjectAndNotNilOrEmpty(val: any) {\n  return !isNilOrEmpty(val) && isObject(val);\n}\n\nexport function hasPropertyChanged(val: any, oldVal: any): boolean {\n  return val !== oldVal;\n}\n\n// marks nil values (undefined, null, empty string) as changed\nexport function hasStringPropertyChanged(val: string | null | undefined, oldVal: string): boolean {\n  return isStringOrNil(val) && hasPropertyChanged(val, oldVal);\n}\n\n// ignores nil values when checking for changes\nexport function hasStringPropertyChangedAndNotNil(val: string | null | undefined, oldVal: string): boolean {\n  return !isNilOrEmpty(val) && hasPropertyChanged(val, oldVal);\n}\n\nexport function getEnumValues(enumeration: any) {\n  return Object.values(enumeration);\n}\n\nexport function createId() {\n  return `_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n// used by deepClone() tested through integration\nfunction cloneMap(mp: Map<any, any>): Map<any, any> {\n  const clonedMap = new Map();\n  for (const [key, val] of mp) {\n    if (isMap(val)) {\n      clonedMap.set(key, cloneMap(val));\n    } else {\n      clonedMap.set(key, val);\n    }\n  }\n  return clonedMap;\n}\n\nexport function deepClone(obj: any) {\n  // this will clone almost anything (maps, arrays, objects, etc.) to the lowest of the low levels\n  // be careful using this carelessly b/c it CAN have performance implications!\n\n  return isMap(obj) ? cloneMap(obj) : JSON.parse(JSON.stringify(obj));\n}\n"]}