{"version":3,"file":"global-style.js","sourceRoot":"","sources":["../../../../src/internal/decorators/global-style.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,sBAAsB;AACtB,SAAS,WAAW,CAAC,UAA8B,EAAE,iBAAqB,EAAE,IAAiB;IAC3F,MAAM,CAAC,cAAc,CAAC,iBAAiB,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAC7D,CAAC;AAED,2BAA2B;AAC3B,SAAS,aAAa,CAAC,UAA8B,EAAE,OAAwB;IAC7E,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,WAAW;QACtB,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,UAAU;KACX,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,WAAW;IACzB,OAAO,CAAC,iBAAsB,EAAE,IAAY,EAAO,EAAE;QACnD,MAAM,uBAAuB,GAAe,iBAAiB,CAAC,iBAAiB,CAAC;QAEhF,SAAS,iBAAiB;YACxB,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC5D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,IAAI,aAAa,CAAC,CAAC,QAAQ,EAAE,CAAC;YAE9E,IAAI,uBAAuB,EAAE;gBAC3B,uBAAuB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACrC;QACH,CAAC;QAED,iBAAiB,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAExD,MAAM,MAAM,GAAG,UAAqB,KAAyB;YAC3D,IAAI,CAAC,KAAK,IAAI,aAAa,CAAC,GAAG,KAAK,CAAC;QACvC,CAAC,CAAC;QAEF,MAAM,UAAU,GAAG;YACjB,GAAG,EAAE,MAAM;YACX,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QAEF,OAAO,IAAI,KAAK,SAAS;YACvB,CAAC,CAAC,WAAW,CAAC,UAAU,EAAE,iBAAiB,EAAE,IAAI,CAAC;YAClD,CAAC,CAAC,aAAa,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IACnD,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { CSSResult } from 'lit-element';\n\n// Legacy TS Decorator\nfunction legacyEvent(descriptor: PropertyDescriptor, protoOrDescriptor: {}, name: PropertyKey) {\n  Object.defineProperty(protoOrDescriptor, name, descriptor);\n}\n\n// TC39 Decorators proposal\nfunction standardEvent(descriptor: PropertyDescriptor, element: { key: string }) {\n  return {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n  };\n}\n\n/**\n * Appends a global `<style>` tag to the light DOM of a given custom element.\n * This is useful for when styles need to be applied that are not supported\n * withing a `::slotted()` selector such as ::-vendor style selectors.\n */\nexport function globalStyle() {\n  return (protoOrDescriptor: any, name: string): any => {\n    const targetConnectedCallback: () => void = protoOrDescriptor.connectedCallback;\n\n    function connectedCallback(this: any): void {\n      this[`__${name}StyleTag`] = document.createElement('style');\n      this.prepend(this[`__${name}StyleTag`]);\n      this[`__${name}StyleTag`].innerText = this[`__${name}GlobalStyle`].toString();\n\n      if (targetConnectedCallback) {\n        targetConnectedCallback.apply(this);\n      }\n    }\n\n    protoOrDescriptor.connectedCallback = connectedCallback;\n\n    const setter = function (this: any, value: CSSResult | string) {\n      this[`__${name}GlobalStyle`] = value;\n    };\n\n    const descriptor = {\n      set: setter,\n      enumerable: true,\n      configurable: true,\n    };\n\n    return name !== undefined\n      ? legacyEvent(descriptor, protoOrDescriptor, name)\n      : standardEvent(descriptor, protoOrDescriptor);\n  };\n}\n"]}