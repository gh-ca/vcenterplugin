{"version":3,"file":"keycodes.js","sourceRoot":"","sources":["../../../../src/internal/utils/keycodes.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { KeyCodeService } from '../services/keycodes.service.js';\n\n/**\n * keyWasEvented() checks to see if a given key is part of any KeyboardEvent it is passed.\n */\nexport function keyWasEvented(evt: KeyboardEvent, whichKey: string) {\n  // evt.key support goes all the way back to IE9; we don't need evt.keyCode for IE support!\n  return KeyCodeService.getCode(whichKey) === evt.key || KeyCodeService.getIeCode(whichKey) === evt.key;\n}\n\n/**\n * checkModifierKey() tests if a special key (Ctrl, Alt, Meta, Shift) part of a KeyboardEvent.\n */\nfunction checkModifierKey(evt: KeyboardEvent, key: string) {\n  switch (key) {\n    case 'ctrl':\n      return evt.ctrlKey;\n    case 'alt':\n      return evt.altKey;\n    case 'shift':\n      return evt.shiftKey;\n    case 'cmd':\n    case 'win':\n    case 'meta':\n      return evt.metaKey;\n    default:\n      return false;\n  }\n}\n\n// handlers -> single keys or any of a collection of keys\n\n/**\n * onKey() takes a single key and fires a handler if that key is part of\n * the KeyboardEvent it was passed.\n */\nexport function onKey(whichKey: string, evt: KeyboardEvent, handler: any) {\n  if (keyWasEvented(evt, whichKey)) {\n    handler();\n  }\n}\n\n/**\n * onAnyKey() takes an array of keys and fires a handler if any of the keys are part of\n * the KeyboardEvent it was passed.\n */\nexport function onAnyKey(whichKeys: string[], evt: KeyboardEvent, handler: any) {\n  const eventedKeys = whichKeys.filter(k => {\n    return keyWasEvented(evt, k);\n  });\n\n  if (eventedKeys.length > 0) {\n    handler();\n  }\n}\n\n// key combos\n\n/**\n * onKeyCombo() takes a string representation of a combination of keys and modifier keys such as\n * 'ctrl+shift+a'.\n *\n * onKeyCombo() does not make accommodation for the '+' symbol in a key combo. Consider using 'ctrl+shift+='.\n *\n * onKeyCombo() accounts for 'cmd', 'win', and 'meta' keys inside keycombos. 'cmd+K', 'win+K', and 'meta+K'\n * are all the same thing to onKeyCombo().\n */\nexport function onKeyCombo(whichKeyCombo: string, evt: KeyboardEvent, handler: any) {\n  // TODO! need to make sure ALL combo modifier keys were pressed\n  // TESTME!\n  if (wereModifierComboKeysPressed(whichKeyCombo, evt) && wereNonModifierComboKeysPressed(whichKeyCombo, evt)) {\n    handler();\n  }\n}\n\n// key combo helpers\n\nconst modifierKeys = ['ctrl', 'alt', 'shift', 'meta', 'cmd', 'win'];\n\n/**\n * getModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * special keys in the keycombo.\n */\nexport function getModifierKeysFromKeyCombo(keyCombo: string) {\n  // note: at some point, we may have to handle a situation of 'ctrl++' or 'ctrl+plus'\n  // it's unlikely so i'm not over-coding for it right now\n  return keyCombo.split('+').filter(k => {\n    return modifierKeys.indexOf(k) > -1;\n  });\n}\n\n/**\n * removeModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * non-special keys in the keycombo.\n */\nexport function removeModifierKeysFromKeyCombo(keyCombo: string) {\n  return keyCombo.split('+').filter(k => {\n    return modifierKeys.indexOf(k) < 0;\n  });\n}\n\n/**\n * wereModifierComboKeysPressed() tests if ALL special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent keycombo.\n *\n * @private\n *\n */\nfunction wereModifierComboKeysPressed(keyCombo: string, evt: KeyboardEvent) {\n  const modifierKeyArray = getModifierKeysFromKeyCombo(keyCombo);\n\n  if (modifierKeyArray.length === 0) {\n    return true;\n  }\n\n  return modifierKeyArray.reduce((acc: boolean, currentKey: string) => acc && checkModifierKey(evt, currentKey), true);\n}\n\n/**\n * wereNonModifierComboKeysPressed() tests if non-special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent.\n *\n * @private\n *\n */\nfunction wereNonModifierComboKeysPressed(keyCombo: string, evt: KeyboardEvent): boolean {\n  const keyArray = removeModifierKeysFromKeyCombo(keyCombo);\n\n  if (keyArray.length === 0) {\n    return true;\n  }\n\n  return keyArray.reduce((acc: boolean, currentKey: string) => acc && keyWasEvented(evt, currentKey), true);\n}\n"]}