{"version":3,"file":"common-strings.service.js","sourceRoot":"","sources":["../../../../src/internal/services/common-strings.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,oBAAoB,EAAE,MAAM,6BAA6B,CAAC;AAGnE,MAAM,OAAO,4BAA4B;IAAzC;QAQU,YAAO,GAAG,oBAAoB,CAAC;IAsBzC,CAAC;IA7BC;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAID;;OAEG;IACH,QAAQ,CAAC,SAAoC;QAC3C,IAAI,CAAC,OAAO,mCAAQ,IAAI,CAAC,OAAO,GAAK,SAAS,CAAE,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAc,EAAE,SAAoC,EAAE;QAC1D,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,MAAM,GAAG,MAAM,CAAC;QACpB,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACnB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAED,gFAAgF;AAChF,qDAAqD;AACrD;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,IAAI,4BAA4B,EAAE,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { commonStringsDefault } from './common-strings.default.js';\nimport { ClrCommonStrings } from './common-strings.interface.js';\n\nexport class CommonStringsServiceInternal {\n  /**\n   * Access to all of the keys as strings\n   */\n  get keys(): Readonly<ClrCommonStrings> {\n    return this.strings;\n  }\n\n  private strings = commonStringsDefault;\n\n  /**\n   * Allows you to pass in new overrides for localization\n   */\n  localize(overrides: Partial<ClrCommonStrings>) {\n    this.strings = { ...this.strings, ...overrides };\n  }\n\n  /**\n   * Parse a string with a set of tokens to replace\n   */\n  parse(source: string, tokens: { [key: string]: string } = {}) {\n    const names = Object.keys(tokens);\n    let output = source;\n    if (names.length) {\n      names.forEach(name => {\n        output = output.replace(`{${name}}`, tokens[name]);\n      });\n    }\n    return output;\n  }\n}\n\n// typically for core we would use a Static class with a instance object but for\n// clr-angular support we keep this a Class instance.\n/**\n * I18n service for updating internalized component strings\n *\n * ```typescript\n * import { CommonStringsService } from '@clr/core';\n *\n * CommonStringsService.keys.success // 'success'\n * ```\n */\nexport const CommonStringsService = new CommonStringsServiceInternal();\n"]}