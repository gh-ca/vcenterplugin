{"version":3,"file":"keycodes.service.js","sourceRoot":"","sources":["../../../../src/internal/services/keycodes.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAWjD,MAAM,eAAe,GAAmB,IAAI,GAAG,CAAC;IAC9C;QACE,YAAY;QACZ,IAAI,GAAG,CAAC;YACN,uBAAuB,WAAW,CAAC;YACnC,qBAAkB,MAAM,CAAC;SAC1B,CAAC;KACH;IACD;QACE,UAAU;QACV,IAAI,GAAG,CAAC;YACN,uBAAuB,SAAS,CAAC;YACjC,qBAAkB,IAAI,CAAC;SACxB,CAAC;KACH;IACD;QACE,YAAY;QACZ,IAAI,GAAG,CAAC;YACN,uBAAuB,WAAW,CAAC;YACnC,qBAAkB,MAAM,CAAC;SAC1B,CAAC;KACH;IACD;QACE,KAAK;QACL,IAAI,GAAG,CAAC;YACN,uBAAuB,KAAK,CAAC;YAC7B,qBAAkB,KAAK,CAAC;SACzB,CAAC;KACH;IACD;QACE,OAAO;QACP,IAAI,GAAG,CAAC;YACN,uBAAuB,OAAO,CAAC;YAC/B,qBAAkB,OAAO,CAAC;SAC3B,CAAC;KACH;IACD;QACE,QAAQ;QACR,IAAI,GAAG,CAAC;YACN,uBAAuB,QAAQ,CAAC;YAChC,qBAAkB,KAAK,CAAC;SACzB,CAAC;KACH;IACD;QACE,OAAO;QACP,IAAI,GAAG,CAAC;YACN,uBAAuB,GAAG,CAAC;YAC3B,qBAAkB,UAAU,CAAC;SAC9B,CAAC;KACH;IACD;QACE,MAAM;QACN,IAAI,GAAG,CAAC;YACN,uBAAuB,MAAM,CAAC;YAC9B,qBAAkB,MAAM,CAAC;SAC1B,CAAC;KACH;IACD;QACE,KAAK;QACL,IAAI,GAAG,CAAC;YACN,uBAAuB,KAAK,CAAC;YAC7B,qBAAkB,KAAK,CAAC;SACzB,CAAC;KACH;CACF,CAAC,CAAC;AAEH;;;;;;;;;GASG;AACH,MAAM,OAAO,cAAc;IACzB;;;;OAIG;IACH,MAAM,KAAK,QAAQ;QACjB,OAAO,SAAS,CAAC,eAAe,CAAC,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,OAAe,EAAE,IAAY,EAAE,UAAmB;QAC3D,MAAM,uBAAuB,GAAG,IAAI,GAAG,CAAC,CAAC,uBAAuB,IAAI,CAAC,CAAC,CAAC,CAAC;QAExE,IAAI,UAAU,EAAE;YACd,uBAAuB,CAAC,GAAG,qBAAkB,UAAU,CAAC,CAAC;SAC1D;QAED,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,OAAe;QACxB,OAAO,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,OAAe;QAC5B,OAAO,sBAAsB,CAAC,OAAO,wBAAwB,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,OAAe;QAC9B,OAAO,sBAAsB,CAAC,OAAO,sBAAmB,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzE,CAAC;CACF;AAED,MAAM,UAAU,sBAAsB,CACpC,YAAoB,EACpB,oCAAwD,EACxD,QAAQ,GAAG,eAAe;;IAE1B,OAAO,OAAA,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,0CAAE,GAAG,CAAC,aAAa,MAAK,EAAE,CAAC;AAC9D,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { deepClone } from '../utils/identity.js';\n\nconst enum KeyCodeTypes {\n  DEFAULT = 'code',\n  IE = 'ie-code',\n}\n\nexport type KeyCodeValues = Map<'code' | 'ie-code', string>;\n\nexport type KeyCodeHashmap = Map<string, KeyCodeValues>;\n\nconst keyCodeRegistry: KeyCodeHashmap = new Map([\n  [\n    'arrow-left',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'ArrowLeft'],\n      [KeyCodeTypes.IE, 'Left'],\n    ]),\n  ],\n  [\n    'arrow-up',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'ArrowUp'],\n      [KeyCodeTypes.IE, 'Up'],\n    ]),\n  ],\n  [\n    'arrow-down',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'ArrowDown'],\n      [KeyCodeTypes.IE, 'Down'],\n    ]),\n  ],\n  [\n    'tab',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'Tab'],\n      [KeyCodeTypes.IE, 'Tab'],\n    ]),\n  ],\n  [\n    'enter',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'Enter'],\n      [KeyCodeTypes.IE, 'Enter'],\n    ]),\n  ],\n  [\n    'escape',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'Escape'],\n      [KeyCodeTypes.IE, 'Esc'],\n    ]),\n  ],\n  [\n    'space',\n    new Map([\n      [KeyCodeTypes.DEFAULT, ' '],\n      [KeyCodeTypes.IE, 'Spacebar'],\n    ]),\n  ],\n  [\n    'home',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'Home'],\n      [KeyCodeTypes.IE, 'Home'],\n    ]),\n  ],\n  [\n    'end',\n    new Map([\n      [KeyCodeTypes.DEFAULT, 'End'],\n      [KeyCodeTypes.IE, 'End'],\n    ]),\n  ],\n]);\n\n/**\n * KeyCodes is a static class that gives users the ability to lookup and even store\n * keycodes for their applications.\n *\n * @privateRemarks\n *\n * The key codes dictionary/hashmap is private to this module. There is no way to access it directly\n * outside of the module.\n *\n */\nexport class KeyCodeService {\n  /**\n   * keycodes() returns a clone of the key codes dictionary/hashmap, not the actual registry.\n   * Performing actions on the return value of the keycodes getter will not be reflected in the\n   * actual keycodes dictionary!\n   */\n  static get keycodes(): KeyCodeHashmap {\n    return deepClone(keyCodeRegistry);\n  }\n\n  static add(keycode: string, code: string, legacyCode?: string) {\n    const keycodeHashValueToStore = new Map([[KeyCodeTypes.DEFAULT, code]]);\n\n    if (legacyCode) {\n      keycodeHashValueToStore.set(KeyCodeTypes.IE, legacyCode);\n    }\n\n    keyCodeRegistry.set(keycode, keycodeHashValueToStore);\n  }\n\n  static has(keycode: string): boolean {\n    return keyCodeRegistry.has(keycode);\n  }\n\n  static getCode(keycode: string): string {\n    return getKeycodeFromRegistry(keycode, KeyCodeTypes.DEFAULT, this.keycodes);\n  }\n\n  static getIeCode(keycode: string): string {\n    return getKeycodeFromRegistry(keycode, KeyCodeTypes.IE, this.keycodes);\n  }\n}\n\nexport function getKeycodeFromRegistry(\n  codeToLookup: string,\n  whichCodeType: 'code' | 'ie-code' = KeyCodeTypes.DEFAULT,\n  registry = keyCodeRegistry\n): string {\n  return registry.get(codeToLookup)?.get(whichCodeType) || '';\n}\n"]}