/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { deepClone } from '../utils/identity.js';
const keyCodeRegistry = new Map([
    [
        'arrow-left',
        new Map([
            ["code" /* DEFAULT */, 'ArrowLeft'],
            ["ie-code" /* IE */, 'Left'],
        ]),
    ],
    [
        'arrow-up',
        new Map([
            ["code" /* DEFAULT */, 'ArrowUp'],
            ["ie-code" /* IE */, 'Up'],
        ]),
    ],
    [
        'arrow-down',
        new Map([
            ["code" /* DEFAULT */, 'ArrowDown'],
            ["ie-code" /* IE */, 'Down'],
        ]),
    ],
    [
        'tab',
        new Map([
            ["code" /* DEFAULT */, 'Tab'],
            ["ie-code" /* IE */, 'Tab'],
        ]),
    ],
    [
        'enter',
        new Map([
            ["code" /* DEFAULT */, 'Enter'],
            ["ie-code" /* IE */, 'Enter'],
        ]),
    ],
    [
        'escape',
        new Map([
            ["code" /* DEFAULT */, 'Escape'],
            ["ie-code" /* IE */, 'Esc'],
        ]),
    ],
    [
        'space',
        new Map([
            ["code" /* DEFAULT */, ' '],
            ["ie-code" /* IE */, 'Spacebar'],
        ]),
    ],
    [
        'home',
        new Map([
            ["code" /* DEFAULT */, 'Home'],
            ["ie-code" /* IE */, 'Home'],
        ]),
    ],
    [
        'end',
        new Map([
            ["code" /* DEFAULT */, 'End'],
            ["ie-code" /* IE */, 'End'],
        ]),
    ],
]);
/**
 * KeyCodes is a static class that gives users the ability to lookup and even store
 * keycodes for their applications.
 *
 * @privateRemarks
 *
 * The key codes dictionary/hashmap is private to this module. There is no way to access it directly
 * outside of the module.
 *
 */
export class KeyCodeService {
    /**
     * keycodes() returns a clone of the key codes dictionary/hashmap, not the actual registry.
     * Performing actions on the return value of the keycodes getter will not be reflected in the
     * actual keycodes dictionary!
     */
    static get keycodes() {
        return deepClone(keyCodeRegistry);
    }
    static add(keycode, code, legacyCode) {
        const keycodeHashValueToStore = new Map([["code" /* DEFAULT */, code]]);
        if (legacyCode) {
            keycodeHashValueToStore.set("ie-code" /* IE */, legacyCode);
        }
        keyCodeRegistry.set(keycode, keycodeHashValueToStore);
    }
    static has(keycode) {
        return keyCodeRegistry.has(keycode);
    }
    static getCode(keycode) {
        return getKeycodeFromRegistry(keycode, "code" /* DEFAULT */, this.keycodes);
    }
    static getIeCode(keycode) {
        return getKeycodeFromRegistry(keycode, "ie-code" /* IE */, this.keycodes);
    }
}
export function getKeycodeFromRegistry(codeToLookup, whichCodeType = "code" /* DEFAULT */, registry = keyCodeRegistry) {
    var _a;
    return ((_a = registry.get(codeToLookup)) === null || _a === void 0 ? void 0 : _a.get(whichCodeType)) || '';
}
//# sourceMappingURL=keycodes.service.js.map