{"version":3,"file":"focus-trap.base.js","sourceRoot":"","sources":["../../../../src/internal/base/focus-trap.base.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAEvE,MAAM,OAAO,gBAAiB,SAAQ,UAAU;IAAhD;;QAGE;;;;WAIG;QAC0B,WAAM,GAAG,KAAK,CAAC;QAGlC,eAAU,GAAG,KAAK,CAAC;IA8B/B,CAAC;IA5BC,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;SAClC;IACH,CAAC;IAED,oBAAoB;QAClB,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAE7B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;SAClC;IACH,CAAC;IAED,wBAAwB,CAAC,IAAY,EAAE,GAAW,EAAE,KAAa;QAC/D,KAAK,CAAC,wBAAwB,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAEjD,IAAI,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC1D,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;SACnG;IACH,CAAC;IAES,MAAM;QACd,OAAO,IAAI,CAAA,eAAe,CAAC;IAC7B,CAAC;CACF;AAjC8B;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;gDAAgB;AAG5C;IADC,gBAAgB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;oDACtB","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { html, LitElement } from 'lit-element';\nimport { FocusTrap } from '../utils/focus-trap.js';\nimport { internalProperty, property } from '../decorators/property.js';\n\nexport class CdsBaseFocusTrap extends LitElement {\n  protected focusTrap: FocusTrap;\n\n  /**\n   * Its recommended to remove or add a focus trap element from the DOM\n   * some SSR systems can have technical constraints where the item can\n   * only be removed via CSS/hidden.\n   */\n  @property({ type: Boolean }) hidden = false;\n\n  @internalProperty({ type: Boolean, reflect: true })\n  protected __demoMode = false;\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.__demoMode) {\n      this.focusTrap = new FocusTrap(this);\n      this.focusTrap.enableFocusTrap();\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    if (!this.__demoMode) {\n      this.focusTrap.removeFocusTrap();\n    }\n  }\n\n  attributeChangedCallback(name: string, old: string, value: string) {\n    super.attributeChangedCallback(name, old, value);\n\n    if (name === 'hidden' && old !== value && !this.__demoMode) {\n      this.hasAttribute('hidden') ? this.focusTrap.removeFocusTrap() : this.focusTrap.enableFocusTrap();\n    }\n  }\n\n  protected render() {\n    return html`<slot></slot>`;\n  }\n}\n"]}