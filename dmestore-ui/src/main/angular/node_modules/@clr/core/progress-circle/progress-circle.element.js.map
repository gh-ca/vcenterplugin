{"version":3,"file":"progress-circle.element.js","sourceRoot":"","sources":["../../../src/progress-circle/progress-circle.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n  baseStyles,\n  hasStringPropertyChanged,\n  property,\n  setAttributes,\n  StatusTypes,\n  updateEquilateralSizeStyles,\n  HTMLAttributeTuple,\n} from '@clr/core/internal';\nimport { html, LitElement } from 'lit-element';\nimport isNil from 'ramda/es/isNil';\nimport { styles } from './progress-circle.element.css.js';\n\n/**\n * Circular progress indicators provide a method to track how close long-running tasks are to\n * completion. Circular progress offer a compact way to track progress in a variety of situations.\n *\n * ```typescript\n * import '@clr/core/progress-circle/register.js';\n * ```\n *\n * ```html\n * <cds-progress-circle status=\"info\" value=\"25\"></cds-progress-circle>\n * ```\n * @beta\n * @element cds-progress-circle\n * @cssprop --ring-color\n * @cssprop --ring-opacity\n * @cssprop --fill-color\n */\nexport class CdsProgressCircle extends LitElement {\n  private _size: string;\n\n  /**\n   * @type {default | info | success | warning | danger | unknown}\n   * Sets the color of the badge\n   */\n  @property({ type: String })\n  status: StatusTypes | 'unknown' = 'default';\n\n  /**\n   * Inverts color of circular progress bar if `true`.\n   * Useful for displaying icons on a dark background.\n   */\n  @property({ type: Boolean })\n  inverse = false;\n\n  /**\n   * Represents the percent completed from 0 to 100.\n   *\n   * If undefined, the progress-circle will be represented as an indeterminate\n   * progress indicator â€“ a.k.a a \"spinner\".\n   */\n  @property({ type: Number })\n  value: number;\n\n  /**\n   * Represents the thickness of the stroke of the circular progress.\n   *\n   * If undefined, it defaults to 3.\n   */\n  @property({ type: Number })\n  line = 3;\n\n  private get radius() {\n    // 36 is the default viewbox dimensions; half of 36 is 18\n    // we need to keep this so that circular-progress remains aligned with our icons\n    // we shouldn't change it unless we change the default viewbox of the icons!\n    const halfOfViewbox = 18;\n\n    // line offset takes the width/thickness of the progress circle into account\n    const lineOffset = Math.ceil(this.line / 2);\n\n    return halfOfViewbox - lineOffset;\n  }\n\n  private get circumference() {\n    return 2 * Math.PI * this.radius;\n  }\n\n  /** @private */\n  get progress() {\n    const defaultProgress = 30;\n    return isNil(this.value) ? defaultProgress : this.value;\n  }\n\n  // Manages the progress fill.\n  private get progressOffset() {\n    const progressMax = 100;\n    return ((progressMax - this.progress) / progressMax) * this.circumference;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  /**\n   * @type {string | sm | md | lg | xl | xxl}\n   * Apply numerical width-height or a t-shirt-sized CSS classname\n   */\n  @property({ type: String })\n  set size(val: string) {\n    if (hasStringPropertyChanged(val, this._size)) {\n      const oldVal = this._size;\n      this._size = val;\n      updateEquilateralSizeStyles(this, val);\n      this.requestUpdate('size', oldVal);\n    }\n  }\n\n  private setAriaAttributes() {\n    const currentValue = this.value;\n    const ariaAttrs: HTMLAttributeTuple[] = [\n      ['role', 'progressbar'],\n      ['aria-valuemin', '0'],\n      ['aria-valuemax', '100'],\n      ['aria-valuenow', currentValue + ''],\n    ];\n\n    const attrsToSet: HTMLAttributeTuple[] = ariaAttrs.map(valTuple => {\n      // remove progressbar aria when value is nil; it's a spinner not a progressbar\n      return isNil(currentValue) ? ([valTuple[0], false] as HTMLAttributeTuple) : (valTuple as HTMLAttributeTuple);\n    });\n\n    setAttributes(this, ...attrsToSet);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAriaAttributes();\n  }\n\n  updated(props: Map<string, any>) {\n    super.updated(props);\n    if (props.has('value')) {\n      this.setAriaAttributes();\n    }\n  }\n\n  render() {\n    return html`\n      <div class=\"private-host\" aria-hidden=\"true\">\n        <div class=\"progress-wrapper\">\n          <svg\n            version=\"1.1\"\n            viewBox=\"0 0 36 36\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            focusable=\"false\"\n          >\n            <circle\n              stroke-width=\"${this.line}\"\n              fill=\"none\"\n              cx=\"18\"\n              cy=\"18\"\n              r=\"${this.radius}\"\n              class=\"${this.progress > 99 ? 'arcstroke' : 'backstroke'}\"\n            />\n            <path\n              d=\"M 18 18 m 0,-${this.radius} a ${this.radius},${this.radius} 0 1 1 0,${2 * this.radius} a ${this\n                .radius},${this.radius} 0 1 1 0,-${2 * this.radius}\"\n              class=\"fillstroke arcstroke\"\n              stroke-width=\"${this.line}\"\n              stroke-dasharray=\"${this.circumference}\"\n              stroke-dashoffset=\"${this.progressOffset}\"\n              fill=\"none\"\n            />\n          </svg>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n}\n"]}