{"version":3,"file":"inline-button.element.js","sourceRoot":"","sources":["../../../src/button/inline-button.element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAC9E,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EAAE,MAAM,EAAE,MAAM,gCAAgC,CAAC;AAExD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,OAAO,eAAgB,SAAQ,aAAa;IAChD,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,wFAAwF;QACxF,uFAAuF;QACvF,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;SAC3C;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;UAGL,IAAI,CAAC,oBAAoB;;KAE9B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { addClassnames, baseStyles, CdsBaseButton } from '@clr/core/internal';\nimport { html } from 'lit-element';\nimport { styles } from './inline-button.element.css.js';\n\n/**\n * Inline buttons are used inside and alongside textual content within Clarity components.\n * They give action buttons a less prominent, yet familiar, visual presence.\n *\n * ```typescript\n * import '@clr/core/button/register.js';\n * ```\n *\n * ```html\n * <cds-inline-button>Button text goes here</cds-inline-button>\n * ```\n * @beta\n * @element cds-inline-button\n * @slot - Content slot for inside the button\n * @cssprop --color\n * @cssprop --font-size\n * @cssprop --font-weight\n * @cssprop --letter-spacing\n * @cssprop --text-decoration\n */\nexport class CdsInlineButton extends CdsBaseButton {\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    // we need a class on the icon because that's how the icon element knows to style itself\n    // we can't style it from the icon-button anymore because it's a nested+slotted element\n    if (this.icon) {\n      addClassnames(this.icon, 'anchored-icon');\n    }\n  }\n\n  render() {\n    return html`\n      <span class=\"private-host\">\n        <slot></slot>\n        ${this.hiddenButtonTemplate}\n      </span>\n    `;\n  }\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n}\n"]}