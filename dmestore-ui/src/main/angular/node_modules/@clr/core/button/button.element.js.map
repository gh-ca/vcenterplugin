{"version":3,"file":"button.element.js","sourceRoot":"","sources":["../../../src/button/button.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n  assignSlotNames,\n  badgeSlot,\n  baseStyles,\n  CdsBaseButton,\n  getElementWidth,\n  iconSpinner,\n  iconSpinnerCheck,\n  iconSlot,\n  property,\n} from '@clr/core/internal';\nimport { ClarityIcons } from '@clr/core/icon/icon.service.js';\nimport { errorStandardIcon } from '@clr/core/icon/shapes/error-standard.js';\nimport { html, query } from 'lit-element';\nimport { styles as baseButtonStyles } from './base-button.element.css.js';\nimport { styles } from './button.element.css.js';\n\n// TODO: when we migrate away from the base64 icons in other states, we will need to either move the consts\n// into this file or move the base button here. pulling cds-icons into core/internal creates a circular dependency\nconst iconSpinnerError = html`<span class=\"button-status-icon\" cds-layout=\"horizontal align:center\"\n  ><cds-icon shape=\"error-standard\" cds-layout=\"align:center\"></cds-icon\n></span>`;\n\nexport enum ClrLoadingState {\n  DEFAULT = 'default',\n  LOADING = 'loading',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\nfunction buttonSlots(icon: boolean, badge: boolean) {\n  // nested span tags allow for line-height erasers on the innermost span and flex-based centering on the outermost span\n  const textSlot = html`<span class=\"button-content\"\n    ><span><slot></slot></span\n  ></span>`;\n  const slotWithIcon = html`${iconSlot}${textSlot}`;\n  const slotWithBadge = html`${textSlot}${badgeSlot}`;\n  const slotWithContentAndBadge = html`${iconSlot}${textSlot}${badgeSlot}`;\n\n  switch (true) {\n    case icon === true && badge === true:\n      return html`${slotWithContentAndBadge}`;\n    case icon === true:\n      return html`${slotWithIcon}`;\n    case badge === true:\n      return html`${slotWithBadge}`;\n    default:\n      return html`${textSlot}`;\n  }\n}\n\n/**\n * Buttons allow an application to communicate action and direct user intent.\n *\n * ```typescript\n * import '@clr/core/button/register.js';\n * ```\n *\n * ```html\n * <cds-button>submit</cds-button>\n * ```\n *\n * @beta\n * @element cds-button\n * @slot - Content slot for inside the button\n * @cssprop --background\n * @cssprop --border-color\n * @cssprop --border-radius\n * @cssprop --border-width\n * @cssprop --box-shadow-color\n * @cssprop --color\n * @cssprop --font-family\n * @cssprop --font-size\n * @cssprop --font-weight\n * @cssprop --height\n * @cssprop --letter-spacing\n * @cssprop --min-width\n * @cssprop --padding\n * @cssprop --text-decoration\n * @cssprop --text-transform\n */\nexport class CdsButton extends CdsBaseButton {\n  /**\n   * Define the type of action the button triggers\n   *\n   * - `solid`: buttons direct the userâ€™s attention to the primary action the application is suggesting that the user take.\n   * - `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n   * - `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.\n   */\n  @property({ type: String })\n  action: 'solid' | 'outline' | 'flat' = 'solid';\n\n  /**\n   * Sets the color of the button to match the following string statuses\n   */\n  @property({ type: String })\n  status: 'primary' | 'success' | 'danger' | 'inverse' = 'primary';\n\n  /**\n   * Sets the overall height and width of the button based on the following string values:\n   */\n  @property({ type: String })\n  size: 'sm' | 'md' = 'md';\n\n  /** Sets if the button should be full width with display block */\n  @property({ type: Boolean })\n  block = false;\n\n  @query('.private-host') privateHost: HTMLElement;\n\n  /**\n   * @type {default | loading | success | error}\n   * Changes the button content based on the value passed.\n   *\n   * - `default`: shows the content of the button\n   * - `loading`: disables the button and shows a spinner inside the button\n   * - `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n   * - `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)\n   */\n  @property({ type: String })\n  loadingState = ClrLoadingState.DEFAULT;\n\n  constructor() {\n    super();\n    ClarityIcons.addIcons(errorStandardIcon);\n  }\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n\n    if (this.loadingState !== ClrLoadingState.DEFAULT) {\n      this.updateLoadingState();\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    assignSlotNames([this.icon, 'button-icon'], [this.badge, 'button-badge']);\n  }\n\n  update(props: Map<string, any>) {\n    if (this.privateHost && props.has('loadingState')) {\n      this.updateLoadingState();\n    }\n    super.update(props);\n  }\n\n  render() {\n    const loadingState = this.loadingState;\n    const hasIcon = !!this.icon;\n    const hasBadge = !!this.badge;\n\n    return html`<div class=\"private-host\" cds-layout=\"horizontal wrap:none\">\n      ${loadingState === ClrLoadingState.SUCCESS ? html`${iconSpinnerCheck}` : ''}${loadingState ===\n      ClrLoadingState.ERROR\n        ? html`${iconSpinnerError}`\n        : ''}${loadingState === ClrLoadingState.LOADING ? html`${iconSpinner}` : ''}${loadingState ===\n      ClrLoadingState.DEFAULT\n        ? html`${buttonSlots(hasIcon, hasBadge)}`\n        : ''}${this.hiddenButtonTemplate}\n    </div>`;\n  }\n\n  static get styles() {\n    return [baseStyles, baseButtonStyles, styles];\n  }\n\n  private updateLoadingState() {\n    switch (this.loadingState) {\n      case ClrLoadingState.LOADING:\n        this.disableButton();\n        return;\n      case ClrLoadingState.SUCCESS:\n        this.disableButton();\n        return;\n      case ClrLoadingState.ERROR:\n        this.disableButton();\n        return;\n      default:\n        this.enableButton();\n    }\n  }\n\n  private disableButton() {\n    this.style.width = getElementWidth(this);\n    this.disabled = true;\n  }\n\n  private enableButton() {\n    this.loadingState = ClrLoadingState.DEFAULT;\n    this.style.removeProperty('width');\n    this.disabled = false;\n  }\n}\n"]}