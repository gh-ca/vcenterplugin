{"version":3,"file":"icon-button.element.js","sourceRoot":"","sources":["../../../src/button/icon-button.element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AACpH,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EAAE,MAAM,IAAI,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEjE;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,OAAO,aAAc,SAAQ,SAAS;IAW1C,iBAAiB;QACf,kFAAkF;QAClF,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,mEAAmE;YACnE,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;YAElE,wFAAwF;YACxF,uFAAuF;YACvF,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;aAC1C;SACF;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;UAEL,IAAI,CAAC,YAAY,KAAK,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;UAChE,IAAI,CAAC,YAAY,KAAK,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;UACrE,IAAI,CAAC,YAAY,KAAK,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,oBAAoB;;KAE/F,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,UAAU,EAAE,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAChD,CAAC;CACF;AA9BC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;gDAC9B","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { assignSlotNames, baseStyles, iconSlot, iconSpinner, iconSpinnerCheck, property } from '@clr/core/internal';\nimport { html } from 'lit-element';\nimport { styles as baseButtonStyles } from './base-button.element.css.js';\nimport { styles } from './icon-button.element.css.js';\nimport { CdsButton, ClrLoadingState } from './button.element.js';\n\n/**\n * Icon buttons give applications a compact alternative to communicate action and direct user intent.\n *\n * ```typescript\n * import '@clr/core/button/register.js';\n * ```\n *\n * ```html\n * <cds-icon-button><cds-icon shape=\"download\"></cds-icon></cds-icon-button>\n * ```\n * @beta\n * @element cds-icon-button\n * @slot - Content slot for inside the button\n * @cssprop --background\n * @cssprop --border-color\n * @cssprop --border-radius\n * @cssprop --border-width\n * @cssprop --box-shadow-color\n * @cssprop --color\n * @cssprop --font-size\n * @cssprop --height\n * @cssprop --padding\n */\nexport class CdsIconButton extends CdsButton {\n  /**\n   * The aria-label attribute is required for accessibility. The cds-icon-button\n   * will warn if used without the aria-label being set.\n   *\n   * Ideally, the aria-label will be specific to the button's purpose. Avoid sharing\n   * generic labels across multiple icon buttons on a page.\n   */\n  @property({ type: String, required: 'warning' })\n  ariaLabel: string;\n\n  connectedCallback() {\n    // have to override default behavior when an anchor is passed into the icon button\n    super.connectedCallback();\n    if (this.anchor) {\n      // removes slot designation from icon and adds it to the anchor tag\n      assignSlotNames([this.icon, false], [this.anchor, 'button-icon']);\n\n      // we need a class on the icon because that's how the icon element knows to style itself\n      // we can't style it from the icon-button anymore because it's a nested+slotted element\n      if (this.icon) {\n        this.icon.classList.add('anchored-icon');\n      }\n    }\n  }\n\n  render() {\n    return html`\n      <div class=\"private-host\">\n        ${this.loadingState === ClrLoadingState.LOADING ? iconSpinner : ''}\n        ${this.loadingState === ClrLoadingState.SUCCESS ? iconSpinnerCheck : ''}\n        ${this.loadingState === ClrLoadingState.DEFAULT ? iconSlot : ''} ${this.hiddenButtonTemplate}\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return [baseStyles, baseButtonStyles, styles];\n  }\n}\n"]}