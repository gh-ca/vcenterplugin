{"version":3,"file":"test-dropdown.element.js","sourceRoot":"","sources":["../../../src/test-dropdown/test-dropdown.element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,UAAU,EAAE,oBAAoB,EAAE,KAAK,EAAgB,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AACrG,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAE/C,OAAO,EAAE,MAAM,EAAE,MAAM,gCAAgC,CAAC;AAExD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,OAAO,eAAgB,SAAQ,UAAU;IAA/C;;QAGU,UAAK,GAAG,KAAK,CAAC;QAiBtB,mCAAmC;QAEnC,UAAK,GAAG,UAAU,CAAC;IAwBrB,CAAC;IAzCC,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,6CAA6C;IAE7C,IAAI,IAAI,CAAC,KAAK;QACZ,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;YACxB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;IACH,CAAC;IAMD,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;0BAEW,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,IAAI,CAAC,KAAK;UAC9D,IAAI,CAAC,IAAI;YACT,CAAC,CAAC,IAAI,CAAA;gBACA,oBAAoB,CAAC,IAAI,CAAC,IAAI;;mBAE3B;YACT,CAAC,CAAC,EAAE;;KAET,CAAC;IACJ,CAAC;IAED,oDAAoD;IACpD,MAAM;QACJ,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;IACzB,CAAC;CACF;AA7CU;IAAR,KAAK,EAAE;mDAA2C;AAUnD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;2CAQ3B;AAID;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;8CACR","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { baseStyles, CommonStringsService, event, EventEmitter, property } from '@clr/core/internal';\nimport { html, LitElement } from 'lit-element';\n\nimport { styles } from './test-dropdown.element.css.js';\n\n/**\n * Dropdown, example test component. Do not use in production.\n *\n * ```typescript\n * import '@clr/core/test-dropdown';\n * ```\n *\n * ```html\n * <cds-test-dropdown title=\"click me!\">\n *   Hello World\n * </cds-test-dropdown>\n * ```\n *\n * @beta\n * @slot - Content slot for dropdown content\n * @event {boolean} openChange - notify open state change of dropdown\n * @cssprop --border-color\n * @cssprop --background-color\n * @cssprop --text-color\n */\nexport class CdsTestDropdown extends LitElement {\n  @event() private openChange: EventEmitter<boolean>;\n\n  private _open = false;\n\n  get open() {\n    return this._open;\n  }\n\n  /** Set open to open or close the dropdown */\n  @property({ type: Boolean })\n  set open(value) {\n    if (value !== this._open) {\n      const old = this._open;\n      this._open = value;\n      this.requestUpdate('open', old);\n      this.openChange.emit(this.open);\n    }\n  }\n\n  /** Set the dropdown button text */\n  @property({ type: String })\n  title = 'dropdown';\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  render() {\n    return html`\n      <div class=\"dropdown\">\n        <button @click=\"${() => this.toggle()}\" class=\"btn\">${this.title}</button>\n        ${this.open\n          ? html` <div>\n              ${CommonStringsService.keys.open}\n              <slot></slot>\n            </div>`\n          : ''}\n      </div>\n    `;\n  }\n\n  /** Toggle the current open state of the dropdown */\n  toggle() {\n    this.open = !this.open;\n  }\n}\n"]}