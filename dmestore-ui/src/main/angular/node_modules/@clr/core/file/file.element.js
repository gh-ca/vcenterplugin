/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { html, internalProperty } from 'lit-element';
import { CommonStringsService } from '@clr/core/internal';
import { CdsControl } from '@clr/core/forms';
import { ClarityIcons } from '@clr/core/icon/icon.service.js';
import { folderIcon } from '@clr/core/icon/shapes/folder.js';
import { styles } from './file.element.css.js';
/**
 * Time Input
 *
 * ```typescript
 * import '@clr/core/file/register.js';
 * ```
 *
 * ```html
 * <cds-file>
 *   <label>file</label>
 *   <input type="file" />
 * </cds-file>
 * ```
 *
 * @element cds-file
 * @slot - For projecting file input and label
 */
export class CdsFile extends CdsControl {
    constructor() {
        super();
        this.buttonLabel = CommonStringsService.keys.browse;
        this.fixedControlWidth = true;
        this.supportsPrefixSuffixActions = false;
        ClarityIcons.addIcons(folderIcon);
    }
    static get styles() {
        return [...super.styles, styles];
    }
    get inputTemplate() {
        return html `
      <div>
        <cds-button size="sm" action="outline" @click="${() => this.label.click()}" ?disabled=${this.disabled}>
          <cds-icon shape="folder" aria-hidden="true"></cds-icon>
          ${this.buttonLabel}
        </cds-button>
        ${this.clearFiles}
      </div>
    `;
    }
    get clearFiles() {
        var _a;
        return ((_a = this.inputControl.files) === null || _a === void 0 ? void 0 : _a.length) ? html ` <cds-control-action
          @click="${() => this.updateLabel()}"
          aria-label="${CommonStringsService.keys.removeFile}"
        >
          <cds-icon shape="times"></cds-icon>
        </cds-control-action>`
            : html ``;
    }
    firstUpdated(props) {
        super.firstUpdated(props);
        this.inputControl.addEventListener('change', e => this.updateLabel(e.target.files));
    }
    updateLabel(files) {
        if (files && files.length) {
            this.buttonLabel = files.length > 1 ? `${files.length} ${CommonStringsService.keys.files}` : files[0].name;
        }
        else {
            this.buttonLabel = CommonStringsService.keys.browse;
            this.inputControl.value = '';
        }
    }
}
__decorate([
    internalProperty()
], CdsFile.prototype, "buttonLabel", void 0);
__decorate([
    internalProperty()
], CdsFile.prototype, "fixedControlWidth", void 0);
__decorate([
    internalProperty()
], CdsFile.prototype, "supportsPrefixSuffixActions", void 0);
//# sourceMappingURL=file.element.js.map