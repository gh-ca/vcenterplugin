{"version":3,"file":"date-navigation.service.d.ts","sources":["date-navigation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { CalendarModel } from '../model/calendar.model';\nimport { DayModel } from '../model/day.model';\n/**\n * This service is responsible for:\n * 1. Initializing the displayed calendar.\n * 2. Moving the calendar to the next, previous or current months\n * 3. Managing the focused and selected day models.\n */\nexport declare class DateNavigationService {\n    private _displayedCalendar;\n    get displayedCalendar(): CalendarModel;\n    private setDisplayedCalendar;\n    /**\n     * Variable to store today's date.\n     */\n    private _todaysFullDate;\n    private _today;\n    private initializeTodaysDate;\n    get today(): DayModel;\n    selectedDay: DayModel;\n    private _selectedDayChange;\n    get selectedDayChange(): Observable<DayModel>;\n    /**\n     * Notifies that the selected day has changed so that the date can be emitted to the user.\n     * Note: Only to be called from day.ts\n     */\n    notifySelectedDayChanged(dayModel: DayModel): void;\n    focusedDay: DayModel;\n    /**\n     * Initializes the calendar based on the selected day.\n     */\n    initializeCalendar(): void;\n    changeMonth(month: number): void;\n    changeYear(year: number): void;\n    /**\n     * Moves the displayed calendar to the next month.\n     */\n    moveToNextMonth(): void;\n    /**\n     * Moves the displayed calendar to the previous month.\n     */\n    moveToPreviousMonth(): void;\n    /**\n     * Moves the displayed calendar to the current month and year.\n     */\n    moveToCurrentMonth(): void;\n    incrementFocusDay(value: number): void;\n    private _displayedCalendarChange;\n    /**\n     * This observable lets the subscriber know that the displayed calendar has changed.\n     */\n    get displayedCalendarChange(): Observable<void>;\n    private _focusOnCalendarChange;\n    /**\n     * This observable lets the subscriber know that the focus should be applied on the calendar.\n     */\n    get focusOnCalendarChange(): Observable<void>;\n    private _focusedDayChange;\n    /**\n     * This observable lets the subscriber know that the focused day in the displayed calendar has changed.\n     */\n    get focusedDayChange(): Observable<DayModel>;\n}\n"]}