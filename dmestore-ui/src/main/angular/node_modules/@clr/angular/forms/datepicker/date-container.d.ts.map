{"version":3,"file":"date-container.d.ts","sources":["date-container.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, AfterViewInit, ElementRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlClassService } from '../common/providers/control-class.service';\nimport { FocusService } from '../common/providers/focus.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { ClrLabel } from '../common/label';\nimport { DateFormControlService } from './providers/date-form-control.service';\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { DatepickerEnabledService } from './providers/datepicker-enabled.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';\nimport { ViewManagerService } from './providers/view-manager.service';\nimport { IfControlStateService, CONTROL_STATE } from '../common/if-control-state/if-control-state.service';\nimport { ClrControlSuccess } from '../common/success';\nexport declare class ClrDateContainer implements DynamicWrapper, OnDestroy, AfterViewInit {\n    private toggleService;\n    private dateNavigationService;\n    private datepickerEnabledService;\n    private dateFormControlService;\n    commonStrings: ClrCommonStringsService;\n    private focusService;\n    private viewManagerService;\n    private controlClassService;\n    private layoutService;\n    private ngControlService;\n    private ifControlStateService;\n    _dynamic: boolean;\n    showInvalid: boolean;\n    showHelper: boolean;\n    focus: boolean;\n    showValid: boolean;\n    state: CONTROL_STATE;\n    control: NgControl;\n    label: ClrLabel;\n    controlSuccessComponent: ClrControlSuccess;\n    set clrPosition(position: string);\n    get popoverPosition(): ClrPopoverPosition;\n    get open(): boolean;\n    private toggleButton;\n    set actionButton(button: ElementRef);\n    private subscriptions;\n    constructor(toggleService: ClrPopoverToggleService, dateNavigationService: DateNavigationService, datepickerEnabledService: DatepickerEnabledService, dateFormControlService: DateFormControlService, commonStrings: ClrCommonStringsService, focusService: FocusService, viewManagerService: ViewManagerService, controlClassService: ControlClassService, layoutService: LayoutService, ngControlService: NgControlService, ifControlStateService: IfControlStateService);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * Returns the classes to apply to the control\n     */\n    controlClass(): string;\n    /**\n     * Determines if the control needs to add grid classes\n     */\n    addGrid(): boolean;\n    /**\n     * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.\n     */\n    get isEnabled(): boolean;\n    /**\n     * Return if Datepicker is diabled or not as Form Control\n     */\n    get isInputDateDisabled(): boolean;\n    /**\n     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.\n     */\n    private initializeCalendar;\n    /**\n     * Unsubscribe from subscriptions.\n     */\n    ngOnDestroy(): void;\n}\n"]}