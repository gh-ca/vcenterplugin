{"version":3,"file":"yearpicker.d.ts","sources":["yearpicker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef } from '@angular/core';\nimport { YearRangeModel } from './model/year-range.model';\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { DatepickerFocusService } from './providers/datepicker-focus.service';\nimport { ViewManagerService } from './providers/view-manager.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nexport declare class ClrYearpicker implements AfterViewInit {\n    private _dateNavigationService;\n    private _viewManagerService;\n    private _datepickerFocusService;\n    private _elRef;\n    commonStrings: ClrCommonStringsService;\n    constructor(_dateNavigationService: DateNavigationService, _viewManagerService: ViewManagerService, _datepickerFocusService: DatepickerFocusService, _elRef: ElementRef, commonStrings: ClrCommonStringsService);\n    private decadeRange;\n    /**\n     * YearRangeModel which is used to build the YearPicker view.\n     */\n    yearRangeModel: YearRangeModel;\n    /**\n     * Keeps track of the current focused year.\n     */\n    private _focusedYear;\n    /**\n     * Gets the year which the user is currently on.\n     */\n    get calendarYear(): number;\n    /**\n     * Increments the focus year by the value passed. Updates the YearRangeModel if the\n     * new value is not in the current decade.\n     */\n    private incrementFocusYearBy;\n    /**\n     * Calls the DateNavigationService to update the year value of the calendar.\n     * Also changes the view to the daypicker.\n     */\n    changeYear(year: number): void;\n    /**\n     * Updates the YearRangeModel to the previous decade.\n     */\n    previousDecade(): void;\n    /**\n     * Updates the YearRangeModel to the current decade.\n     */\n    currentDecade(): void;\n    /**\n     * Updates the YearRangeModel to the next decade.\n     */\n    nextDecade(): void;\n    /**\n     * Compares the year passed to the focused year and returns the tab index.\n     */\n    getTabIndex(year: number): number;\n    /**\n     * Handles the Keyboard arrow navigation for the yearpicker.\n     */\n    onKeyDown(event: KeyboardEvent): void;\n    private updateRange;\n    /**\n     * Focuses on the current calendar year when the View is initialized.\n     */\n    ngAfterViewInit(): void;\n}\n"]}