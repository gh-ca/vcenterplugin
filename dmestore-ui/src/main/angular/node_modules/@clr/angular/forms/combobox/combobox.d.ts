/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ElementRef, Renderer2, ViewContainerRef, Injector, EventEmitter, AfterContentInit } from '@angular/core';
import { Observable } from 'rxjs';
import { OptionSelectionService } from './providers/option-selection.service';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrComboboxContainer } from './combobox-container';
import { NgControl, ControlValueAccessor } from '@angular/forms';
import { ClrOptionSelected } from './option-selected.directive';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { AriaService } from '../../utils/aria/aria.service';
import { ComboboxFocusHandler } from './providers/combobox-focus-handler.service';
import { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ComboboxContainerService } from './providers/combobox-container.service';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ClrLoadingState } from '../../utils/loading/loading';
import { ComboboxModel } from './model/combobox.model';
import { IfControlStateService } from '../common/if-control-state/if-control-state.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrCombobox<T> extends WrappedFormControl<ClrComboboxContainer> implements ControlValueAccessor, LoadingListener, AfterContentInit {
    control: NgControl;
    protected renderer: Renderer2;
    protected el: ElementRef;
    optionSelectionService: OptionSelectionService<T>;
    commonStrings: ClrCommonStringsService;
    private toggleService;
    private positionService;
    private controlStateService;
    private containerService;
    private platformId;
    private ariaService;
    private focusHandler;
    textbox: ElementRef;
    trigger: ElementRef;
    optionSelected: ClrOptionSelected<T>;
    private onChangeCallback;
    protected index: number;
    invalid: boolean;
    focused: boolean;
    constructor(vcr: ViewContainerRef, injector: Injector, control: NgControl, renderer: Renderer2, el: ElementRef, optionSelectionService: OptionSelectionService<T>, commonStrings: ClrCommonStringsService, toggleService: ClrPopoverToggleService, positionService: ClrPopoverPositionService, controlStateService: IfControlStateService, containerService: ComboboxContainerService, platformId: any, ariaService: AriaService, focusHandler: ComboboxFocusHandler<T>);
    focusedPill: any;
    get id(): string;
    inputId(): string;
    get openState(): boolean;
    private _searchText;
    set searchText(text: string);
    get searchText(): string;
    smartPosition: ClrPopoverPosition;
    loadingStateChange(state: ClrLoadingState): void;
    private get disabled();
    unselect(item: T): void;
    set multiSelect(value: boolean);
    get multiSelect(): boolean;
    get ariaControls(): string;
    get ariaOwns(): string;
    get ariaDescribedBySelection(): string;
    get displayField(): string;
    onBlur(): void;
    onFocus(): void;
    getSelectionAriaLabel(): string;
    onKeyUp(event: KeyboardEvent): void;
    clrInputChange: EventEmitter<string>;
    clrOpenChange: Observable<boolean>;
    clrSelectionChange: Observable<ComboboxModel<T>>;
    private initializeSubscriptions;
    focusFirstActive(): void;
    private updateInputValue;
    private updateControlValue;
    writeValue(value: T | T[]): void;
    registerOnChange(onChange: any): void;
    getActiveDescendant(): string;
    private onTouchedCallback;
    registerOnTouched(onTouched: any): void;
    setDisabledState(): void;
    focusInput(): void;
    private getDisplayNames;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrCombobox<any>, [null, null, { optional: true; self: true; }, null, null, null, null, null, null, { optional: true; }, { optional: true; }, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrCombobox<any>, "clr-combobox", never, { "multiSelect": "clrMulti"; }, { "clrInputChange": "clrInputChange"; "clrOpenChange": "clrOpenChange"; "clrSelectionChange": "clrSelectionChange"; }, ["optionSelected"], ["*"]>;
}

//# sourceMappingURL=combobox.d.ts.map