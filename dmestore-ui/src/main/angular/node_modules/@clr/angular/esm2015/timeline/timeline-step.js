/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, ElementRef, Inject, Input, PLATFORM_ID } from '@angular/core';
import { ClrTimelineStepState } from './enums/timeline-step-state.enum';
import { TimelineIconAttributeService } from './providers/timeline-icon-attribute.service';
import { ClrTimelineStepTitle } from './timeline-step-title';
import { isPlatformBrowser } from '@angular/common';
export class ClrTimelineStep {
    constructor(iconAttributeService, platformId) {
        this.iconAttributeService = iconAttributeService;
        this.platformId = platformId;
        this.state = ClrTimelineStepState.NOT_STARTED;
    }
    ngAfterContentInit() {
        if (this.stepTitle && isPlatformBrowser(this.platformId)) {
            this.stepTitleText = this.stepTitle.nativeElement.innerText;
        }
    }
    get iconAriaCurrent() {
        return this.state === ClrTimelineStepState.CURRENT;
    }
    get iconAriaLabel() {
        return this.iconAttributeService.getAriaLabel(this.state);
    }
    get iconShape() {
        return this.iconAttributeService.getIconShape(this.state);
    }
    get isProcessing() {
        return this.state === ClrTimelineStepState.PROCESSING;
    }
}
ClrTimelineStep.ctorParameters = () => [
    { type: TimelineIconAttributeService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ClrTimelineStep.decorators = [
    { type: Component, args: [{
                selector: 'clr-timeline-step',
                template: `
    <ng-content select="clr-timeline-step-header"></ng-content>
    <span class="clr-sr-only">{{ stepTitleText }}</span>
    <ng-container *ngIf="!isProcessing; else processing">
      <clr-icon [attr.shape]="iconShape" [attr.aria-label]="iconAriaLabel" [attr.aria-current]="iconAriaCurrent">
      </clr-icon>
    </ng-container>
    <div class="clr-timeline-step-body">
      <ng-content select="clr-timeline-step-title"></ng-content>
      <ng-content select="clr-timeline-step-description"></ng-content>
    </div>

    <ng-template #processing>
      <clr-spinner clrMedium [attr.aria-label]="iconAriaLabel"></clr-spinner>
    </ng-template>
  `,
                host: { '[class.clr-timeline-step]': 'true' }
            },] }
];
ClrTimelineStep.ctorParameters = () => [
    { type: TimelineIconAttributeService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ClrTimelineStep.propDecorators = {
    state: [{ type: Input, args: ['clrState',] }],
    stepTitle: [{ type: ContentChild, args: [ClrTimelineStepTitle, { read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtc3RlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL3RpbWVsaW5lL3RpbWVsaW5lLXN0ZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVoRyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUMzRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQXNCcEQsTUFBTSxPQUFPLGVBQWU7SUFPMUIsWUFDVSxvQkFBa0QsRUFDN0IsVUFBZTtRQURwQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQThCO1FBQzdCLGVBQVUsR0FBVixVQUFVLENBQUs7UUFSM0IsVUFBSyxHQUF5QixvQkFBb0IsQ0FBQyxXQUFXLENBQUM7SUFTL0UsQ0FBQztJQUVKLGtCQUFrQjtRQUNoQixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3hELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQzdEO0lBQ0gsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssb0JBQW9CLENBQUMsT0FBTyxDQUFDO0lBQ3JELENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssb0JBQW9CLENBQUMsVUFBVSxDQUFDO0lBQ3hELENBQUM7OztZQXhCK0IsNEJBQTRCOzRDQUN6RCxNQUFNLFNBQUMsV0FBVzs7O1lBN0J0QixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7R0FlVDtnQkFDRCxJQUFJLEVBQUUsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLEVBQUU7YUFDOUM7OztZQXZCUSw0QkFBNEI7NENBaUNoQyxNQUFNLFNBQUMsV0FBVzs7O29CQVJwQixLQUFLLFNBQUMsVUFBVTt3QkFHaEIsWUFBWSxTQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENsclRpbWVsaW5lU3RlcFN0YXRlIH0gZnJvbSAnLi9lbnVtcy90aW1lbGluZS1zdGVwLXN0YXRlLmVudW0nO1xuaW1wb3J0IHsgVGltZWxpbmVJY29uQXR0cmlidXRlU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3RpbWVsaW5lLWljb24tYXR0cmlidXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyVGltZWxpbmVTdGVwVGl0bGUgfSBmcm9tICcuL3RpbWVsaW5lLXN0ZXAtdGl0bGUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItdGltZWxpbmUtc3RlcCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiY2xyLXRpbWVsaW5lLXN0ZXAtaGVhZGVyXCI+PC9uZy1jb250ZW50PlxuICAgIDxzcGFuIGNsYXNzPVwiY2xyLXNyLW9ubHlcIj57eyBzdGVwVGl0bGVUZXh0IH19PC9zcGFuPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXNQcm9jZXNzaW5nOyBlbHNlIHByb2Nlc3NpbmdcIj5cbiAgICAgIDxjbHItaWNvbiBbYXR0ci5zaGFwZV09XCJpY29uU2hhcGVcIiBbYXR0ci5hcmlhLWxhYmVsXT1cImljb25BcmlhTGFiZWxcIiBbYXR0ci5hcmlhLWN1cnJlbnRdPVwiaWNvbkFyaWFDdXJyZW50XCI+XG4gICAgICA8L2Nsci1pY29uPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxkaXYgY2xhc3M9XCJjbHItdGltZWxpbmUtc3RlcC1ib2R5XCI+XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJjbHItdGltZWxpbmUtc3RlcC10aXRsZVwiPjwvbmctY29udGVudD5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImNsci10aW1lbGluZS1zdGVwLWRlc2NyaXB0aW9uXCI+PC9uZy1jb250ZW50PlxuICAgIDwvZGl2PlxuXG4gICAgPG5nLXRlbXBsYXRlICNwcm9jZXNzaW5nPlxuICAgICAgPGNsci1zcGlubmVyIGNsck1lZGl1bSBbYXR0ci5hcmlhLWxhYmVsXT1cImljb25BcmlhTGFiZWxcIj48L2Nsci1zcGlubmVyPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIGAsXG4gIGhvc3Q6IHsgJ1tjbGFzcy5jbHItdGltZWxpbmUtc3RlcF0nOiAndHJ1ZScgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyVGltZWxpbmVTdGVwIHtcbiAgQElucHV0KCdjbHJTdGF0ZScpIHN0YXRlOiBDbHJUaW1lbGluZVN0ZXBTdGF0ZSA9IENsclRpbWVsaW5lU3RlcFN0YXRlLk5PVF9TVEFSVEVEO1xuXG4gIHB1YmxpYyBzdGVwVGl0bGVUZXh0OiBzdHJpbmc7XG4gIEBDb250ZW50Q2hpbGQoQ2xyVGltZWxpbmVTdGVwVGl0bGUsIHsgcmVhZDogRWxlbWVudFJlZiB9KVxuICBzdGVwVGl0bGU6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpY29uQXR0cmlidXRlU2VydmljZTogVGltZWxpbmVJY29uQXR0cmlidXRlU2VydmljZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueVxuICApIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLnN0ZXBUaXRsZSAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLnN0ZXBUaXRsZVRleHQgPSB0aGlzLnN0ZXBUaXRsZS5uYXRpdmVFbGVtZW50LmlubmVyVGV4dDtcbiAgICB9XG4gIH1cblxuICBnZXQgaWNvbkFyaWFDdXJyZW50KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDbHJUaW1lbGluZVN0ZXBTdGF0ZS5DVVJSRU5UO1xuICB9XG5cbiAgZ2V0IGljb25BcmlhTGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pY29uQXR0cmlidXRlU2VydmljZS5nZXRBcmlhTGFiZWwodGhpcy5zdGF0ZSk7XG4gIH1cblxuICBnZXQgaWNvblNoYXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaWNvbkF0dHJpYnV0ZVNlcnZpY2UuZ2V0SWNvblNoYXBlKHRoaXMuc3RhdGUpO1xuICB9XG5cbiAgZ2V0IGlzUHJvY2Vzc2luZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ2xyVGltZWxpbmVTdGVwU3RhdGUuUFJPQ0VTU0lORztcbiAgfVxufVxuIl19