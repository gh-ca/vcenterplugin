/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { AccordionStrategy } from '../enums/accordion-strategy.enum';
import { AccordionStatus } from '../enums/accordion-status.enum';
let accordionCount = 0;
export class AccordionPanelModel {
    constructor(id, accordionId) {
        this.id = id;
        this.accordionId = accordionId;
        this.status = AccordionStatus.Inactive;
        this.index = null;
        this.disabled = false;
        this.open = false;
        this.templateId = `${this.id}-${this.accordionId}`;
    }
}
export class AccordionModel {
    constructor() {
        this.strategy = AccordionStrategy.Default;
        this.accordionCount = accordionCount++;
        this._panels = {};
    }
    get panels() {
        return Object.keys(this._panels).map(id => this._panels[id]);
    }
    setStrategy(strategy) {
        this.strategy = strategy;
    }
    updatePanelOrder(ids) {
        ids.forEach((id, index) => (this._panels[id].index = index));
        this.removeOldPanels(ids);
    }
    addPanel(id, open = false) {
        this._panels[id] = new AccordionPanelModel(id, this.accordionCount);
        this._panels[id].open = open;
    }
    togglePanel(panelId, open) {
        const panelIsOpen = this._panels[panelId].open;
        if (this.strategy === AccordionStrategy.Default) {
            this.closeAllPanels();
        }
        this._panels[panelId].open = open !== undefined ? open : !panelIsOpen;
    }
    disablePanel(panelId, disabled) {
        this._panels[panelId].disabled = disabled;
    }
    closeAllPanels() {
        this.panels.forEach(panel => (this._panels[panel.id].open = false));
    }
    removeOldPanels(ids) {
        this.panels
            .filter(panel => ids.find(id => id === panel.id) === undefined)
            .forEach(panel => delete this._panels[panel.id]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhci9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvYWNjb3JkaW9uL21vZGVscy9hY2NvcmRpb24ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFFdkIsTUFBTSxPQUFPLG1CQUFtQjtJQU05QixZQUFtQixFQUFVLEVBQVMsV0FBNEI7UUFBL0MsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUFTLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUxsRSxXQUFNLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxVQUFLLEdBQVcsSUFBSSxDQUFDO1FBQ3JCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUNiLGVBQVUsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3VCLENBQUM7Q0FDdkU7QUFFRCxNQUFNLE9BQU8sY0FBYztJQUEzQjtRQUNZLGFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7UUFDckMsbUJBQWMsR0FBRyxjQUFjLEVBQUUsQ0FBQztRQUNsQyxZQUFPLEdBQTBDLEVBQUUsQ0FBQztJQTBDaEUsQ0FBQztJQXhDQyxJQUFJLE1BQU07UUFDUixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQTJCO1FBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxHQUFhO1FBQzVCLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsUUFBUSxDQUFDLEVBQVUsRUFBRSxJQUFJLEdBQUcsS0FBSztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksbUJBQW1CLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFlLEVBQUUsSUFBYztRQUN6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMvQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssaUJBQWlCLENBQUMsT0FBTyxFQUFFO1lBQy9DLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN2QjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDeEUsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFlLEVBQUUsUUFBaUI7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzVDLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRU8sZUFBZSxDQUFDLEdBQWE7UUFDbkMsSUFBSSxDQUFDLE1BQU07YUFDUixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxTQUFTLENBQUM7YUFDOUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgQWNjb3JkaW9uU3RyYXRlZ3kgfSBmcm9tICcuLi9lbnVtcy9hY2NvcmRpb24tc3RyYXRlZ3kuZW51bSc7XG5pbXBvcnQgeyBBY2NvcmRpb25TdGF0dXMgfSBmcm9tICcuLi9lbnVtcy9hY2NvcmRpb24tc3RhdHVzLmVudW0nO1xuXG5sZXQgYWNjb3JkaW9uQ291bnQgPSAwO1xuXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uUGFuZWxNb2RlbCB7XG4gIHN0YXR1cyA9IEFjY29yZGlvblN0YXR1cy5JbmFjdGl2ZTtcbiAgaW5kZXg6IG51bWJlciA9IG51bGw7XG4gIGRpc2FibGVkID0gZmFsc2U7XG4gIG9wZW4gPSBmYWxzZTtcbiAgdGVtcGxhdGVJZCA9IGAke3RoaXMuaWR9LSR7dGhpcy5hY2NvcmRpb25JZH1gO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgaWQ6IHN0cmluZywgcHVibGljIGFjY29yZGlvbklkOiBudW1iZXIgfCBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Nb2RlbCB7XG4gIHByb3RlY3RlZCBzdHJhdGVneSA9IEFjY29yZGlvblN0cmF0ZWd5LkRlZmF1bHQ7XG4gIHByb3RlY3RlZCBhY2NvcmRpb25Db3VudCA9IGFjY29yZGlvbkNvdW50Kys7XG4gIHByb3RlY3RlZCBfcGFuZWxzOiB7IFtpZDogc3RyaW5nXTogQWNjb3JkaW9uUGFuZWxNb2RlbCB9ID0ge307XG5cbiAgZ2V0IHBhbmVscygpOiBBY2NvcmRpb25QYW5lbE1vZGVsW10ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9wYW5lbHMpLm1hcChpZCA9PiB0aGlzLl9wYW5lbHNbaWRdKTtcbiAgfVxuXG4gIHNldFN0cmF0ZWd5KHN0cmF0ZWd5OiBBY2NvcmRpb25TdHJhdGVneSkge1xuICAgIHRoaXMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgfVxuXG4gIHVwZGF0ZVBhbmVsT3JkZXIoaWRzOiBzdHJpbmdbXSkge1xuICAgIGlkcy5mb3JFYWNoKChpZCwgaW5kZXgpID0+ICh0aGlzLl9wYW5lbHNbaWRdLmluZGV4ID0gaW5kZXgpKTtcbiAgICB0aGlzLnJlbW92ZU9sZFBhbmVscyhpZHMpO1xuICB9XG5cbiAgYWRkUGFuZWwoaWQ6IHN0cmluZywgb3BlbiA9IGZhbHNlKSB7XG4gICAgdGhpcy5fcGFuZWxzW2lkXSA9IG5ldyBBY2NvcmRpb25QYW5lbE1vZGVsKGlkLCB0aGlzLmFjY29yZGlvbkNvdW50KTtcbiAgICB0aGlzLl9wYW5lbHNbaWRdLm9wZW4gPSBvcGVuO1xuICB9XG5cbiAgdG9nZ2xlUGFuZWwocGFuZWxJZDogc3RyaW5nLCBvcGVuPzogYm9vbGVhbikge1xuICAgIGNvbnN0IHBhbmVsSXNPcGVuID0gdGhpcy5fcGFuZWxzW3BhbmVsSWRdLm9wZW47XG4gICAgaWYgKHRoaXMuc3RyYXRlZ3kgPT09IEFjY29yZGlvblN0cmF0ZWd5LkRlZmF1bHQpIHtcbiAgICAgIHRoaXMuY2xvc2VBbGxQYW5lbHMoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wYW5lbHNbcGFuZWxJZF0ub3BlbiA9IG9wZW4gIT09IHVuZGVmaW5lZCA/IG9wZW4gOiAhcGFuZWxJc09wZW47XG4gIH1cblxuICBkaXNhYmxlUGFuZWwocGFuZWxJZDogc3RyaW5nLCBkaXNhYmxlZDogYm9vbGVhbikge1xuICAgIHRoaXMuX3BhbmVsc1twYW5lbElkXS5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjbG9zZUFsbFBhbmVscygpIHtcbiAgICB0aGlzLnBhbmVscy5mb3JFYWNoKHBhbmVsID0+ICh0aGlzLl9wYW5lbHNbcGFuZWwuaWRdLm9wZW4gPSBmYWxzZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVPbGRQYW5lbHMoaWRzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMucGFuZWxzXG4gICAgICAuZmlsdGVyKHBhbmVsID0+IGlkcy5maW5kKGlkID0+IGlkID09PSBwYW5lbC5pZCkgPT09IHVuZGVmaW5lZClcbiAgICAgIC5mb3JFYWNoKHBhbmVsID0+IGRlbGV0ZSB0aGlzLl9wYW5lbHNbcGFuZWwuaWRdKTtcbiAgfVxufVxuIl19