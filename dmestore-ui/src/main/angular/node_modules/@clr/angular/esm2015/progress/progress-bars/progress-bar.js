/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
export class ClrProgressBar {
    constructor() {
        this.externalId = '';
        // Progress
        this.max = 100;
        this._value = 0;
    }
    set id(value) {
        this._ID = value;
        this.externalId = null;
    }
    get id() {
        return this._ID;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    // Styles
    get progressClass() {
        return true;
    }
    get labeledClass() {
        return this._labeled;
    }
    set clrLabeled(value) {
        this._labeled = isBooleanAttributeSet(value);
    }
    get fadeClass() {
        return this._fade;
    }
    set clrFade(value) {
        this._fade = isBooleanAttributeSet(value);
    }
    get loopClass() {
        return this._loop;
    }
    set clrLoop(value) {
        this._loop = isBooleanAttributeSet(value);
    }
    get successClass() {
        return this._success;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrSuccess(value) {
        this._success = isBooleanAttributeSet(value);
    }
    get dangerClass() {
        return this._danger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrDanger(value) {
        this._danger = isBooleanAttributeSet(value);
    }
    get flashClass() {
        return this._flash;
    }
    set clrFlash(value) {
        this._flash = isBooleanAttributeSet(value);
    }
    get flashDangerClass() {
        return this._flashDanger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrFlashDanger(value) {
        this._flashDanger = isBooleanAttributeSet(value);
    }
    /**
     * Display optional text only when labeled is eneabled
     */
    displayStringValue() {
        return this._labeled;
    }
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     */
    get displayValue() {
        if (this.displayval) {
            return this.displayval;
        }
        return `${this.value || 0}%`;
    }
}
ClrProgressBar.decorators = [
    { type: Component, args: [{
                selector: 'clr-progress-bar',
                template: `
    <progress [id]="id" [attr.max]="max" [attr.value]="value" [attr.data-displayval]="displayValue"></progress>
    <span *ngIf="displayStringValue()">{{ displayValue }}</span>
  `
            },] }
];
ClrProgressBar.propDecorators = {
    externalId: [{ type: HostBinding, args: ['attr.id',] }],
    id: [{ type: Input }],
    max: [{ type: Input, args: ['clrMax',] }],
    displayval: [{ type: Input, args: ['clrDisplayval',] }],
    value: [{ type: Input, args: ['clrValue',] }],
    progressClass: [{ type: HostBinding, args: ['class.progress',] }],
    labeledClass: [{ type: HostBinding, args: ['class.labeled',] }],
    clrLabeled: [{ type: Input, args: ['clrLabeled',] }],
    fadeClass: [{ type: HostBinding, args: ['class.progress-fade',] }],
    clrFade: [{ type: Input, args: ['clrFade',] }],
    loopClass: [{ type: HostBinding, args: ['class.loop',] }],
    clrLoop: [{ type: Input, args: ['clrLoop',] }],
    successClass: [{ type: HostBinding, args: ['class.success',] }],
    clrSuccess: [{ type: Input, args: ['clrSuccess',] }],
    dangerClass: [{ type: HostBinding, args: ['class.danger',] }],
    clrDanger: [{ type: Input, args: ['clrDanger',] }],
    flashClass: [{ type: HostBinding, args: ['class.flash',] }],
    clrFlash: [{ type: Input, args: ['clrFlash',] }],
    flashDangerClass: [{ type: HostBinding, args: ['class.flash-danger',] }],
    clrFlashDanger: [{ type: Input, args: ['clrFlashDanger',] }]
};
//# sourceMappingURL=data:application/json;base64,