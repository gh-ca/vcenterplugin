/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT } from '@angular/common';
import { AfterViewInit, Component, ElementRef, Inject, NgZone, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { KeyCodes, IEKeyCodes } from '../../utils/enums/key-codes.enum';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ColumnResizerService } from './providers/column-resizer.service';
import { TableSizeService } from './providers/table-size.service';
// Default resize length on each keyboard move event
const KEYBOARD_RESIZE_LENGTH = 12;
export class ClrDatagridColumnSeparator {
    // Every column draggable separator should have its own unique ID
    // in order to not conflict with other draggables/droppables.
    constructor(columnResizerService, renderer, ngZone, tableSizeService, commonString, document, columnSeparatorId) {
        this.columnResizerService = columnResizerService;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.tableSizeService = tableSizeService;
        this.commonString = commonString;
        this.document = document;
        this.columnSeparatorId = columnSeparatorId;
        this.resizeStartedOnKeyDown = false;
        this.unlisteners = [];
    }
    get resizeTrackerEl() {
        return this.resizeTrackerRef.nativeElement;
    }
    get columnHandleEl() {
        return this.columnHandleRef.nativeElement;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.unlisteners.push(this.renderer.listen(this.columnHandleEl, 'keydown', event => {
                this.showTrackerOnFirstKeyDown(event);
                this.moveTrackerOnKeyDown(event);
            }));
            this.unlisteners.push(this.renderer.listen(this.columnHandleEl, 'keyup', event => {
                this.hideTrackerOnKeyUp(event);
            }));
        });
    }
    get descriptionId() {
        return `${this.columnSeparatorId}-aria-describedby`;
    }
    showTracker() {
        this.columnResizerService.startResize();
        const tableHeight = this.tableSizeService.getColumnDragHeight();
        this.renderer.setStyle(this.resizeTrackerEl, 'height', tableHeight);
        this.renderer.setStyle(this.resizeTrackerEl, 'display', 'block');
    }
    moveTracker(movedBy) {
        this.columnResizerService.calculateResize(movedBy);
        this.renderer.setStyle(this.resizeTrackerEl, 'transform', `translateX(${this.columnResizerService.resizedBy}px)`);
        this.renderer.setStyle(this.document.body, 'cursor', 'col-resize');
        this.redFlagTracker();
    }
    hideTracker() {
        this.columnResizerService.endResize();
        this.renderer.setStyle(this.resizeTrackerEl, 'display', 'none');
        this.renderer.setStyle(this.resizeTrackerEl, 'transform', `translateX(0px)`);
        this.renderer.setStyle(this.document.body, 'cursor', 'auto');
    }
    showTrackerOnFirstKeyDown(event) {
        if (!this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {
            this.resizeStartedOnKeyDown = true;
            this.renderer.addClass(this.resizeTrackerEl, 'on-arrow-key-resize');
            this.showTracker();
        }
    }
    moveTrackerOnKeyDown(event) {
        if (this.isArrowLeftKeyEvent(event)) {
            this.moveTracker(this.columnResizerService.resizedBy - KEYBOARD_RESIZE_LENGTH);
        }
        else if (this.isArrowRightKeyEvent(event)) {
            this.moveTracker(this.columnResizerService.resizedBy + KEYBOARD_RESIZE_LENGTH);
        }
    }
    hideTrackerOnKeyUp(event) {
        if (this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {
            this.resizeStartedOnKeyDown = false;
            this.renderer.removeClass(this.resizeTrackerEl, 'on-arrow-key-resize');
            this.hideTracker();
            this.columnHandleEl.focus();
        }
    }
    redFlagTracker() {
        if (this.isWithinMaxResizeRange !== this.columnResizerService.isWithinMaxResizeRange) {
            this.isWithinMaxResizeRange = this.columnResizerService.isWithinMaxResizeRange;
            if (!this.isWithinMaxResizeRange) {
                this.renderer.addClass(this.resizeTrackerEl, 'exceeded-max');
            }
            else {
                this.renderer.removeClass(this.resizeTrackerEl, 'exceeded-max');
            }
        }
    }
    isArrowLeftKeyEvent(event) {
        return event.key === KeyCodes.ArrowLeft || event.key === IEKeyCodes.ArrowLeft;
    }
    isArrowRightKeyEvent(event) {
        return event.key === KeyCodes.ArrowRight || event.key === IEKeyCodes.ArrowRight;
    }
    ngOnDestroy() {
        this.unlisteners.forEach(unlistener => unlistener());
    }
}
ClrDatagridColumnSeparator.ctorParameters = () => [
    { type: ColumnResizerService },
    { type: Renderer2 },
    { type: NgZone },
    { type: TableSizeService },
    { type: ClrCommonStringsService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrDatagridColumnSeparator.decorators = [
    { type: Component, args: [{
                selector: 'clr-dg-column-separator',
                template: `
    <button
      type="button"
      class="datagrid-column-handle"
      [attr.aria-label]="commonString.keys.columnSeparatorAriaLabel"
      [attr.aria-describedby]="descriptionId"
      clrDraggable
      [clrGroup]="columnSeparatorId"
      (clrDragStart)="showTracker()"
      (clrDragMove)="moveTracker($event.dragPosition.moveX)"
      (clrDragEnd)="hideTracker()"
      #columnHandle
    ></button>
    <span class="clr-sr-only" [attr.id]="descriptionId">
      {{ commonString.keys.columnSeparatorDescription }}
    </span>
    <div class="datagrid-column-resize-tracker" #resizeTracker></div>
  `,
                host: {
                    '[class.datagrid-column-separator]': 'true',
                },
                providers: [UNIQUE_ID_PROVIDER]
            },] }
];
ClrDatagridColumnSeparator.ctorParameters = () => [
    { type: ColumnResizerService },
    { type: Renderer2 },
    { type: NgZone },
    { type: TableSizeService },
    { type: ClrCommonStringsService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrDatagridColumnSeparator.propDecorators = {
    resizeTrackerRef: [{ type: ViewChild, args: ['resizeTracker',] }],
    columnHandleRef: [{ type: ViewChild, args: ['columnHandle',] }]
};
//# sourceMappingURL=data:application/json;base64,