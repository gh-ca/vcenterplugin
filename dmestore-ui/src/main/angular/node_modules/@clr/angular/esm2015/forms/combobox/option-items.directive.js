/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { NgForOf } from '@angular/common';
import { Directive, DoCheck, Input, IterableDiffer, IterableDiffers, TemplateRef, TrackByFunction, ViewContainerRef, OnDestroy, } from '@angular/core';
import { OptionSelectionService } from './providers/option-selection.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
export class ClrOptionItems {
    constructor(template, differs, optionService, positionService, vcr) {
        this.template = template;
        this.differs = differs;
        this.optionService = optionService;
        this.positionService = positionService;
        this.vcr = vcr;
        this.subscriptions = [];
        this.filter = '';
        this.differ = null;
        this.iterableProxy = new NgForOf(this.vcr, this.template, this.differs);
        this.subscriptions.push(optionService.inputChanged.subscribe(filter => {
            this.filter = filter;
            this.updateItems();
        }));
    }
    set rawItems(items) {
        this._rawItems = items ? items : [];
        this.updateItems();
    }
    set trackBy(value) {
        this.iterableProxy.ngForTrackBy = value;
    }
    set field(field) {
        this._filterField = field;
        this.optionService.displayField = field;
    }
    updateItems() {
        if (!this._rawItems || this.filter === undefined || this.filter === null) {
            return;
        }
        if (this._filterField) {
            this.filteredItems = this._rawItems.filter(item => {
                const objValue = item[this._filterField];
                return objValue !== undefined
                    ? objValue.toString().toLowerCase().indexOf(this.filter.toLowerCase().toString()) > -1
                    : false;
            });
        }
        else {
            // Filter by all item object values
            this.filteredItems = this._rawItems.filter(item => {
                if (typeof item !== 'object') {
                    return item.toString().toLowerCase().indexOf(this.filter.toString().toLowerCase()) > -1;
                }
                const objValues = Object.values(item).filter(value => {
                    return value.toString().toLowerCase().indexOf(this.filter.toString().toLowerCase()) > -1;
                });
                return objValues.length > 0;
            });
        }
        this.iterableProxy.ngForOf = this.filteredItems;
    }
    ngDoCheck() {
        if (!this.differ) {
            this.differ = this.differs.find(this.filteredItems).create(this.iterableProxy.ngForTrackBy);
        }
        if (this.differ) {
            const changes = this.differ.diff(this.filteredItems);
            if (changes) {
                this.iterableProxy.ngDoCheck();
                this.positionService.realign();
            }
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
}
ClrOptionItems.ctorParameters = () => [
    { type: TemplateRef },
    { type: IterableDiffers },
    { type: OptionSelectionService },
    { type: ClrPopoverPositionService },
    { type: ViewContainerRef }
];
ClrOptionItems.decorators = [
    { type: Directive, args: [{
                selector: '[clrOptionItems][clrOptionItemsOf]',
            },] }
];
ClrOptionItems.ctorParameters = () => [
    { type: TemplateRef },
    { type: IterableDiffers },
    { type: OptionSelectionService },
    { type: ClrPopoverPositionService },
    { type: ViewContainerRef }
];
ClrOptionItems.propDecorators = {
    rawItems: [{ type: Input, args: ['clrOptionItemsOf',] }],
    trackBy: [{ type: Input, args: ['clrOptionItemsTrackBy',] }],
    field: [{ type: Input, args: ['clrOptionItemsField',] }]
};
//# sourceMappingURL=data:application/json;base64,