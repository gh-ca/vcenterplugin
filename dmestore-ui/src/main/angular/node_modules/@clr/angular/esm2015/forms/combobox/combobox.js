/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { isPlatformBrowser } from '@angular/common';
import { Component, ContentChild, ElementRef, HostListener, PLATFORM_ID, Renderer2, ViewChild, ViewContainerRef, Injector, Self, Optional, Input, Output, EventEmitter, AfterContentInit, Inject, } from '@angular/core';
import { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';
import { OptionSelectionService } from './providers/option-selection.service';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrComboboxContainer } from './combobox-container';
import { NgControl, ControlValueAccessor } from '@angular/forms';
import { ClrOptionSelected } from './option-selected.directive';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { AriaService } from '../../utils/aria/aria.service';
import { IF_ACTIVE_ID_PROVIDER } from '../../utils/conditional/if-active.service';
import { MultiSelectComboboxModel } from './model/multi-select-combobox.model';
import { SingleSelectComboboxModel } from './model/single-select-combobox.model';
import { COMBOBOX_FOCUS_HANDLER_PROVIDER, ComboboxFocusHandler } from './providers/combobox-focus-handler.service';
import { FOCUS_SERVICE_PROVIDER } from '../../utils/focus/focus.service';
import { BACKSPACE } from '../../utils/key-codes/key-codes';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ComboboxContainerService } from './providers/combobox-container.service';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ClrLoadingState } from '../../utils/loading/loading';
import { IfControlStateService, CONTROL_STATE } from '../common/if-control-state/if-control-state.service';
export class ClrCombobox extends WrappedFormControl {
    constructor(vcr, injector, control, renderer, el, optionSelectionService, commonStrings, toggleService, positionService, controlStateService, containerService, platformId, ariaService, focusHandler) {
        super(vcr, ClrComboboxContainer, injector, control, renderer, el);
        this.control = control;
        this.renderer = renderer;
        this.el = el;
        this.optionSelectionService = optionSelectionService;
        this.commonStrings = commonStrings;
        this.toggleService = toggleService;
        this.positionService = positionService;
        this.controlStateService = controlStateService;
        this.containerService = containerService;
        this.platformId = platformId;
        this.ariaService = ariaService;
        this.focusHandler = focusHandler;
        this.index = 1;
        this.invalid = false;
        this.focused = false;
        this._searchText = '';
        this.smartPosition = {
            axis: ClrAxis.VERTICAL,
            side: ClrSide.AFTER,
            anchor: ClrAlignment.START,
            content: ClrAlignment.START,
        };
        this.clrInputChange = new EventEmitter(false);
        this.clrOpenChange = this.toggleService.openChange;
        // This output should be used to set up a live region using aria-live and populate it with updates that reflect each combobox change
        this.clrSelectionChange = this.optionSelectionService
            .selectionChanged;
        if (control) {
            control.valueAccessor = this;
        }
        // default to SingleSelectComboboxModel, in case the optional input [ClrMulti] isn't used
        this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();
        this.updateControlValue();
    }
    // Override the id of WrappedFormControl, as we want to move it to the embedded input.
    // Otherwise the label/component connection does not work and screen readers do not read the label.
    get id() {
        return this.controlIdService.id + '-combobox';
    }
    inputId() {
        return this.controlIdService.id;
    }
    get openState() {
        return this.toggleService.open;
    }
    set searchText(text) {
        // if input text has changed since last time, fire a change event so application can react to it
        if (text !== this._searchText) {
            this._searchText = text;
            this.clrInputChange.emit(this.searchText);
            this.optionSelectionService.currentInput = this.searchText;
        }
    }
    get searchText() {
        return this._searchText;
    }
    loadingStateChange(state) {
        this.optionSelectionService.loading = state === ClrLoadingState.LOADING;
        this.positionService.realign();
        if (state !== ClrLoadingState.LOADING && isPlatformBrowser(this.platformId)) {
            setTimeout(() => {
                this.focusFirstActive();
            });
        }
    }
    get disabled() {
        return this.control && this.control.disabled;
    }
    unselect(item) {
        if (!this.disabled) {
            this.optionSelectionService.unselect(item);
        }
    }
    set multiSelect(value) {
        if (value) {
            this.optionSelectionService.selectionModel = new MultiSelectComboboxModel();
        }
        else {
            // in theory, setting this again should not cause errors even though we already set it in constructor,
            // since the initial call to writeValue (caused by [ngModel] input) should happen after this
            this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();
        }
        this.updateControlValue();
    }
    get multiSelect() {
        return this.optionSelectionService.multiselectable;
    }
    get ariaControls() {
        return this.ariaService.ariaControls;
    }
    get ariaOwns() {
        return this.ariaService.ariaOwns;
    }
    get ariaDescribedBySelection() {
        return 'selection-' + this.id;
    }
    get displayField() {
        return this.optionSelectionService.displayField;
    }
    onBlur() {
        this.onTouchedCallback();
        if (this.control.control.updateOn === 'blur') {
            this.control.control.updateValueAndValidity();
        }
        this.focused = false;
    }
    onFocus() {
        this.focused = true;
    }
    getSelectionAriaLabel() {
        if (this.containerService && this.containerService.labelText) {
            return `${this.containerService.labelText} ${this.commonStrings.keys.comboboxSelection}`;
        }
        return this.commonStrings.keys.comboboxSelection;
    }
    onKeyUp(event) {
        // if BACKSPACE in multiselect mode, delete the last pill if text is empty
        if (event.keyCode === BACKSPACE && this.multiSelect && this._searchText.length === 0) {
            const multiModel = this.optionSelectionService.selectionModel.model;
            if (multiModel && multiModel.length > 0) {
                const lastItem = multiModel[multiModel.length - 1];
                this.control.control.markAsTouched();
                this.optionSelectionService.unselect(lastItem);
            }
        }
    }
    initializeSubscriptions() {
        this.subscriptions.push(this.optionSelectionService.selectionChanged.subscribe((newSelection) => {
            if (!this.multiSelect) {
                this.searchText = this.getDisplayNames(newSelection.model)[0];
                if (this.searchText) {
                    this.optionSelectionService.currentInput = this.searchText;
                }
            }
            this.toggleService.open = false;
            this.updateControlValue();
            if (this.control && this.control.control) {
                this.control.control.updateValueAndValidity();
            }
            // for the purposes of validation
            if (this.onChangeCallback) {
                this.onChangeCallback(this.optionSelectionService.selectionModel.model);
            }
        }));
        this.subscriptions.push(this.toggleService.openChange.subscribe(open => {
            if (open) {
                this.focusFirstActive();
            }
            if (this.multiSelect) {
                this.searchText = '';
            }
            else {
                this.searchText = this.getDisplayNames(this.optionSelectionService.selectionModel.model)[0];
            }
        }));
        this.subscriptions.push(this.toggleService.popoverAligned.subscribe(popoverNode => {
            // When used outside a combobox container
            if (!this.containerService) {
                return;
            }
            const popover = popoverNode;
            // Update position if popover hides the label
            if (popover.getBoundingClientRect().top < this.el.nativeElement.getBoundingClientRect().top) {
                this.renderer.setStyle(popoverNode, 'top', `${popover.offsetTop + this.containerService.labelOffset}px`);
            }
        }));
        if (this.controlStateService) {
            this.subscriptions.push(this.controlStateService.statusChanges.subscribe(invalid => {
                this.invalid = invalid === CONTROL_STATE.INVALID;
            }));
        }
    }
    focusFirstActive() {
        this.focusHandler.focusFirstActive();
    }
    updateControlValue() {
        if (this.control && this.control.control) {
            this.control.control.setValue(this.optionSelectionService.selectionModel.model);
        }
    }
    // ControlValueAccessor implementation methods
    writeValue(value) {
        this.optionSelectionService.setSelectionValue(value);
    }
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    getActiveDescendant() {
        const model = this.focusHandler.pseudoFocus.model;
        return model ? model.id : null;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    setDisabledState() {
        // do nothing
    }
    focusInput() {
        this.focusHandler.focusInput();
    }
    getDisplayNames(model) {
        if (this.displayField) {
            if (!Array.isArray(model)) {
                model = [model];
            }
            return model.map(item => (item ? item[this.displayField] : null));
        }
        return [this.optionSelectionService.selectionModel.model];
    }
    // Lifecycle methods
    ngAfterContentInit() {
        this.initializeSubscriptions();
    }
    ngAfterViewInit() {
        this.focusHandler.textInput = this.textbox.nativeElement;
        this.focusHandler.trigger = this.trigger.nativeElement;
        // The text input is the actual element we are wrapping
        // This assignment is needed by the wrapper, so it can set
        // the aria properties on the input element, not on the component.
        this.el = this.textbox;
        super.ngAfterViewInit();
    }
    ngOnDestroy() {
        this.subscriptions.forEach((sub) => sub.unsubscribe());
    }
}
ClrCombobox.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: OptionSelectionService },
    { type: ClrCommonStringsService },
    { type: ClrPopoverToggleService },
    { type: ClrPopoverPositionService },
    { type: IfControlStateService, decorators: [{ type: Optional }] },
    { type: ComboboxContainerService, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AriaService },
    { type: ComboboxFocusHandler }
];
ClrCombobox.decorators = [
    { type: Component, args: [{
                selector: 'clr-combobox',
                template: "<!--\n* Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<!-- The (click) handler is needed to auto-focus on input field which can not currently occupy the whole\n     width of the component, after being wrapped to a new line -->\n<div\n  class=\"clr-combobox-wrapper\"\n  clrPopoverAnchor\n  (click)=\"focusInput()\"\n  [class.multi]=\"multiSelect\"\n  [class.invalid]=\"invalid\"\n>\n  <span\n    *ngIf=\"multiSelect && optionSelectionService.selectionModel.model\"\n    role=\"grid\"\n    clrRovingTabindex\n    [clrRovingTabindexDisabled]=\"control?.disabled\"\n    clrDirection=\"both\"\n    [attr.aria-label]=\"getSelectionAriaLabel()\"\n    [attr.aria-disabled]=\"control?.disabled? true: null\"\n  >\n    <span\n      *ngFor=\"let item of optionSelectionService.selectionModel.model; let i = index\"\n      class=\"label label-combobox-pill\"\n      role=\"row\"\n    >\n      <span role=\"gridcell\">\n        <span class=\"clr-combobox-pill-content\" clrKeyFocusItem>\n          <ng-container\n            *ngIf=\"optionSelected\"\n            [ngTemplateOutlet]=\"optionSelected.template\"\n            [ngTemplateOutletContext]=\"{$implicit: optionSelectionService.selectionModel.model[i]}\"\n          >\n          </ng-container>\n        </span>\n      </span>\n      <span role=\"gridcell\">\n        <button\n          clrKeyFocusItem\n          type=\"button\"\n          class=\"clr-combobox-remove-btn\"\n          [disabled]=\"control?.disabled? true: null\"\n          [attr.aria-label]=\"commonStrings.keys.comboboxDelete + ' ' + optionSelectionService.selectionModel.toString(displayField, i)\"\n          (click)=\"unselect(item)\"\n        >\n          <clr-icon shape=\"close\" size=\"12\"></clr-icon>\n        </button>\n      </span>\n    </span>\n  </span>\n\n  <span class=\"clr-combobox-input-wrapper\">\n    <input\n      #textboxInput\n      type=\"text\"\n      [id]=\"inputId()\"\n      role=\"combobox\"\n      class=\"clr-input clr-combobox-input\"\n      [(ngModel)]=\"searchText\"\n      (blur)=\"onBlur()\"\n      (focus)=\"onFocus()\"\n      [attr.aria-expanded]=\"openState\"\n      [attr.aria-owns]=\"ariaOwns\"\n      aria-haspopup=\"listbox\"\n      aria-autocomplete=\"list\"\n      [attr.aria-invalid]=\"control?.invalid? true: null\"\n      [disabled]=\"control?.disabled? true: null\"\n      [attr.aria-activedescendant]=\"getActiveDescendant()\"\n      aria-multiline=\"false\"\n    />\n  </span>\n\n  <!-- No click handler, as it uses the handler on the .clr-combobox-wrapper -->\n  <button\n    clrPopoverOpenCloseButton\n    #trigger\n    type=\"button\"\n    class=\"clr-combobox-trigger\"\n    tabindex=\"-1\"\n    [attr.aria-label]=\"commonStrings.keys.comboboxOpen\"\n  >\n    <clr-icon shape=\"caret down\" size=\"12\"></clr-icon>\n  </button>\n\n  <div class=\"clr-focus-indicator\" [class.clr-focus]=\"focused\"></div>\n</div>\n\n<!-- Both close handlers are handled manually due to issues in Edge browser.\n     Additionally 'outsideClickToClose' has complex handling that's necessary\n     to be manual due to the component architecture -->\n<div role=\"dialog\" *clrPopoverContent=\"openState at smartPosition; outsideClickToClose: false; scrollToClose: false\">\n  <ng-content></ng-content>\n</div>\n",
                providers: [
                    ClrPopoverToggleService,
                    { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },
                    OptionSelectionService,
                    { provide: LoadingListener, useExisting: ClrCombobox },
                    IF_ACTIVE_ID_PROVIDER,
                    AriaService,
                    FOCUS_SERVICE_PROVIDER,
                    COMBOBOX_FOCUS_HANDLER_PROVIDER,
                    ClrPopoverToggleService,
                    ClrPopoverEventsService,
                    ClrPopoverPositionService,
                ],
                host: {
                    '[class.aria-required]': 'true',
                    '[class.clr-combobox]': 'true',
                    '[class.clr-combobox-disabled]': 'control?.disabled',
                }
            },] }
];
ClrCombobox.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: OptionSelectionService },
    { type: ClrCommonStringsService },
    { type: ClrPopoverToggleService },
    { type: ClrPopoverPositionService },
    { type: IfControlStateService, decorators: [{ type: Optional }] },
    { type: ComboboxContainerService, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AriaService },
    { type: ComboboxFocusHandler }
];
ClrCombobox.propDecorators = {
    textbox: [{ type: ViewChild, args: ['textboxInput',] }],
    trigger: [{ type: ViewChild, args: ['trigger',] }],
    optionSelected: [{ type: ContentChild, args: [ClrOptionSelected,] }],
    multiSelect: [{ type: Input, args: ['clrMulti',] }],
    onKeyUp: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    clrInputChange: [{ type: Output, args: ['clrInputChange',] }],
    clrOpenChange: [{ type: Output, args: ['clrOpenChange',] }],
    clrSelectionChange: [{ type: Output, args: ['clrSelectionChange',] }]
};
//# sourceMappingURL=data:application/json;base64,