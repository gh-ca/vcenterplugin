"use strict";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const fs_1 = require("fs");
const path_1 = require("path");
const get_json_file_1 = require("../utility/get-json-file");
const update_json_file_1 = require("../utility/update-json-file");
const find_app_module_1 = require("../utility/find-app-module");
const add_module_import_to_module_1 = require("../utility/add-module-import-to-module");
const CONFIG_FILE_NAME = 'angular.json';
let projectSettings = {};
// TODO: Stop using fs, keep the version somewhere else
// Determine where to load the package.json, if doing local dev or not
let corePackage;
if (fs_1.existsSync(path_1.join(__dirname, '../../package.json'))) {
    corePackage = require('../../package.json');
}
else {
    corePackage = require('../../../../package.json');
}
// Chain a series of tasks to setup Clarity
// 1. Add Clarity dependencies
// 2. Add styles and scripts assets to angular.json
// 3. Add ClarityModule to NgModule
// 4. Add BrowserAnimationsModule to NgModule
// 5. Run npm install
function default_1(options) {
    return schematics_1.chain([
        setProjectSettings(options),
        addClarityDependencies,
        addAssetsToConfigFile,
        importClarityModule,
        importBrowserAnimationsModule,
        runNpmInstall,
    ]);
}
exports.default = default_1;
function setProjectSettings(options) {
    return (host) => {
        if (!host.exists(CONFIG_FILE_NAME)) {
            throw new schematics_1.SchematicsException('Could not install Clarity, requires Angular and Angular CLI version 6 or greater');
        }
        projectSettings = Object.assign({}, options);
        const config = get_json_file_1.getJsonFile(host, CONFIG_FILE_NAME);
        if (!options.project) {
            if (!config.defaultProject) {
                throw new schematics_1.SchematicsException('Could not find a default project, please specify --project PROJECT_NAME');
            }
            projectSettings.project = config.defaultProject;
        }
        projectSettings.module = find_app_module_1.findAppModule(host, config, projectSettings.project || '');
    };
}
function importClarityModule() {
    return (host) => add_module_import_to_module_1.addModuleImportToModule(host, 'ClarityModule', '@clr/angular', projectSettings.module || '');
}
function importBrowserAnimationsModule() {
    return (host) => add_module_import_to_module_1.addModuleImportToModule(host, 'BrowserAnimationsModule', '@angular/platform-browser/animations', projectSettings.module || '');
}
function addClarityDependencies(host) {
    update_json_file_1.updateJsonFile(host, 'package.json', json => {
        const version = getVersion(json.dependencies['@angular/core'], corePackage.version);
        json.dependencies['@clr/angular'] = version;
        json.dependencies['@clr/ui'] = version;
        json.dependencies['@clr/icons'] = version;
        if (!Object.keys(json.dependencies).includes('@webcomponents/webcomponentsjs')) {
            json.dependencies['@webcomponents/webcomponentsjs'] = '^2.0.0';
        }
    });
}
// Checks if a version of Angular is compatible with current or next
function getVersion(ngVersion, clrVersion) {
    const diff = 6; // Number disparity between Angular and Clarity, this works as long as we stay in sync with versioning
    const majorNgVersion = Number.parseInt(ngVersion.split('.')[0].replace(/\D/g, ''));
    const majorClrVersion = Number.parseInt(clrVersion.split('.')[0].replace(/\D/g, ''));
    if (majorNgVersion - majorClrVersion < diff) {
        // If Angular is less than 6 versions ahead, backtrack Clarity version
        return `^${majorNgVersion - diff}.0.0`;
    }
    else {
        // Otherwise, just link to installed version for latest or next releases
        return clrVersion;
    }
}
function addAssetsToConfigFile(host) {
    update_json_file_1.updateJsonFile(host, CONFIG_FILE_NAME, json => {
        const project = Object.keys(json.projects).find(key => key === projectSettings.project);
        if (!project) {
            console.warn(`Could not update CLI config file to add scripts and styles. You'll have to add them manually.`);
            return;
        }
        const target = json.projects[project].targets || json.projects[project].architect;
        const pathPrefix = json.apps ? '../' : '';
        updateStyleAssets(target, pathPrefix);
        updateScriptAssets(target, pathPrefix);
    });
}
function updateStyleAssets(target, pathPrefix) {
    const styles = target.build.options.styles || [];
    if (!styles.includes('node_modules/@clr/ui/clr-ui')) {
        styles.unshift(pathPrefix + 'node_modules/@clr/ui/clr-ui.min.css');
    }
    if (!styles.includes('node_modules/@clr/icons/clr-icons')) {
        styles.unshift(pathPrefix + 'node_modules/@clr/icons/clr-icons.min.css');
    }
    target.build.options.styles = styles;
}
function updateScriptAssets(target, pathPrefix) {
    const scripts = target.build.options.scripts || [];
    if (!scripts.includes('node_modules/@clr/icons/clr-icons.min.js')) {
        scripts.push(pathPrefix + 'node_modules/@clr/icons/clr-icons.min.js');
    }
    if (!scripts.includes('node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js')) {
        // Want this second
        scripts.unshift(pathPrefix + 'node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js');
    }
    if (!scripts.includes('node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js')) {
        // Want this first
        scripts.unshift(pathPrefix + 'node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js');
    }
    target.build.options.scripts = scripts;
}
function runNpmInstall(_tree, context) {
    context.addTask(new tasks_1.NodePackageInstallTask());
}
//# sourceMappingURL=index.js.map