"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path_1 = require("path");
const get_file_content_1 = require("../utility/get-file-content");
const setup_project_1 = require("../utility/setup-project");
const PROJECT_NAME = 'foo';
const collectionPath = path_1.join(__dirname, '../collection.json');
describe('ng add @clr/angular', () => {
    it('should print an error if executed in an empty directory', () => __awaiter(void 0, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        try {
            yield runner.runSchematicAsync('ng-add', { module: 'app' }, schematics_1.Tree.empty()).toPromise();
            fail('expected to throw');
        }
        catch (e) {
            expect(e instanceof schematics_1.SchematicsException);
            expect(e.message).toEqual('Could not install Clarity, requires Angular and Angular CLI version 6 or greater');
        }
    }));
    describe('in a new Angular workspace', () => __awaiter(void 0, void 0, void 0, function* () {
        let runner;
        let workspaceTree;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
            workspaceTree = yield setup_project_1.setupProject(new testing_1.UnitTestTree(new schematics_1.HostTree()), runner, PROJECT_NAME);
        }));
        it('should add dependencies to Clarity packages', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            const packageJsonPath = '/package.json';
            expect(tree.files).toContain(packageJsonPath);
            const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
            expect(dependencies).toBeDefined();
            expect(dependencies['@clr/angular']).toBeDefined();
            expect(dependencies['@clr/ui']).toBeDefined();
            expect(dependencies['@clr/icons']).toBeDefined();
            expect(dependencies['@webcomponents/webcomponentsjs']).toBeDefined();
        }));
        it('should add Clarity assets in the configuration file', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            const configFilePath = '/angular.json';
            expect(tree.files).toContain(configFilePath);
            const configFile = JSON.parse(get_file_content_1.getFileContent(tree, configFilePath));
            const styles = configFile.projects[PROJECT_NAME].architect.build.options.styles;
            expect(styles.includes('node_modules/@clr/ui/clr-ui.min.css')).toBeTruthy();
            expect(styles.includes('node_modules/@clr/icons/clr-icons.min.css')).toBeTruthy();
            const scripts = configFile.projects[PROJECT_NAME].architect.build.options.scripts;
            const webcomponentsAdapter = 'node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js';
            const webcomponentsBundle = 'node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js';
            expect(scripts.includes(webcomponentsAdapter)).toBeTruthy();
            expect(scripts.includes(webcomponentsBundle)).toBeTruthy();
            // The adapter script comes before the bundle scripts
            expect(scripts.indexOf(webcomponentsAdapter)).toBeLessThan(scripts.indexOf(webcomponentsBundle));
        }));
        it('should not add Clarity assets in the configuration file if they are already present', () => __awaiter(void 0, void 0, void 0, function* () {
            const configFilePath = '/angular.json';
            const configFile = JSON.parse(get_file_content_1.getFileContent(workspaceTree, configFilePath));
            const styles = configFile.projects[PROJECT_NAME].architect.build.options.styles || [];
            const scripts = configFile.projects[PROJECT_NAME].architect.build.options.scripts || [];
            styles.push('node_modules/@clr/ui/clr-ui');
            styles.push('node_modules/@clr/icons/clr-icons');
            scripts.push('node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js');
            scripts.push('node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js');
            configFile.projects[PROJECT_NAME].architect.build.options.styles = styles;
            configFile.projects[PROJECT_NAME].architect.build.options.scripts = scripts;
            workspaceTree.overwrite(configFilePath, JSON.stringify(configFile, null, 2));
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            expect(tree.files).toContain(configFilePath);
            const updatedConfigFile = JSON.parse(get_file_content_1.getFileContent(tree, configFilePath));
            const updatedStyles = updatedConfigFile.projects[PROJECT_NAME].architect.build.options.styles;
            expect(updatedStyles.includes('node_modules/@clr/ui/clr-ui.min.css')).toBeFalsy();
            expect(updatedStyles.includes('node_modules/@clr/icons/clr-icons.min.css')).toBeFalsy();
            const updatedScripts = updatedConfigFile.projects[PROJECT_NAME].architect.build.options.scripts;
            const webcomponentsAdapter = 'node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js';
            const webcomponentsBundle = 'node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js';
            // The scripts are still in the array
            expect(updatedScripts.includes(webcomponentsAdapter)).toBeTruthy();
            expect(updatedScripts.includes(webcomponentsBundle)).toBeTruthy();
            // The scripts are in their original order
            expect(updatedScripts.indexOf(webcomponentsBundle)).toBeLessThan(scripts.indexOf(webcomponentsAdapter));
        }));
        it('should import ClarityModule to the root module', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            const rootModulePath = '/src/app/app.module.ts';
            const content = get_file_content_1.getFileContent(tree, rootModulePath);
            expect(content).toMatch(/import { ClarityModule } from '@clr\/angular'/);
        }));
        it('should import BrowserAnimationsModule to the root module', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            const rootModulePath = '/src/app/app.module.ts';
            const content = get_file_content_1.getFileContent(tree, rootModulePath);
            expect(content).toMatch(/import { BrowserAnimationsModule } from '@angular\/platform-browser\/animations'/);
        }));
    }));
});
//# sourceMappingURL=index_spec.js.map