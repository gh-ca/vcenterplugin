{"version":3,"file":"selection.d.ts","sources":["selection.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { FiltersProvider } from './filters';\nimport { Items } from './items';\nimport { SelectionType } from '../enums/selection-type';\nexport declare class Selection<T = any> {\n    private _items;\n    private _filters;\n    id: string;\n    preserveSelection: boolean;\n    private prevSelectionRefs;\n    private prevSingleSelectionRef;\n    private lockedRefs;\n    constructor(_items: Items<T>, _filters: FiltersProvider<T>);\n    clearSelection(): void;\n    private _selectionType;\n    get selectionType(): SelectionType;\n    set selectionType(value: SelectionType);\n    /** @deprecated since 2.0, remove in 3.0 */\n    rowSelectionMode: boolean;\n    private get _selectable();\n    /**\n     * Subscriptions to the other providers changes.\n     */\n    private subscriptions;\n    /**\n     * Cleans up our subscriptions to other providers\n     */\n    destroy(): void;\n    /**\n     * The current selection in single selection type\n     */\n    private _currentSingle;\n    get currentSingle(): T;\n    set currentSingle(value: T);\n    /**\n     * The current selection\n     */\n    private _current;\n    get current(): T[];\n    set current(value: T[]);\n    updateCurrent(value: T[], emit: boolean): void;\n    /**\n     * The Observable that lets other classes subscribe to selection changes\n     */\n    private _change;\n    private emitChange;\n    get change(): Observable<T[] | T>;\n    /**\n     * Checks if an item is currently selected\n     */\n    isSelected(item: T): boolean;\n    /**\n     * Selects an item\n     */\n    private selectItem;\n    /**\n     * Deselects an item\n     */\n    private deselectItem;\n    /**\n     * Selects or deselects an item\n     */\n    setSelected(item: T, selected: boolean): void;\n    /**\n     * Checks if all currently displayed items are selected\n     */\n    isAllSelected(): boolean;\n    /**\n     * Make sure that it could be locked\n     *\n     * @remark\n     * Check also is items.all an array, if not there is no nothing to lock or compare to\n     *\n     */\n    private canItBeLocked;\n    /**\n     * Lock and unlock item\n     */\n    lockItem(item: T, lock: boolean): void;\n    /**\n     * Check is item locked or not by searcing into lockedRefs for entry\n     */\n    isLocked(item: T): boolean;\n    /**\n     * Selects or deselects all currently displayed items\n     */\n    toggleAll(): void;\n}\n"]}