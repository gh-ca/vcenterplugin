import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { ClrDatagridCell } from './datagrid-cell';
import { DisplayModeService } from './providers/display-mode.service';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrExpandableAnimation } from '../../utils/animations/expandable-animation/expandable-animation';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridRow<T = any> implements AfterContentInit, AfterViewInit {
    selection: Selection<T>;
    rowActionService: RowActionService;
    globalExpandable: ExpandableRowsCount;
    expand: DatagridIfExpandService;
    detailService: DetailService;
    private displayMode;
    private vcr;
    private renderer;
    private el;
    commonStrings: ClrCommonStringsService;
    id: string;
    radioId: string;
    checkboxId: string;
    expandableId: string;
    SELECTION_TYPE: typeof SelectionType;
    expandAnimation: ClrExpandableAnimation;
    /**
     * Model of the row, to use for selection
     */
    item: T;
    replaced: boolean;
    expandAnimationTrigger: boolean;
    constructor(selection: Selection<T>, rowActionService: RowActionService, globalExpandable: ExpandableRowsCount, expand: DatagridIfExpandService, detailService: DetailService, displayMode: DisplayModeService, vcr: ViewContainerRef, renderer: Renderer2, el: ElementRef, commonStrings: ClrCommonStringsService);
    private _selected;
    /**
     * Indicates if the row is selected
     */
    get selected(): boolean;
    set selected(value: boolean);
    set clrDgSelectable(value: boolean);
    get clrDgSelectable(): boolean;
    selectedChanged: EventEmitter<boolean>;
    toggle(selected?: boolean): void;
    get expanded(): boolean;
    set expanded(value: boolean);
    expandedChange: EventEmitter<boolean>;
    toggleExpand(): void;
    detailButton: HTMLButtonElement;
    private _detailOpenLabel;
    set clrDgDetailOpenLabel(label: string);
    get clrDgDetailOpenLabel(): string;
    private _detailCloseLabel;
    set clrDgDetailCloseLabel(label: string);
    get clrDgDetailCloseLabel(): string;
    /*****
     * property dgCells
     *
     * @description
     * A Query List of the ClrDatagrid cells in this row.
     *
     */
    dgCells: QueryList<ClrDatagridCell>;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    private subscriptions;
    ngOnDestroy(): void;
    displayCells: boolean;
    _stickyCells: ViewContainerRef;
    _scrollableCells: ViewContainerRef;
    _calculatedCells: ViewContainerRef;
    private wrappedInjector;
    ngOnInit(): void;
    get _view(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridRow<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridRow<any>, "clr-dg-row", never, { "selected": "clrDgSelected"; "clrDgSelectable": "clrDgSelectable"; "expanded": "clrDgExpanded"; "clrDgDetailOpenLabel": "clrDgDetailOpenLabel"; "clrDgDetailCloseLabel": "clrDgDetailCloseLabel"; "item": "clrDgItem"; }, { "selectedChanged": "clrDgSelectedChange"; "expandedChange": "clrDgExpandedChange"; }, ["dgCells"], ["clr-dg-row-detail", "clr-dg-action-overflow", "clr-dg-cell"]>;
}

//# sourceMappingURL=datagrid-row.d.ts.map