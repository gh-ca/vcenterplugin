import { Observable } from 'rxjs';
import { FiltersProvider } from './filters';
import { Items } from './items';
import { SelectionType } from '../enums/selection-type';
import * as ɵngcc0 from '@angular/core';
export declare class Selection<T = any> {
    private _items;
    private _filters;
    id: string;
    preserveSelection: boolean;
    private prevSelectionRefs;
    private prevSingleSelectionRef;
    private lockedRefs;
    constructor(_items: Items<T>, _filters: FiltersProvider<T>);
    clearSelection(): void;
    private _selectionType;
    get selectionType(): SelectionType;
    set selectionType(value: SelectionType);
    /** @deprecated since 2.0, remove in 3.0 */
    rowSelectionMode: boolean;
    private get _selectable();
    /**
     * Subscriptions to the other providers changes.
     */
    private subscriptions;
    /**
     * Cleans up our subscriptions to other providers
     */
    destroy(): void;
    /**
     * The current selection in single selection type
     */
    private _currentSingle;
    get currentSingle(): T;
    set currentSingle(value: T);
    /**
     * The current selection
     */
    private _current;
    get current(): T[];
    set current(value: T[]);
    updateCurrent(value: T[], emit: boolean): void;
    /**
     * The Observable that lets other classes subscribe to selection changes
     */
    private _change;
    private emitChange;
    get change(): Observable<T[] | T>;
    /**
     * Checks if an item is currently selected
     */
    isSelected(item: T): boolean;
    /**
     * Selects an item
     */
    private selectItem;
    /**
     * Deselects an item
     */
    private deselectItem;
    /**
     * Selects or deselects an item
     */
    setSelected(item: T, selected: boolean): void;
    /**
     * Checks if all currently displayed items are selected
     */
    isAllSelected(): boolean;
    /**
     * Make sure that it could be locked
     *
     * @remark
     * Check also is items.all an array, if not there is no nothing to lock or compare to
     *
     */
    private canItBeLocked;
    /**
     * Lock and unlock item
     */
    lockItem(item: T, lock: boolean): void;
    /**
     * Check is item locked or not by searcing into lockedRefs for entry
     */
    isLocked(item: T): boolean;
    /**
     * Selects or deselects all currently displayed items
     */
    toggleAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Selection<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Selection<any>>;
}

//# sourceMappingURL=selection.d.ts.map