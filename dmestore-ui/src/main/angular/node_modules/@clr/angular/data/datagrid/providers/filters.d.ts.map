{"version":3,"file":"filters.d.ts","sources":["filters.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { ClrDatagridFilterInterface } from '../interfaces/filter.interface';\nimport { Page } from './page';\nimport { StateDebouncer } from './state-debouncer.provider';\nexport declare class FiltersProvider<T = any> {\n    private _page;\n    private stateDebouncer;\n    constructor(_page: Page, stateDebouncer: StateDebouncer);\n    /**\n     * This subject is the list of filters that changed last, not the whole list.\n     * We emit a list rather than just one filter to allow batch changes to several at once.\n     */\n    private _change;\n    get change(): Observable<ClrDatagridFilterInterface<T>[]>;\n    /**\n     * List of all filters, whether they're active or not\n     */\n    private _all;\n    /**\n     * Tests if at least one filter is currently active\n     */\n    hasActiveFilters(): boolean;\n    /**\n     * Returns a list of all currently active filters\n     */\n    getActiveFilters(): ClrDatagridFilterInterface<T>[];\n    /**\n     * Registers a filter, and returns a deregistration function\n     */\n    add<F extends ClrDatagridFilterInterface<T>>(filter: F): RegisteredFilter<T, F>;\n    /**\n     * Accepts an item if it is accepted by all currently active filters\n     */\n    accepts(item: T): boolean;\n    private resetPageAndEmitFilterChange;\n}\nexport declare class RegisteredFilter<T, F extends ClrDatagridFilterInterface<T>> {\n    filter: F;\n    unregister: () => void;\n    constructor(filter: F, unregister: () => void);\n}\n"]}