{"version":3,"file":"datagrid-pagination.d.ts","sources":["datagrid-pagination.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { Page } from './providers/page';\nimport { ClrDatagridPageSize } from './datagrid-page-size';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { DetailService } from './providers/detail.service';\nexport declare class ClrDatagridPagination implements OnDestroy, OnInit {\n    page: Page;\n    commonStrings: ClrCommonStringsService;\n    detailService: DetailService;\n    _pageSizeComponent: ClrDatagridPageSize;\n    currentPageInputRef: ElementRef;\n    constructor(page: Page, commonStrings: ClrCommonStringsService, detailService: DetailService);\n    /**********\n     * Subscription to the Page service for page changes.\n     * Note: this only emits after the datagrid is initialized/stabalized and the page changes.\n     */\n    ngOnInit(): void;\n    /**\n     * Subscription to the page service changes\n     */\n    private _pageSubscription;\n    ngOnDestroy(): void;\n    disableCurrentPageInput: boolean;\n    /**\n     * Page size\n     */\n    get pageSize(): number;\n    set pageSize(size: number);\n    /**\n     * Total items (needed to guess the last page)\n     */\n    get totalItems(): number;\n    set totalItems(total: number);\n    /**\n     * Last page\n     */\n    get lastPage(): number;\n    set lastPage(last: number);\n    /**\n     * Current page\n     */\n    get currentPage(): number;\n    set currentPage(page: number);\n    currentChanged: EventEmitter<number>;\n    /**\n     * Moves to the previous page if it exists\n     */\n    previous(): void;\n    /**\n     * Moves to the next page if it exists\n     */\n    next(): void;\n    /**\n     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed\n     */\n    get firstItem(): number;\n    /**\n     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed\n     */\n    get lastItem(): number;\n    /**\n     * Conditionally adds page numbers before and after the current page\n     */\n    get middlePages(): number[];\n    /**\n     * We only update the pagination's current page on blur of the input field, or\n     * when they press enter.\n     */\n    updateCurrentPage(event: any): void;\n}\n"]}