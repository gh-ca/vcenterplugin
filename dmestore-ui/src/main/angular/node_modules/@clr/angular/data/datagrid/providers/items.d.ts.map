{"version":3,"file":"items.d.ts","sources":["items.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TrackByFunction } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FiltersProvider } from './filters';\nimport { Page } from './page';\nimport { Sort } from './sort';\nexport declare class Items<T = any> {\n    private _filters;\n    private _sort;\n    private _page;\n    constructor(_filters: FiltersProvider<T>, _sort: Sort<T>, _page: Page);\n    /**\n     * Indicates if the data is currently loading\n     */\n    loading: boolean;\n    /**\n     * Tracking function to identify objects. Default is reference equality.\n     */\n    trackBy: TrackByFunction<T>;\n    /**\n     * Subscriptions to the other providers changes.\n     */\n    private _filtersSub;\n    private _sortSub;\n    private _pageSub;\n    /**\n     * Cleans up our subscriptions to other providers\n     */\n    destroy(): void;\n    /**\n     * Whether we should use smart items for this datagrid or let the user handle\n     * everything.\n     */\n    private _smart;\n    get smart(): boolean;\n    smartenUp(): void;\n    /**\n     * List of all items in the datagrid\n     */\n    private _all;\n    get all(): T[];\n    set all(items: T[]);\n    /**\n     * Manually recompute the list of displayed items\n     */\n    refresh(): void;\n    /**\n     * Internal temporary step, which we preserve to avoid re-filtering or re-sorting if not necessary\n     */\n    private _filtered;\n    /**\n     * List of items currently displayed\n     */\n    private _displayed;\n    get displayed(): T[];\n    /**\n     * The Observable that lets other classes subscribe to items changes\n     */\n    private _change;\n    private emitChange;\n    get change(): Observable<T[]>;\n    private _allChanges;\n    private emitAllChanges;\n    get allChanges(): Observable<T[]>;\n    /**\n     * Checks if we don't have data to process yet, to abort early operations\n     */\n    private get uninitialized();\n    /**\n     * FiltersProvider items from the raw list\n     */\n    private _filterItems;\n    /**\n     * Sorts items in the filtered list\n     */\n    private _sortItems;\n    /**\n     * Extracts the current page from the sorted list\n     */\n    private _changePage;\n}\n"]}