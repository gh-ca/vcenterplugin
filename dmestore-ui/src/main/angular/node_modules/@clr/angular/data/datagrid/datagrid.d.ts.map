{"version":3,"file":"datagrid.d.ts","sources":["datagrid.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, OnDestroy, QueryList, Renderer2, ViewContainerRef } from '@angular/core';\nimport { ClrDatagridColumn } from './datagrid-column';\nimport { ClrDatagridItems } from './datagrid-items';\nimport { ClrDatagridPlaceholder } from './datagrid-placeholder';\nimport { ClrDatagridRow } from './datagrid-row';\nimport { ClrDatagridStateInterface } from './interfaces/state.interface';\nimport { DisplayModeService } from './providers/display-mode.service';\nimport { ExpandableRowsCount } from './providers/global-expandable-rows';\nimport { Items } from './providers/items';\nimport { Page } from './providers/page';\nimport { RowActionService } from './providers/row-action-service';\nimport { Selection } from './providers/selection';\nimport { StateProvider } from './providers/state.provider';\nimport { DatagridRenderOrganizer } from './render/render-organizer';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { SelectionType } from './enums/selection-type';\nimport { DetailService } from './providers/detail.service';\nexport declare class ClrDatagrid<T = any> implements AfterContentInit, AfterViewInit, OnDestroy {\n    private organizer;\n    items: Items<T>;\n    expandableRows: ExpandableRowsCount;\n    selection: Selection<T>;\n    rowActionService: RowActionService;\n    private stateProvider;\n    private displayMode;\n    private renderer;\n    detailService: DetailService;\n    private el;\n    private page;\n    commonStrings: ClrCommonStringsService;\n    constructor(organizer: DatagridRenderOrganizer, items: Items<T>, expandableRows: ExpandableRowsCount, selection: Selection<T>, rowActionService: RowActionService, stateProvider: StateProvider<T>, displayMode: DisplayModeService, renderer: Renderer2, detailService: DetailService, datagridId: string, el: ElementRef, page: Page, commonStrings: ClrCommonStringsService);\n    SELECTION_TYPE: typeof SelectionType;\n    /**\n     * Freezes the datagrid while data is loading\n     */\n    get loading(): boolean;\n    set loading(value: boolean);\n    /**\n     * Output emitted whenever the data needs to be refreshed, based on user action or external ones\n     */\n    refresh: EventEmitter<ClrDatagridStateInterface<T>>;\n    /**\n     * Public method to re-trigger the computation of displayed items manually\n     */\n    dataChanged(): void;\n    /**\n     * We grab the smart iterator from projected content\n     */\n    iterator: ClrDatagridItems<T>;\n    /**\n     * Array of all selected items\n     */\n    set selected(value: T[]);\n    selectedChanged: EventEmitter<T[]>;\n    /**\n     * Selected item in single-select mode\n     */\n    set singleSelected(value: T);\n    singleSelectedChanged: EventEmitter<T>;\n    clrDgSingleSelectionAriaLabel: string;\n    clrDgSingleActionableAriaLabel: string;\n    clrDetailExpandableAriaLabel: string;\n    set clrDgPreserveSelection(state: boolean);\n    /**\n     * @deprecated since 2.0, remove in 3.0\n     *\n     * Selection/Deselection on row click mode\n     */\n    set rowSelectionMode(value: boolean);\n    /**\n     * Indicates if all currently displayed items are selected\n     */\n    get allSelected(): boolean;\n    /**\n     * Selects/deselects all currently displayed items\n     * @param value\n     */\n    set allSelected(_value: boolean);\n    /**\n     * Custom placeholder detection\n     */\n    placeholder: ClrDatagridPlaceholder<T>;\n    /**\n     * Hideable Column data source / detection.\n     */\n    columns: QueryList<ClrDatagridColumn<T>>;\n    /**\n     * When the datagrid is user-managed without the smart iterator, we get the items displayed\n     * by querying the projected content. This is needed to keep track of the models currently\n     * displayed, typically for selection.\n     */\n    rows: QueryList<ClrDatagridRow<T>>;\n    scrollableColumns: ViewContainerRef;\n    datagridTable: ElementRef;\n    ngAfterContentInit(): void;\n    /**\n     * Our setup happens in the view of some of our components, so we wait for it to be done before starting\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Subscriptions to all the services and queries changes\n     */\n    private _subscriptions;\n    ngOnDestroy(): void;\n    resize(): void;\n    _projectedDisplayColumns: ViewContainerRef;\n    _projectedCalculationColumns: ViewContainerRef;\n    _displayedRows: ViewContainerRef;\n    _calculationRows: ViewContainerRef;\n}\n"]}