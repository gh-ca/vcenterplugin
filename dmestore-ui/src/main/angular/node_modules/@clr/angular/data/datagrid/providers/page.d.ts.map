{"version":3,"file":"page.d.ts","sources":["page.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { StateDebouncer } from './state-debouncer.provider';\nexport declare class Page {\n    private stateDebouncer;\n    constructor(stateDebouncer: StateDebouncer);\n    private preventEmit;\n    activated: boolean;\n    /**\n     * Page size, a value of 0 means no pagination\n     */\n    private _size;\n    get size(): number;\n    set size(size: number);\n    /**\n     * Total items (needed to guess the last page)\n     */\n    private _totalItems?;\n    get totalItems(): number;\n    set totalItems(total: number);\n    /**\n     * Last page\n     */\n    private _last;\n    get last(): number;\n    set last(page: number);\n    /**\n     * The Observable that lets other classes subscribe to page changes\n     */\n    private _change;\n    get change(): Observable<number>;\n    private _sizeChange;\n    get sizeChange(): Observable<number>;\n    /**\n     * Current page\n     */\n    private _current;\n    get current(): number;\n    set current(page: number);\n    /**\n     * Moves to the previous page if it exists\n     */\n    previous(): void;\n    /**\n     * Moves to the next page if it exists\n     */\n    next(): void;\n    /**\n     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed\n     */\n    get firstItem(): number;\n    /**\n     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed\n     */\n    get lastItem(): number;\n    /**\n     * Resets the page size to 0\n     */\n    resetPageSize(preventEmit?: boolean): void;\n}\n"]}