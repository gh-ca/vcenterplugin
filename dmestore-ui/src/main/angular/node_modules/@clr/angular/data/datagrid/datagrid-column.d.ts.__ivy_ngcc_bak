import { EventEmitter, OnDestroy, OnInit, ViewContainerRef, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import { ClrDatagridSortOrder } from './enums/sort-order.enum';
import { ClrDatagridComparatorInterface } from './interfaces/comparator.interface';
import { FiltersProvider } from './providers/filters';
import { Sort } from './providers/sort';
import { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';
import { ClrDatagridFilterInterface } from './interfaces/filter.interface';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { DetailService } from './providers/detail.service';
export declare class ClrDatagridColumn<T = any> extends DatagridFilterRegistrar<T, ClrDatagridFilterInterface<T>> implements OnDestroy, OnInit, OnChanges {
    private _sort;
    private vcr;
    private detailService;
    private changeDetectorRef;
    commonStrings: ClrCommonStringsService;
    constructor(_sort: Sort<T>, filters: FiltersProvider<T>, vcr: ViewContainerRef, detailService: DetailService, changeDetectorRef: ChangeDetectorRef, commonStrings: ClrCommonStringsService);
    showSeparator: boolean;
    /**
     * Subscription to the sort service changes
     */
    private subscriptions;
    ngOnDestroy(): void;
    private listenForDetailPaneChanges;
    private listenForSortingChanges;
    private _colType;
    get colType(): 'string' | 'number';
    set colType(value: 'string' | 'number');
    private _field;
    get field(): string;
    set field(field: string);
    private setupDefaultFilter;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * ClrDatagridComparatorInterface to use when sorting the column
     */
    private _sortBy;
    get sortBy(): ClrDatagridComparatorInterface<T> | string;
    set sortBy(comparator: ClrDatagridComparatorInterface<T> | string);
    /**
     * Indicates if the column is sortable
     */
    get sortable(): boolean;
    /**
     * Indicates if the column is currently sorted
     *
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    private _sorted;
    get sorted(): boolean;
    /**
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    set sorted(value: boolean);
    /**
     * @deprecated This will be removed soon, in favor of the sortOrder mechanism
     */
    sortedChange: EventEmitter<boolean>;
    /**
     * Indicates how the column is currently sorted
     */
    private _sortOrder;
    get sortOrder(): ClrDatagridSortOrder;
    set sortOrder(value: ClrDatagridSortOrder);
    get ariaSort(): "none" | "ascending" | "descending";
    sortOrderChange: EventEmitter<ClrDatagridSortOrder>;
    sortIcon: string | null;
    /**
     * Sorts the datagrid based on this column
     */
    sort(reverse?: boolean): void;
    /**
     * A custom filter for this column that can be provided in the projected content
     */
    customFilter: boolean;
    set projectedFilter(custom: any);
    set updateFilterValue(newValue: string | [number, number]);
    private initFilterValue;
    get filterValue(): string | [number, number];
    set filterValue(newValue: string | [number, number]);
    filterValueChange: EventEmitter<any>;
    private wrappedInjector;
    ngOnInit(): void;
    get _view(): any;
}
