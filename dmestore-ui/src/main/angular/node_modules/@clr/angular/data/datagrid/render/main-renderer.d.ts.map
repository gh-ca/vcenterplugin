{"version":3,"file":"main-renderer.d.ts","sources":["main-renderer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, AfterViewChecked, AfterViewInit, ElementRef, OnDestroy, Renderer2 } from '@angular/core';\nimport { Items } from '../providers/items';\nimport { Page } from '../providers/page';\nimport { TableSizeService } from '../providers/table-size.service';\nimport { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';\nimport { NoopDomAdapter } from './noop-dom-adapter';\nimport { DatagridRenderOrganizer } from './render-organizer';\nimport { ColumnsService } from '../providers/columns.service';\nimport { DetailService } from '../providers/detail.service';\nexport declare const domAdapterFactory: (platformId: any) => DomAdapter | NoopDomAdapter;\nexport declare class DatagridMainRenderer implements AfterContentInit, AfterViewInit, AfterViewChecked, OnDestroy {\n    private organizer;\n    private items;\n    private page;\n    private domAdapter;\n    private el;\n    private renderer;\n    private detailService;\n    private tableSizeService;\n    private columnsService;\n    constructor(organizer: DatagridRenderOrganizer, items: Items, page: Page, domAdapter: DomAdapter, el: ElementRef, renderer: Renderer2, detailService: DetailService, tableSizeService: TableSizeService, columnsService: ColumnsService);\n    private headers;\n    private rows;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    private setupColumns;\n    private _heightSet;\n    private shouldComputeHeight;\n    toggleDetailPane(state: boolean): void;\n    /**\n     * Computes the height of the datagrid.\n     *\n     * NOTE: We had to choose to set the height instead of the min-height because\n     * IE 11 requires the height on the parent for the children flex grow/shrink properties to work.\n     * When we used min-height, 1 1 auto doesn't used to work in IE11 :-(\n     * But this doesn't affect the fix. It works in both fixed & variable height datagrids.\n     *\n     * Refer: http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0\n     */\n    private computeDatagridHeight;\n    private resetDatagridHeight;\n    private subscriptions;\n    ngOnDestroy(): void;\n    /**\n     * Makes each header compute its width.\n     */\n    private computeHeadersWidth;\n    /**\n     * Indicates if we want to re-compute columns width. This should only happen:\n     * 1) When headers change, with columns being added or removed\n     * 2) When rows are lazily loaded for the first time\n     */\n    private columnsSizesStable;\n    private shouldStabilizeColumns;\n    /**\n     * Triggers a whole re-rendring cycle to set column sizes, if needed.\n     */\n    private stabilizeColumns;\n}\n"]}