{"version":3,"file":"sort.d.ts","sources":["sort.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { ClrDatagridComparatorInterface } from '../interfaces/comparator.interface';\nimport { StateDebouncer } from './state-debouncer.provider';\nexport declare class Sort<T = any> {\n    private stateDebouncer;\n    constructor(stateDebouncer: StateDebouncer);\n    /**\n     * Currently active comparator\n     */\n    private _comparator;\n    get comparator(): ClrDatagridComparatorInterface<T>;\n    set comparator(value: ClrDatagridComparatorInterface<T>);\n    /**\n     * Ascending order if false, descending if true\n     */\n    private _reverse;\n    get reverse(): boolean;\n    set reverse(value: boolean);\n    /**\n     * The Observable that lets other classes subscribe to sort changes\n     */\n    private _change;\n    private emitChange;\n    get change(): Observable<Sort<T>>;\n    /**\n     * Sets a comparator as the current one, or toggles reverse if the comparator is already used. The\n     * optional forceReverse input parameter allows to override that toggling behavior by sorting in\n     * reverse order if `true`.\n     *\n     * @memberof Sort\n     */\n    toggle(sortBy: ClrDatagridComparatorInterface<T>, forceReverse?: boolean): void;\n    /**\n     * Clears the current sorting order\n     */\n    clear(): void;\n    /**\n     * Compares two objects according to the current comparator\n     */\n    compare(a: T, b: T): number;\n}\n"]}