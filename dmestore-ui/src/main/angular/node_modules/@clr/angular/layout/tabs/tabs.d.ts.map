{"version":3,"file":"tabs.d.ts","sources":["tabs.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef, OnDestroy } from '@angular/core';\nimport { IfActiveService } from '../../utils/conditional/if-active.service';\nimport { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { TabsLayout } from './enums/tabs-layout.enum';\nimport { TabsService } from './providers/tabs.service';\nimport { ClrTabLink } from './tab-link.directive';\nexport declare class ClrTabs implements AfterContentInit, OnDestroy {\n    ifActiveService: IfActiveService;\n    toggleService: ClrPopoverToggleService;\n    tabsService: TabsService;\n    tabsId: number;\n    commonStrings: ClrCommonStringsService;\n    private subscriptions;\n    private get overflowPosition();\n    private set tabContentViewContainer(value);\n    set layout(layout: TabsLayout);\n    get layout(): TabsLayout;\n    private tabs;\n    private _tabLinkDirectives;\n    get tabLinkDirectives(): ClrTabLink[];\n    tabLinkElements: HTMLElement[];\n    keyFocus: ClrKeyFocus;\n    constructor(ifActiveService: IfActiveService, toggleService: ClrPopoverToggleService, tabsService: TabsService, tabsId: number, commonStrings: ClrCommonStringsService);\n    get activeTabInOverflow(): boolean;\n    get activeTabPosition(): number;\n    get tabIds(): string;\n    get isCurrentInOverflow(): boolean;\n    get isVertical(): boolean;\n    toggleOverflowOnPosition(position: number): void;\n    private _tabOverflowEl;\n    set tabOverflowEl(value: ElementRef);\n    resetKeyFocusCurrentToActive(event: FocusEvent): void;\n    toggleOverflowOnClick(): void;\n    _mousedown: boolean;\n    openOverflowOnFocus(): void;\n    closeOnFocusOut(event: FocusEvent): void;\n    closeOnEscapeKey(): void;\n    closeOnOutsideClick(event: Event, tabOverflowTrigger: HTMLElement): void;\n    private listenForTabLinkChanges;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n}\n"]}