{"version":3,"file":"key-focus.d.ts","sources":["key-focus.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { QueryList, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ClrFocusDirection } from './enums/focus-direction.enum';\nimport { FocusableItem } from './interfaces';\nimport { ClrKeyFocusItem } from './key-focus-item';\nexport declare class ClrKeyFocus {\n    private elementRef;\n    constructor(elementRef: ElementRef);\n    direction: ClrFocusDirection;\n    focusOnLoad: boolean;\n    private focusChange;\n    protected clrKeyFocusItems: QueryList<ClrKeyFocusItem>;\n    private _focusableItems;\n    set focusableItems(elements: Array<FocusableItem>);\n    get focusableItems(): Array<FocusableItem>;\n    get nativeElement(): HTMLElement;\n    private _current;\n    get current(): number;\n    set current(value: number);\n    get currentItem(): FocusableItem;\n    get currentItemElement(): HTMLElement;\n    focusCurrent(): void;\n    moveTo(position: number): void;\n    protected subscriptions: Subscription[];\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    handleKeyboardEvent(event: KeyboardEvent): void;\n    setClickedItemCurrent(event: any): void;\n    private getItemPosition;\n    protected positionInRange(position: number): boolean;\n    protected currentFocusIsNotFirstItem(): boolean;\n    protected currentFocusIsNotLastItem(): boolean;\n    protected initializeFocus(): void;\n    private listenForItemUpdates;\n    protected nextKeyPressed(event: KeyboardEvent): boolean;\n    protected prevKeyPressed(event: KeyboardEvent): boolean;\n}\n"]}