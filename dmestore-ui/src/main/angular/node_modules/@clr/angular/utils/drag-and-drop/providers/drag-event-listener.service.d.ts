import { NgZone, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { DragEventInterface, DragPointPosition } from '../interfaces/drag-event.interface';
import { DragAndDropEventBusService } from './drag-and-drop-event-bus.service';
import * as ɵngcc0 from '@angular/core';
export declare class DragEventListenerService<T> {
    private ngZone;
    private renderer;
    private eventBus;
    private draggableEl;
    private listeners;
    private nestedListeners;
    private checkDragStartBoundaryListener;
    private dragStart;
    private dragMove;
    private dragEnd;
    private hasDragStarted;
    private dragStartDelayTimeout;
    get dragStarted(): Observable<DragEventInterface<T>>;
    get dragMoved(): Observable<DragEventInterface<T>>;
    get dragEnded(): Observable<DragEventInterface<T>>;
    get dragStartPosition(): DragPointPosition;
    constructor(ngZone: NgZone, renderer: Renderer2, eventBus: DragAndDropEventBusService<T>);
    private initialPosition;
    dragDataTransfer?: T;
    group?: string | string[];
    dragStartDelay: number;
    ghostElement?: any;
    dropPointPosition?: DragPointPosition;
    attachDragListeners(draggableEl: Node): void;
    detachDragListeners(): void;
    private getNativeEventObject;
    private customDragEvent;
    private checkDragStartBoundary;
    private broadcast;
    private generateDragEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragEventListenerService<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DragEventListenerService<any>>;
}

//# sourceMappingURL=drag-event-listener.service.d.ts.map