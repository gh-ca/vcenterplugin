{"version":3,"file":"draggable.d.ts","sources":["draggable.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { ClrDragEvent } from '../drag-event';\nimport { ClrIfDragged } from '../if-dragged';\nimport { DragEventListenerService } from '../providers/drag-event-listener.service';\nimport { DragHandleRegistrarService } from '../providers/drag-handle-registrar.service';\nimport { DraggableSnapshotService } from '../providers/draggable-snapshot.service';\nimport { GlobalDragModeService } from '../providers/global-drag-mode.service';\nexport declare class ClrDraggable<T> implements AfterContentInit, OnDestroy {\n    private el;\n    private dragEventListener;\n    private dragHandleRegistrar;\n    private viewContainerRef;\n    private cfr;\n    private injector;\n    private draggableSnapshot;\n    private globalDragMode;\n    private draggableEl;\n    private subscriptions;\n    private componentFactory;\n    dragOn: boolean;\n    constructor(el: ElementRef, dragEventListener: DragEventListenerService<T>, dragHandleRegistrar: DragHandleRegistrarService<T>, viewContainerRef: ViewContainerRef, cfr: ComponentFactoryResolver, injector: Injector, draggableSnapshot: DraggableSnapshotService<T>, globalDragMode: GlobalDragModeService);\n    customGhost: ClrIfDragged<T>;\n    set dataTransfer(value: T);\n    set group(value: string | string[]);\n    set dragStartDelay(value: number);\n    private createDefaultGhost;\n    private destroyDefaultGhost;\n    dragStartEmitter: EventEmitter<ClrDragEvent<T>>;\n    dragMoveEmitter: EventEmitter<ClrDragEvent<T>>;\n    dragEndEmitter: EventEmitter<ClrDragEvent<T>>;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n}\n"]}