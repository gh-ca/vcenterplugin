{"version":3,"file":"aria-live.service.d.ts","sources":["aria-live.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NgZone, OnDestroy } from '@angular/core';\nexport declare enum ClrAriaLivePoliteness {\n    off = \"off\",\n    polite = \"polite\",\n    assertive = \"assertive\"\n}\n/**\n * This service handle `aria-live` accessibility attribute. The issue is that you need\n * to have the DOM Element with attribute `aria-live` before you could insert content\n * and SR (Screen Reader) pick the change and announce it.\n *\n * ```typescript\n * import { ClrAriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';\n *\n * @Component({\n * selector: 'clr-demo-component',\n * providers: [ClrAriaLiveService],\n * template: `\n *   <ng-content></ng-content>\n * `,\n * })\n * export class DemoComponent {\n *  constructor(ariaLiveService: ClrAriaLiveService) {}\n *\n *  public actionThatWillTriggerChange() {\n *    this.ariaLiveService.announce('message that I want to announce to SR');\n *  }\n * }\n * ```\n *\n */\nexport declare class ClrAriaLiveService implements OnDestroy {\n    private ngZone;\n    private platformId;\n    private ariaLiveElement;\n    private document;\n    private previousTimeout;\n    constructor(ngZone: NgZone, _document: any, platformId: any);\n    private _id;\n    /**\n     * get access to the internal HTML `id` that gonna be used for the AriaLive container.\n     * @return ID of the DOM Element as string.\n     */\n    get id(): string;\n    /**\n     * Append text content inside the AriaLive Container. This method will check if the\n     * DOM Element is existing if not it will create one for us and the will apply the text.\n     *\n     * ```typescript\n     * this.ariaLiveService.announce(this.el.nativeElement);\n     * // or\n     * this.ariaLiveService.announce('Message to announce to SR');\n     * ```\n     *\n     * @remark\n     * When second argument is `AriaLivePoliteness.off` we won't create aria container or update it.\n     * The reason for that is that we don't want to do additional work if the SR will ignore it.\n     *\n     * @param message - This could be simple string or HTMLElement\n     * @param politeness - 'polite', 'assertive' or 'off'\n     */\n    announce(message: string | HTMLElement, politeness?: ClrAriaLivePoliteness): void;\n    /**\n     * onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive\n     * container from the document.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Create AriaLive DOM element as a last child of the document.\n     * After the element is created, we gonna apply Clarity class to hide it from\n     * the screen and set the `aria-live` politness.\n     *\n     * `clr-sr-only` is the CSS class that is used to hide the element from the screen.\n     *\n     * @remark\n     * Calling this method multiple times will create multiple DOM Elements, that\n     * won't be tracked and will be GC after the service is destroyed.\n     *\n     * @return AriaLive container as HTMLElement\n     *\n     */\n    private createContainer;\n}\n"]}