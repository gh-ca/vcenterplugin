{"version":3,"file":"wizard.d.ts","sources":["wizard.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, DoCheck, ElementRef, EventEmitter, IterableDiffers, OnDestroy, QueryList } from '@angular/core';\nimport { ButtonHubService } from './providers/button-hub.service';\nimport { HeaderActionService } from './providers/header-actions.service';\nimport { PageCollectionService } from './providers/page-collection.service';\nimport { WizardNavigationService } from './providers/wizard-navigation.service';\nimport { ClrWizardHeaderAction } from './wizard-header-action';\nimport { ClrWizardPage } from './wizard-page';\nexport declare class ClrWizard implements OnDestroy, AfterContentInit, DoCheck {\n    private platformId;\n    navService: WizardNavigationService;\n    pageCollection: PageCollectionService;\n    buttonService: ButtonHubService;\n    headerActionService: HeaderActionService;\n    private elementRef;\n    /**\n     * Set the modal size of the wizard. Set using `[clrWizardSize]` input.\n     */\n    size: string;\n    /**\n     * Tells the modal part of the wizard whether it should have a close \"X\"\n     * in the top right corner. Set using `[clrWizardClosable]` input.\n     */\n    closable: boolean;\n    /**\n     * Resets page completed states when navigating backwards.\n     * Set using `[clrWizardForceForwardNavigation]` input.\n     */\n    set forceForward(value: boolean);\n    get forceForward(): boolean;\n    private _forceForward;\n    _open: boolean;\n    /**\n     * Toggles open/close of the wizard component.\n     * Set using the `[clrWizardOpen]` input.\n     */\n    set clrWizardOpen(open: boolean);\n    /**\n     * Prevents ClrWizard from moving to the next page or closing itself on finishing.\n     * Set using the `[clrWizardPreventDefaultNext]` input. Note that using stopNext\n     * will require you to create your own calls to .next() and .finish() in your\n     * host component to make the ClrWizard work as expected.\n     */\n    set stopNext(value: boolean);\n    get stopNext(): boolean;\n    private _stopNext;\n    /**\n     * Prevents ClrWizard from closing when the cancel button or close \"X\" is clicked.\n     * Set using the `[clrWizardPreventDefaultCancel]` input.\n     *\n     * Note that using stopCancel will require you to create your own calls to `close()` in your host compone`nt\n     * to make the ClrWizard work as expected. Useful for doing checks or prompts\n     * before closing a ClrWizard.\n     */\n    set stopCancel(value: boolean);\n    get stopCancel(): boolean;\n    private _stopCancel;\n    /**\n     * Prevents ClrWizard from performing any form of navigation away from the current\n     * page. Set using the `[clrWizardPreventNavigation]` input.\n     * Note that stopNavigation is meant to freeze the wizard in place, typically\n     * during a long validation or background action where you want the wizard to\n     * display loading content but not allow the user to execute navigation in\n     * the stepnav, close X, or the  back, finish, or next buttons.\n     */\n    set stopNavigation(value: boolean);\n    get stopNavigation(): boolean;\n    private _stopNavigation;\n    /**\n     * Prevents clicks on the links in the stepnav from working.\n     * Set using `[clrWizardDisableStepnav]` input.\n     * A more granular bypassing of navigation which can be useful when your\n     * ClrWizard is in a state of completion and you don't want users to be\n     * able to jump backwards and change things.\n     */\n    set disableStepnav(value: boolean);\n    get disableStepnav(): boolean;\n    private _disableStepnav;\n    /**\n     * Used to communicate to the underlying modal that animations are not\n     * wanted. Primary use is for the display of static/inline wizards.\n     * Set using `[clrWizardPreventModalAnimation]` input.\n     */\n    /** @deprecated since 3.0, input should be removed in 4.0 because is only related to inline wizards */\n    _stopModalAnimations: boolean;\n    get stopModalAnimations(): string;\n    /**\n     * Emits when the wizard is opened or closed.\n     * Listen via `(clrWizardOpenChange)` event.\n     */\n    _openChanged: EventEmitter<boolean>;\n    /**\n     * Emits when the wizard is canceled. Listen via `(clrWizardOnCancel)` event.\n     * Can be combined with the `[clrWizardPreventDefaultCancel]` input to create\n     * wizard-level custom cancel routines.\n     */\n    onCancel: EventEmitter<any>;\n    /**\n     * Emits when the wizard is completed. Listen via `(clrWizardOnFinish)` event.\n     * Can be combined with the `[clrWizardPreventDefaultNext]` input to create\n     * wizard-level custom completion routines.\n     */\n    wizardFinished: EventEmitter<any>;\n    /**\n     * Emits when the wizard is reset. Listen via `(clrWizardOnReset)` event.\n     */\n    onReset: EventEmitter<any>;\n    /**\n     * Emits when the current page has changed. Listen via `(clrWizardCurrentPageChanged)` event.\n     * output. Useful for non-blocking validation.\n     */\n    currentPageChanged: EventEmitter<any>;\n    /**\n     * Emits when the wizard moves to the next page. Listen via `(clrWizardOnNext)` event.\n     * Can be combined with the `[clrWizardPreventDefaultNext]` input to create\n     * wizard-level custom navigation routines, which are useful for validation.\n     */\n    onMoveNext: EventEmitter<any>;\n    /**\n     * Emits when the wizard moves to the previous page. Can be useful for validation.\n     * Listen via `(clrWizardOnPrevious)` event.\n     */\n    onMovePrevious: EventEmitter<any>;\n    pages: QueryList<ClrWizardPage>;\n    headerActions: QueryList<ClrWizardHeaderAction>;\n    wizardTitle: ElementRef;\n    get currentPage(): ClrWizardPage;\n    set currentPage(page: ClrWizardPage);\n    get isLast(): boolean;\n    get isFirst(): boolean;\n    get isStatic(): boolean;\n    private differ;\n    private subscriptions;\n    constructor(platformId: any, navService: WizardNavigationService, pageCollection: PageCollectionService, buttonService: ButtonHubService, headerActionService: HeaderActionService, elementRef: ElementRef, differs: IterableDiffers);\n    ngAfterContentInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    /**\n     * Marks Wizard as finished. By default it does not execute event\n     * emissions or checks before completing and closing. This method is commonly\n     * used as part of an alternative navigation with `[clrWizardPreventDefaultNext]`.\n     *\n     * If `skipChecksAndEmits` is true, the wizard will complete and close\n     * regardless of the state of its current page. This is useful for alternative\n     * navigation where event emissions have already been done and firing them again\n     * may cause an event loop.\n     */\n    finish(skipChecksAndEmits?: boolean): void;\n    /**\n     * Marks the wizard as finished but does run checks and emissions.\n     * Good for a last step in an alternate workflow. Does the same thing as\n     * calling `ClrWizard.finish(true)` or `ClrWizard.finish()` without a parameter.\n     */\n    forceFinish(): void;\n    /**\n     * Opens the wizard. If there is no current page defined, sets the first page in the wizard to be current.\n     */\n    open(): void;\n    /**\n     * Closes the wizard. Call this directly instead of `cancel()` to implement alternative cancel functionality.\n     */\n    close(): void;\n    /**\n     * Used to open and close the wizard. By default the wizard will\n     * close if invoked with no parameter. If parameter is true wizard will open\n     * else if false will close.\n     */\n    toggle(open: boolean): void;\n    /**\n     * Moves the wizard to the previous page.\n     */\n    previous(): void;\n    /**\n     * By default, `next()` does not execute event emissions.\n     * This method is commonly called as part of an alternative navigation\n     * with `[clrWizardPreventDefaultNext]`. The wizard will move to the next page\n     * regardless of the state of its current page. This is useful for alternative\n     * navigation where event emissions have already been done and firing them again\n     * may cause an event loop.\n     *\n     * If `skipChecksAndEmits` is false, the wizard will execute default checks\n     * and emit events as normal. This is useful for custom buttons or programmatic\n     * workflows that are not executing the wizards default checks and emissions.\n     * It is another way to navigate without having to rewrite the wizardâ€™s default\n     * functionality from scratch.\n     */\n    next(skipChecksAndEmits?: boolean): void;\n    /**\n     * Moves the wizard to the next page without the checks and emissions.\n     * Good for a last step in an alternate workflow.\n     * Alias for `ClrWizard.next(true)` or `ClrWizard.next()`\n     */\n    forceNext(): void;\n    /**\n     * Cancels and closes the wizard. Do not use this for an override of the cancel\n     * the functionality with `[clrWizardPreventDefaultCancel]`, `[clrWizardPreventPageDefaultCancel]`,\n     * or `[clrWizardPagePreventDefault]` because it will initiate the same checks\n     * and event emissions that invoked your event handler. Use `ClrWizard.close()` instead.\n     */\n    cancel(): void;\n    /**\n     * Overrides behavior of the underlying modal to avoid collisions with\n     * alternative cancel functionality. In most cases, use `ClrWizard.cancel()` instead.\n     */\n    modalCancel(): void;\n    /**\n     * Checks for alternative cancel flows defined at the current page or\n     * wizard level. Performs a canceled if not. Emits events that initiate\n     * the alternative cancel outputs `(clrWizardPageOnCancel)` and `(clrWizardOnCancel)`.\n     */\n    checkAndCancel(): void;\n    /**\n     * Navigates to a given page in the Wizard. Navigation will invoke the wizardâ€™s default\n     * checks and event emissions.\n     *\n     * The format of the expected ID parameter can be found in the return of the\n     * ClrWizardPage.id getter, usually prefixed with `clr-wizard-page-` and then either a\n     * numeric ID or the ID specified for the `ClrWizardPage` componentâ€™s `id` input.\n     */\n    goTo(pageId: string): void;\n    /**\n     * Reset sets all WizardPages to incomplete and sets the first page in the `ClrWizard` to\n     * be the current page, resetting the wizard navigation.\n     * Use `(clrWizardOnReset)` event to reset the data or model of your wizard.\n     */\n    reset(): void;\n    private listenForNextPageChanges;\n    private listenForPreviousPageChanges;\n    private listenForCancelChanges;\n    private listenForFinishedChanges;\n    private listenForPageChanges;\n    private updateNavOnPageChanges;\n    private initializeButtons;\n    private emitWizardFinished;\n}\n"]}