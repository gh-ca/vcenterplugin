{"version":3,"file":"moment-date-adapter.d.ts","sources":["moment-date-adapter.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { Moment } from 'moment';\n/** Configurable options for {@see MomentDateAdapter}. */\nexport interface MatMomentDateAdapterOptions {\n    /**\n     * When enabled, the dates have to match the format exactly.\n     * See https://momentjs.com/guides/#/parsing/strict-mode/.\n     */\n    strict?: boolean;\n    /**\n     * Turns the use of utc dates on or off.\n     * Changing this will change how Angular Material components like DatePicker output dates.\n     * {@default false}\n     */\n    useUtc?: boolean;\n}\n/** InjectionToken for moment date adapter to configure options. */\nexport declare const MAT_MOMENT_DATE_ADAPTER_OPTIONS: InjectionToken<MatMomentDateAdapterOptions>;\n/** @docs-private */\nexport declare function MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY(): MatMomentDateAdapterOptions;\n/** Adapts Moment.js Dates for use with Angular Material. */\nexport declare class MomentDateAdapter extends DateAdapter<Moment> {\n    private _options?;\n    private _localeData;\n    constructor(dateLocale: string, _options?: MatMomentDateAdapterOptions | undefined);\n    setLocale(locale: string): void;\n    getYear(date: Moment): number;\n    getMonth(date: Moment): number;\n    getDate(date: Moment): number;\n    getDayOfWeek(date: Moment): number;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getYearName(date: Moment): string;\n    getFirstDayOfWeek(): number;\n    getNumDaysInMonth(date: Moment): number;\n    clone(date: Moment): Moment;\n    createDate(year: number, month: number, date: number): Moment;\n    today(): Moment;\n    parse(value: any, parseFormat: string | string[]): Moment | null;\n    format(date: Moment, displayFormat: string): string;\n    addCalendarYears(date: Moment, years: number): Moment;\n    addCalendarMonths(date: Moment, months: number): Moment;\n    addCalendarDays(date: Moment, days: number): Moment;\n    toIso8601(date: Moment): string;\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    deserialize(value: any): Moment | null;\n    isDateInstance(obj: any): boolean;\n    isValid(date: Moment): boolean;\n    invalid(): Moment;\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    private _createMoment;\n}\n"]}